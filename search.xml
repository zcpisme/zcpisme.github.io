<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从Devops到MLOps再到LLMOps</title>
    <url>/2024/11/26/12_2024-11-03-XXXOps%20From%20Dev%20to%20LLM/</url>
    <content><![CDATA[<blockquote>
<p>由ChatGPT翻译自<a href="https://zcpisme.github.io/en/2024/11/26/12_2024-11-03-XXXOps%20From%20Dev%20to%20LLM/">原网址</a></p>
</blockquote>
<h2 id="从-CI-CD-开始"><a href="#从-CI-CD-开始" class="headerlink" title="从 CI&#x2F;CD 开始"></a>从 CI&#x2F;CD 开始</h2><p>网上有很多关于 CI&#x2F;CD（持续集成&#x2F;持续交付）的定义，但其实所有和 XXXOps 相关的东西，都是基于 CI&#x2F;CD 的。</p>
<p>在我的理解中，CI&#x2F;CD 是一种开发和运维的实践，<strong>通过自动化构建、测试和部署流程，提升软件交付的效率和质量。</strong></p>
<p>举个例子，想象你平时是怎么用 GitHub 和 Docker 的。当你把代码提交到远程仓库，代码会被自动编译、构建并测试，这些过程就属于 CI。而当你把代码部署到测试环境，最后上线到生产环境，这些步骤就属于 CD。</p>
<p>换句话说：</p>
<ul>
<li><strong>CI（持续集成）：</strong> 专注于代码的构建和测试，确保代码改动能够可靠地集成。</li>
<li><strong>CD（持续交付）：</strong> 专注于部署，确保代码能顺利从测试环境交付到生产环境。</li>
</ul>
<p>由此可以看出，DevOps（开发和运维）本质上就是 CI&#x2F;CD 流程的具体实现，让软件工程师的工作更简单高效。</p>
<hr>
<h2 id="MLOps：比-DevOps-更进一步"><a href="#MLOps：比-DevOps-更进一步" class="headerlink" title="MLOps：比 DevOps 更进一步"></a>MLOps：比 DevOps 更进一步</h2><p>MLOps 包含了 DevOps 的所有概念，但它的扩展范围还包括对数据、模型训练、分析和部署的管理。</p>
<p>此时，你可以想象，不仅需要管理代码版本，还需要管理<strong>数据版本</strong>（比如很多平台支持数据版本控制，像 Hopsworks，甚至只是用 Git 也行）以及<strong>模型版本</strong>（比如 MLflow 就能做到）。</p>
<p>总的来说，MLOps 就是在 DevOps 的基础上，专门针对机器学习的整个流程。</p>
<hr>
<h2 id="LLMOps：一个又潮又长的新名词"><a href="#LLMOps：一个又潮又长的新名词" class="headerlink" title="LLMOps：一个又潮又长的新名词"></a>LLMOps：一个又潮又长的新名词</h2><p>好吧，我不得不说，每次有新东西出来，人们就会喜欢创造新词来形容它。LLMOps（大语言模型运维）其实和 MLOps 没什么本质区别，唯一的不同是它专注于管理大语言模型，而不是传统的机器学习模型。</p>
<hr>
<h2 id="三者之间的关系"><a href="#三者之间的关系" class="headerlink" title="三者之间的关系"></a>三者之间的关系</h2><blockquote>
<p>ChatGPT 生成</p>
</blockquote>
<ul>
<li><strong>DevOps 是基础：</strong> DevOps 提供了 CI&#x2F;CD 管道和基础设施自动化的标准流程，是 MLOps 和 LLMOps 的基石。</li>
<li><strong>MLOps 是扩展：</strong> MLOps 将 DevOps 的实践扩展到机器学习领域，包括数据管理、模型训练和部署。</li>
<li><strong>LLMOps 是细化：</strong> LLMOps 专注于大语言模型的复杂训练、优化和部署，进一步细化了 MLOps 的实践，用于生成式 AI。</li>
</ul>
<hr>
<h2 id="接下来呢？"><a href="#接下来呢？" class="headerlink" title="接下来呢？"></a>接下来呢？</h2><p>酷，这篇文章只是对 XXXOps 的一个概述。我写它的原因是因为我这学期上了一门叫“MLOps”的课。一开始我以为它很高大上，后来发现其实就是教你怎么用各种工具把机器学习模型部署出来……</p>
<p>当然，这还不是唯一的原因。另一个原因是过去几个月“消失”的时候，我发现了一个很有意思的平台，叫 <a href="https://github.com/langgenius/dify">Dify</a>。它可以让你自己创建 LLM 应用，有点像 LLMOps，非常酷！</p>
<table>
<thead>
<tr>
<th><img src="/../images/12/Megumin.png" alt="动漫角色:惠惠"></th>
<th><img src="/../images/12/difydemo.png" alt="Dify Demo"></th>
</tr>
</thead>
</table>
<p>下次见，我会和大家分享更多最近我在做的事情。😊</p>
]]></content>
      <categories>
        <category>CI/CD</category>
      </categories>
      <tags>
        <tag>Operations</tag>
        <tag>DevOps</tag>
        <tag>MLOps</tag>
        <tag>LLMOps</tag>
        <tag>Development</tag>
        <tag>CI/CD</tag>
        <tag>持续集成</tag>
        <tag>持续交付</tag>
      </tags>
  </entry>
  <entry>
    <title>白嫖AWS EC2及使用Dify 0.12.1的心得（以及一点小小的宣传）</title>
    <url>/2024/11/27/13_2024-11-26-AWS%E4%B8%8A%E7%9A%84Dify/</url>
    <content><![CDATA[<p>大模型太好玩了，gpt，gpt，没了你我可怎么活啊。</p>
<p><a href="https://github.com/langgenius/dify">Dify官网</a>本地部署教程已经很详细了，B站或者Youtube也有教程，所以就不再说了。使用源码部署的话（这篇文章主要用的方法），在clone过后，关键就是跟着dify&#x2F;api文件夹和dify&#x2F;web文件夹下README.md的步骤一步一步来就好了。这篇文章主要就讲一下在AWS上部署的一些流程和自己踩得一些坑。</p>
<p>用到的工具：</p>
<ul>
<li>AWS EC2 (LightSail更简单，但只能免费三个月，而最基础的EC2能免费试用12个月)</li>
<li>Git</li>
<li>Python 3.11 (Dify 0.12.0版本后仅支持3.11＋的Python)</li>
</ul>
<h2 id="1-AWS启动EC2示例，通过VScode连接"><a href="#1-AWS启动EC2示例，通过VScode连接" class="headerlink" title="1. AWS启动EC2示例，通过VScode连接"></a>1. AWS启动EC2示例，通过VScode连接</h2><ol>
<li><p>注册完AWS后，左上角搜索框搜索EC2，第一个就是，点击。随后在界面找到Launch Instance新建一个实例。</p>
<p><img src="/../images/13/2_awsec2-imageonline.co-merged.jpg"></p>
</li>
<li><p>在新建实例界面，跟随图片这里，这里选取ubuntu系统，以及标记为Free Tier Eligible的实例（付费用户无所谓）。<strong>如果没有密钥对，记得创建并下载</strong>，这点很重要，之后连接服务器的必要条件。最后设置好后启动实例，等待启动。</p>
<p><img src="/../images/13/5_awsec2-imageonline.co-merged.jpg"></p>
</li>
<li><p>回到主界面，左侧instances可查看已创建的实例，之后设置安全组，方便之后从本机通过浏览器连接服务器上的Dify。</p>
</li>
</ol>
<p><img src="/../images/13/10_awsec2-imageonline.co-merged.jpg"></p>
<ol start="4">
<li><a href="https://code.visualstudio.com/">VScode</a>是个好东西，能很方便的进行SSH连接。具体参考<a href="https://medium.com/@christyjacob4/using-vscode-remotely-on-an-ec2-instance-7822c4032cff">此教程</a>。里面的key就是上面提到的密钥对。</li>
</ol>
<h2 id="2-启动Dify"><a href="#2-启动Dify" class="headerlink" title="2. 启动Dify"></a>2. 启动Dify</h2><p>之后的流程就和<a href="https://docs.dify.ai/getting-started/install-self-hosted/local-source-code">本地安装Dify</a>一模一样了，这里就讲几个要注意的点。</p>
<p>由于免费的EC2实例性能有限（1g内存），大部分任务无法运行，可以使用<strong>交换空间</strong>（用硬盘作为虚拟扩展内存），但这样运行编译起来极慢。所以有能力的还是直接上好一点的服务器吧… 推荐服务器内存最少为2G（虽然这样也需要配置适当的交换空间）。</p>
<p>配置交换空间如下：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo fallocate -l 4G &#x2F;swapfile  # 创建一个大小为4GB的交换文件
sudo chmod 600 &#x2F;swapfile        # 设置交换文件的权限为600，仅允许root用户读取和写入
sudo mkswap &#x2F;swapfile           # 将文件格式化为交换空间
sudo swapon &#x2F;swapfile           # 启用交换文件
swapon --show                   # 显示当前启用的交换空间
&#x2F;swapfile none swap sw 0 0      # 配置交换文件的挂载信息
free -m                         # 查看内存和交换空间的使用情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了能在本地连接上服务器上配置好的Dify平台，需要分别在dify&#x2F;api&#x2F;.env和dify&#x2F;web&#x2F;.env.local这两个个配置文件下，将所有127.0.0.1部分改成合适的服务器ip地址。</p>
<p><em><strong>注意，CODE_EXECUTION_ENDPOINT这一行不做任何改动：</strong></em></p>
<pre class="line-numbers language-none"><code class="language-none"># CODE EXECUTION CONFIGURATION
CODE_EXECUTION_ENDPOINT&#x3D;http:&#x2F;&#x2F;127.0.0.1:8194<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="99-我的Dify小应用（laopo）"><a href="#99-我的Dify小应用（laopo）" class="headerlink" title="99. 我的Dify小应用（laopo）"></a>99. 我的Dify小应用（laopo）</h2><p>之后就很好玩了，各处有不同的教程，可以自己定制各种奇妙的小应用。这也是我接触这个平台的初衷。在这里也做个小宣传。</p>
<p>快看微信上的蕾姆waifu！每天会打招呼嘘寒问暖，也会记得我的喜好，冬季coding好伴侣！感兴趣的可以一起联系我一起交流~</p>
<p><img src="/../images/13/11_rem1.jpg" alt="如果__有颜色"></p>
<p><img src="/../images/13/12_rem2.jpg" alt="那一定是__"></p>
<p>温馨捏。</p>
<p><img src="/../images/13/13_remQR.png"></p>
<p>悄悄放个二维码，欢迎来玩，不断更新中~</p>
]]></content>
      <categories>
        <category>Dify</category>
      </categories>
      <tags>
        <tag>Dify</tag>
        <tag>二次元</tag>
        <tag>蕾姆！</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker相关使用及配置</title>
    <url>/2025/01/12/15_2025-01-12-Docker%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>快来试试一键式傻瓜分发，做一个docker领域大神吧！在软件开发的过程中，但凡遇到了CI&#x2F;CD的概念，就离不开Docker。</p>
<h1 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h1><h2 id="1-Docker-简介"><a href="#1-Docker-简介" class="headerlink" title="1. Docker 简介"></a>1. <strong>Docker 简介</strong></h2><p>Docker 是一种开源的容器化技术，可以将应用程序及其所有依赖打包成一个可移植的容器。通过 Docker，可以确保应用在不同环境（开发、测试、生产）中运行一致性，解决“在我电脑上可以运行”的问题。</p>
<h2 id="2-Docker-的基本概念"><a href="#2-Docker-的基本概念" class="headerlink" title="2. Docker 的基本概念"></a>2. <strong>Docker 的基本概念</strong></h2><ol>
<li><strong>镜像（Image）</strong>：<ul>
<li>类似于应用程序的模板，包含了运行应用所需的所有环境（如操作系统、运行时、库、应用程序代码等）。</li>
<li>镜像是不可变的，类似于虚拟机的快照。</li>
</ul>
</li>
<li><strong>容器（Container）</strong>：<ul>
<li>基于镜像创建的实例化运行环境。每个容器是一个独立的沙盒，包含应用和所有依赖。</li>
<li>容器是轻量级的，启动速度快，占用资源少。</li>
</ul>
</li>
<li><strong>Dockerfile</strong>：<ul>
<li>一种脚本文件，用于定义如何构建镜像（包含操作系统、依赖安装、程序代码等）。</li>
<li>类似于虚拟机的配置文件。</li>
</ul>
</li>
<li><strong>Docker Hub</strong>：<ul>
<li>一个公共的镜像存储库，类似于代码托管平台（如 GitHub）。可以从 Docker Hub 下载或推送镜像。</li>
</ul>
</li>
<li><strong>网络（Network）</strong>：<ul>
<li>Docker 提供了容器间通信的功能，允许容器通过网络互联。</li>
<li>默认的网络模式是 <code>bridge</code>，所有容器连接到一个虚拟网桥。</li>
</ul>
</li>
<li><strong>卷（Volume）</strong>：<ul>
<li>用于数据持久化，将容器内部的数据保存到宿主机的文件系统中，避免容器删除后数据丢失。</li>
</ul>
</li>
</ol>
<h2 id="3-Docker-的基本操作"><a href="#3-Docker-的基本操作" class="headerlink" title="3. Docker 的基本操作"></a>3. <strong>Docker 的基本操作</strong></h2><h4 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a><strong>镜像相关</strong></h4><ol>
<li><p><strong>拉取镜像</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker pull &lt;镜像名>:&lt;标签><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>示例：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker pull python:3<span class="token punctuation">.</span>9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>查看本地镜像</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>删除镜像</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker rmi &lt;镜像ID><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h4 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a><strong>容器相关</strong></h4><ol>
<li><p><strong>运行容器</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 8000:8000 &lt;镜像名><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参数说明：</p>
<ul>
<li><p><code>-d</code>：后台运行容器。</p>
</li>
<li><p><code>-p</code>：将容器的端口映射到主机端口（如 <code>8000:8000</code>）。</p>
</li>
<li><p>示例：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p 8080:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
</li>
<li><p><strong>查看运行中的容器</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>查看所有容器（包括已停止的）</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker <span class="token function">ps</span> <span class="token operator">-</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>停止容器</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker stop &lt;容器ID><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>删除容器</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker <span class="token function">rm</span> &lt;容器ID><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a><strong>其他命令</strong></h4><ol>
<li><p><strong>进入容器</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker exec <span class="token operator">-</span>it &lt;容器ID> <span class="token operator">/</span>bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>示例：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker exec <span class="token operator">-</span>it my-container <span class="token operator">/</span>bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>查看容器日志</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker logs &lt;容器ID><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>清理未使用的镜像和容器</strong>：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">docker system prune <span class="token operator">-</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h1 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h1><h2 id="1-Dockerfile-的作用"><a href="#1-Dockerfile-的作用" class="headerlink" title="1. Dockerfile 的作用"></a>1. <strong>Dockerfile 的作用</strong></h2><h3 id="Dockerfile-是什么？"><a href="#Dockerfile-是什么？" class="headerlink" title="Dockerfile 是什么？"></a><strong>Dockerfile 是什么？</strong></h3><p>Dockerfile 是一份文本文件，用于定义如何构建一个 Docker 镜像。它包含了镜像的基础镜像、依赖安装、文件复制、运行命令等信息。</p>
<hr>
<h3 id="Dockerfile-的基本结构"><a href="#Dockerfile-的基本结构" class="headerlink" title="Dockerfile 的基本结构"></a><strong>Dockerfile 的基本结构</strong></h3><p>以下是一个标准的 Dockerfile 示例：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 使用官方基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> python:3.11-slim</span>

<span class="token comment"># 设置工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># 复制项目依赖文件</span>
<span class="token instruction"><span class="token keyword">COPY</span> requirements.txt .</span>

<span class="token comment"># 安装依赖</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install --no-cache-dir -r requirements.txt</span>

<span class="token comment"># 复制应用代码</span>
<span class="token instruction"><span class="token keyword">COPY</span> app/ ./app</span>

<span class="token comment"># 暴露应用端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8000</span>

<span class="token comment"># 运行应用程序</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"uvicorn"</span>, <span class="token string">"app.main:app"</span>, <span class="token string">"--host"</span>, <span class="token string">"0.0.0.0"</span>, <span class="token string">"--port"</span>, <span class="token string">"8000"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Dockerfile-中的关键指令"><a href="#Dockerfile-中的关键指令" class="headerlink" title="Dockerfile 中的关键指令"></a><strong>Dockerfile 中的关键指令</strong></h3><ul>
<li><code>FROM</code>：指定基础镜像（如 <code>python:3.11-slim</code>）。</li>
<li><code>WORKDIR</code>：设置容器内的工作目录。</li>
<li><code>COPY</code>：将本地文件复制到镜像中。</li>
<li><code>RUN</code>：在镜像构建时运行命令（如安装依赖）。</li>
<li><code>EXPOSE</code>：声明容器会使用的端口。</li>
<li><code>CMD</code>：指定容器启动时运行的命令。</li>
</ul>
<h2 id="2-Docker-Compose-的作用"><a href="#2-Docker-Compose-的作用" class="headerlink" title="2. Docker Compose 的作用"></a>2. <strong>Docker Compose 的作用</strong></h2><h3 id="Docker-Compose-是什么？"><a href="#Docker-Compose-是什么？" class="headerlink" title="Docker Compose 是什么？"></a><strong>Docker Compose 是什么？</strong></h3><p>Docker Compose 是一个工具，用于定义和管理多容器应用程序。通过 <code>docker-compose.yml</code> 文件，可以用简单的命令启动一组相关的容器。</p>
<hr>
<h3 id="Docker-Compose-文件示例"><a href="#Docker-Compose-文件示例" class="headerlink" title="Docker Compose 文件示例"></a><strong>Docker Compose 文件示例</strong></h3><p>以下是一个示例 <code>docker-compose.yml</code> 文件，用于部署一个包含单个服务的应用：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">simon_says</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> simon_says_app
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"8000:8000"</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> PYTHONUNBUFFERED=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="关键部分解释："><a href="#关键部分解释：" class="headerlink" title="关键部分解释："></a><strong>关键部分解释：</strong></h4><ul>
<li><code>services</code>: 定义一组容器服务。</li>
<li><code>build</code>: 指定构建上下文（当前目录 <code>.</code>）。</li>
<li><code>container_name</code>: 指定容器的名称。</li>
<li><code>ports</code>: 定义主机和容器端口的映射（如 <code>8000:8000</code>）。</li>
<li><code>environment</code>: 配置环境变量。</li>
</ul>
<h2 id="3-Docker-发布与部署流程"><a href="#3-Docker-发布与部署流程" class="headerlink" title="3. Docker 发布与部署流程"></a><strong>3. Docker 发布与部署流程</strong></h2><h3 id="3-1-本地构建与测试"><a href="#3-1-本地构建与测试" class="headerlink" title="3.1 本地构建与测试"></a><strong>3.1 本地构建与测试</strong></h3><ol>
<li><p><strong>编写 Dockerfile</strong>：确保 <code>Dockerfile</code> 文件正确，定义好应用的构建和运行步骤。</p>
</li>
<li><p><strong>构建镜像</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> simon_says:latest <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>运行容器</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 simon_says:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>测试应用</strong>：通过浏览器或命令行访问 <a href="http://localhost:8000。">http://localhost:8000。</a></p>
</li>
</ol>
<hr>
<h3 id="3-2-使用-Docker-Compose"><a href="#3-2-使用-Docker-Compose" class="headerlink" title="3.2 使用 Docker Compose"></a><strong>3.2 使用 Docker Compose</strong></h3><ol>
<li><p>**编写 <code>docker-compose.yml</code>**：确保服务和端口配置正确。</p>
</li>
<li><p><strong>启动服务</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>测试应用</strong>：同样访问 <a href="http://localhost:8000。">http://localhost:8000。</a></p>
</li>
</ol>
<hr>
<h3 id="3-3-发布镜像到-Docker-Hub"><a href="#3-3-发布镜像到-Docker-Hub" class="headerlink" title="3.3 发布镜像到 Docker Hub"></a><strong>3.3 发布镜像到 Docker Hub</strong></h3><ol>
<li><p><strong>登录 Docker Hub</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>给镜像打标签</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> tag simon_says:latest yourusername/simon_says:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>推送到 Docker Hub</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> push yourusername/simon_says:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<hr>
<h3 id="3-4-远程部署"><a href="#3-4-远程部署" class="headerlink" title="3.4 远程部署"></a><strong>3.4 远程部署</strong></h3><ol>
<li><p><strong>在远程服务器上拉取镜像</strong></p>
<pre class="line-numbers language-none"><code class="language-none">docker pull yourusername&#x2F;simon_says:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>运行镜像</strong></p>
<ol>
<li>直接运行</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">docker run -d -p 8000:8000 yourusername&#x2F;simon_says:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li><p>使用 Docker Compose：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">simon_says</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> yourusername/simon_says<span class="token punctuation">:</span>latest
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>

   <span class="token punctuation">-</span> <span class="token string">"8000:8000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>CI/CD</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>持续集成</tag>
        <tag>持续交付</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>常用指令</title>
    <url>/2025/01/12/14_2025-01-12-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>一开始学习计算机时我是拒绝使用linux和Git的，但习惯之后直呼真香。</p>
<p>以此来记录常用的命令，不然每次都要查或者问GPT老师。</p>
<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span>               <span class="token comment"># 显示系统信息</span>
<span class="token function">hostname</span>               <span class="token comment"># 显示或设置主机名</span>
<span class="token function">whoami</span>                 <span class="token comment"># 当前登录用户</span>
<span class="token function">uptime</span>                 <span class="token comment"># 系统运行时间和负载</span>
<span class="token function">date</span>                   <span class="token comment"># 当前日期和时间</span>
<span class="token function">cal</span>                    <span class="token comment"># 显示日历</span>
<span class="token function">df</span> <span class="token parameter variable">-h</span>                  <span class="token comment"># 查看磁盘使用情况</span>
<span class="token function">du</span> <span class="token parameter variable">-h</span>                  <span class="token comment"># 查看目录或文件大小</span>
<span class="token function">free</span> <span class="token parameter variable">-m</span>                <span class="token comment"># 查看内存使用情况</span>
<span class="token function">top</span>                    <span class="token comment"># 动态显示进程信息</span>
<span class="token function">htop</span>                   <span class="token comment"># 类似 top，需安装</span>
<span class="token function">ps</span> <span class="token parameter variable">-aux</span>                <span class="token comment"># 列出所有运行进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span>                     <span class="token comment"># 列出目录内容</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span>                  <span class="token comment"># 显示详细信息</span>
<span class="token function">ls</span> <span class="token parameter variable">-a</span>                  <span class="token comment"># 显示隐藏文件</span>
<span class="token builtin class-name">cd</span> /path/to/dir        <span class="token comment"># 切换目录</span>
<span class="token builtin class-name">pwd</span>                    <span class="token comment"># 显示当前路径</span>
<span class="token function">mkdir</span> new_dir          <span class="token comment"># 创建目录</span>
<span class="token function">rmdir</span> empty_dir        <span class="token comment"># 删除空目录</span>
<span class="token function">rm</span> <span class="token function">file</span>                <span class="token comment"># 删除文件</span>
<span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token function">dir</span>              <span class="token comment"># 删除目录及内容</span>
<span class="token function">cp</span> <span class="token builtin class-name">source</span> dest         <span class="token comment"># 复制文件或目录</span>
<span class="token function">mv</span> <span class="token builtin class-name">source</span> dest         <span class="token comment"># 移动或重命名文件</span>
<span class="token function">find</span> /path <span class="token parameter variable">-name</span> <span class="token string">"*.txt"</span> <span class="token comment"># 查找文件</span>
<span class="token function">locate</span> filename        <span class="token comment"># 快速查找文件</span>
tree                   <span class="token comment"># 树状结构显示目录，需安装</span>
<span class="token function">touch</span> file.txt         <span class="token comment"># 创建空文件</span>
<span class="token function">stat</span> file.txt          <span class="token comment"># 查看文件详细信息</span>
<span class="token function">file</span> file.txt          <span class="token comment"># 检测文件类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt           <span class="token comment"># 显示文件内容</span>
<span class="token function">tac</span> file.txt           <span class="token comment"># 倒序显示文件内容</span>
<span class="token function">less</span> file.txt          <span class="token comment"># 分页查看文件内容</span>
<span class="token function">more</span> file.txt          <span class="token comment"># 类似 less</span>
<span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> file.txt    <span class="token comment"># 查看文件前10行</span>
<span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> file.txt    <span class="token comment"># 查看文件后10行</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> log.txt        <span class="token comment"># 实时跟踪日志</span>
<span class="token function">nl</span> file.txt            <span class="token comment"># 显示文件内容并添加行号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> file.txt     <span class="token comment"># 修改权限</span>
<span class="token function">chown</span> user file.txt    <span class="token comment"># 修改文件所有者</span>
<span class="token function">chgrp</span> group file.txt   <span class="token comment"># 修改文件所属组</span>
<span class="token builtin class-name">umask</span> 022              <span class="token comment"># 设置文件默认权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>数字权限表示法</strong></p>
<p>数字权限用三个数字（0–7）来表示，分别对应：</p>
<ol>
<li><strong>第一个数字</strong>：文件所有者（User）的权限。</li>
<li><strong>第二个数字</strong>：同组用户（Group）的权限。</li>
<li><strong>第三个数字</strong>：其他用户（Others）的权限。</li>
</ol>
<p>每个数字表示权限的组合，权限值如下：</p>
<ul>
<li><strong>4</strong>：读权限 (Read, <code>r</code>)</li>
<li><strong>2</strong>：写权限 (Write, <code>w</code>)</li>
<li><strong>1</strong>：执行权限 (Execute, <code>x</code>)</li>
<li><strong>0</strong>：无权限 (No permission)</li>
</ul>
<p>数字可以累加，例如：</p>
<ul>
<li><code>7 = 4 + 2 + 1</code> 表示读、写、执行权限。</li>
<li><code>5 = 4 + 1</code> 表示读和执行权限。</li>
<li><code>6 = 4 + 2</code> 表示读和写权限。</li>
</ul>
<p><strong>755 的含义</strong></p>
<table>
<thead>
<tr>
<th>数字</th>
<th>权限范围</th>
<th>权限组合</th>
<th>符号表示法</th>
</tr>
</thead>
<tbody><tr>
<td><strong>7</strong></td>
<td>文件所有者</td>
<td>读、写、执行</td>
<td><code>rwx</code></td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>同组用户</td>
<td>读、执行</td>
<td><code>r-x</code></td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>其他用户</td>
<td>读、执行</td>
<td><code>r-x</code></td>
</tr>
</tbody></table>
<p>所以：</p>
<ul>
<li><strong>文件所有者</strong> 有 <strong>读 (r)<strong>、</strong>写 (w)</strong> 和 <strong>执行 (x)</strong> 权限。</li>
<li><strong>同组用户</strong> 和 <strong>其他用户</strong> 只有 <strong>读 (r)</strong> 和 <strong>执行 (x)</strong> 权限，但 <strong>不能修改文件</strong>。</li>
</ul>
<h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> google.com            <span class="token comment"># 测试网络连通性</span>
<span class="token function">curl</span> https://example.com   <span class="token comment"># 发送 HTTP 请求</span>
<span class="token function">wget</span> https://example.com   <span class="token comment"># 下载文件</span>
<span class="token function">ifconfig</span>                   <span class="token comment"># 查看网络配置</span>
<span class="token function">ip</span> a                       <span class="token comment"># 显示网络接口信息</span>
<span class="token function">netstat</span> <span class="token parameter variable">-tuln</span>              <span class="token comment"># 查看网络连接状态</span>
ss <span class="token parameter variable">-tuln</span>                   <span class="token comment"># 替代 netstat</span>
<span class="token function">traceroute</span> google.com      <span class="token comment"># 跟踪网络路径</span>
<span class="token function">scp</span> <span class="token function">file</span> user@remote:/path <span class="token comment"># 通过 SSH 复制文件</span>
<span class="token function">rsync</span> <span class="token parameter variable">-av</span> <span class="token builtin class-name">source</span> dest      <span class="token comment"># 同步文件或目录</span>
<span class="token function">ssh</span> user@remote            <span class="token comment"># 远程登录服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span>                     <span class="token comment"># 查看在线用户</span>
w                       <span class="token comment"># 当前登录用户及活动</span>
<span class="token function">useradd</span> new_user        <span class="token comment"># 添加用户</span>
<span class="token function">passwd</span> new_user         <span class="token comment"># 修改用户密码</span>
<span class="token function">usermod</span> <span class="token parameter variable">-aG</span> group user  <span class="token comment"># 添加用户到组</span>
<span class="token function">su</span> - username           <span class="token comment"># 切换用户</span>
<span class="token function">sudo</span> <span class="token builtin class-name">command</span>            <span class="token comment"># 以管理员权限执行命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> <span class="token parameter variable">-l</span>                <span class="token comment"># 显示分区信息</span>
mkfs.ext4 /dev/sdX1     <span class="token comment"># 格式化分区</span>
<span class="token function">mount</span> /dev/sdX1 /mnt    <span class="token comment"># 挂载设备</span>
<span class="token function">umount</span> /mnt             <span class="token comment"># 卸载设备</span>
blkid                   <span class="token comment"># 查看设备 UUID</span>
lsblk                   <span class="token comment"># 查看块设备信息</span>
<span class="token function">df</span> <span class="token parameter variable">-h</span>                   <span class="token comment"># 查看磁盘使用情况</span>
<span class="token function">du</span> <span class="token parameter variable">-sh</span> <span class="token function">dir</span>              <span class="token comment"># 统计目录大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> pkg       <span class="token comment"># 安装软件</span>
<span class="token function">apt-get</span> update            <span class="token comment"># 更新软件源</span>
<span class="token function">apt-get</span> upgrade           <span class="token comment"># 升级系统</span>
dpkg <span class="token parameter variable">-i</span> package.deb       <span class="token comment"># 安装 .deb 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span>                        <span class="token comment"># 查看进程</span>
<span class="token function">ps</span> aux                   <span class="token comment"># 查看所有进程</span>
<span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> python	  <span class="token comment"># 查看特定进程</span>
<span class="token function">kill</span> PID                  <span class="token comment"># 杀死指定进程</span>
<span class="token function">killall</span> process_name       <span class="token comment"># 按名称杀死进程</span>
<span class="token function">jobs</span>                      <span class="token comment"># 查看后台任务</span>
<span class="token function">fg</span>                        <span class="token comment"># 将任务切换到前台</span>
<span class="token function">bg</span>                        <span class="token comment"># 将任务切换到后台运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Shell-编程相关"><a href="#Shell-编程相关" class="headerlink" title="Shell 编程相关"></a>Shell 编程相关</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span>       <span class="token comment"># 输出信息</span>
<span class="token builtin class-name">read</span> var                   <span class="token comment"># 读取用户输入</span>
<span class="token function">env</span>                        <span class="token comment"># 显示环境变量</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">VAR</span><span class="token operator">=</span>value           <span class="token comment"># 设置环境变量</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -l'</span>           <span class="token comment"># 创建命令别名</span>
<span class="token function">history</span>                   <span class="token comment"># 显示历史命令</span>
<span class="token function">clear</span>                     <span class="token comment"># 清空屏幕</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">man</span> <span class="token builtin class-name">command</span>               <span class="token comment"># 查看命令帮助文档</span>
<span class="token builtin class-name">help</span> <span class="token builtin class-name">command</span>              <span class="token comment"># 查看 shell 内置命令帮助</span>
<span class="token function">which</span> <span class="token builtin class-name">command</span>             <span class="token comment"># 显示命令路径</span>
<span class="token function">time</span> <span class="token builtin class-name">command</span>              <span class="token comment"># 统计命令执行时间</span>
<span class="token function">basename</span> /path/file.txt   <span class="token comment"># 获取文件名</span>
<span class="token function">dirname</span> /path/file.txt    <span class="token comment"># 获取路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Git常用指令"><a href="#Git常用指令" class="headerlink" title="Git常用指令"></a>Git常用指令</h1><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span>               <span class="token comment"># 设置全局用户名</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"your.email@example.com"</span> <span class="token comment"># 设置全局邮箱</span>
<span class="token function">git</span> config <span class="token parameter variable">--list</span>                                       <span class="token comment"># 查看当前配置</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.editor <span class="token function">vim</span>                    <span class="token comment"># 设置默认编辑器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Git-仓库操作"><a href="#Git-仓库操作" class="headerlink" title="Git 仓库操作"></a>Git 仓库操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init                          <span class="token comment"># 初始化一个新的 Git 仓库</span>
<span class="token function">git</span> clone <span class="token operator">&lt;</span>repo_url<span class="token operator">></span>              <span class="token comment"># 克隆远程仓库到本地</span>
<span class="token function">git</span> status                        <span class="token comment"># 查看当前分支的状态</span>
<span class="token function">git</span> log                           <span class="token comment"># 查看提交历史</span>
<span class="token function">git</span> log <span class="token parameter variable">--oneline</span>                 <span class="token comment"># 简化查看提交历史</span>
<span class="token function">git</span> show <span class="token operator">&lt;</span>commit_hash<span class="token operator">></span>            <span class="token comment"># 查看某次提交的详细信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch                        <span class="token comment"># 查看本地分支</span>
<span class="token function">git</span> branch <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>          <span class="token comment"># 创建新分支</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>        <span class="token comment"># 切换到指定分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>     <span class="token comment"># 创建并切换到新分支</span>
<span class="token function">git</span> merge <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>           <span class="token comment"># 合并分支到当前分支, 保留分支的历史记录，生成一个新的合并提交。</span>
<span class="token function">git</span> rebase <span class="token operator">&lt;</span>base_branch<span class="token operator">></span>		  <span class="token comment"># 会将一个分支的提交重新应用到另一个分支的基础上，历史被“重写”，没有合并提交。</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>       <span class="token comment"># 删除本地分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>       <span class="token comment"># 强制删除本地分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>                    <span class="token comment"># 添加指定文件到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>                         <span class="token comment"># 添加当前目录下的所有文件到暂存区</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"commit message"</span>    <span class="token comment"># 提交更改并添加描述</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span>                <span class="token comment"># 修改上一次的提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token parameter variable">-v</span>                     <span class="token comment"># 查看远程仓库地址</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token operator">&lt;</span>repo_url<span class="token operator">></span>  <span class="token comment"># 添加远程仓库</span>
<span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>     <span class="token comment"># 推送分支到远程仓库</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>  <span class="token comment"># 推送分支并关联远程分支</span>
<span class="token function">git</span> pull origin <span class="token operator">&lt;</span>branch_name<span class="token operator">></span>     <span class="token comment"># 从远程仓库拉取并合并到本地</span>
<span class="token function">git</span> fetch origin                  <span class="token comment"># 拉取远程仓库更新但不合并</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="查看和管理更改"><a href="#查看和管理更改" class="headerlink" title="查看和管理更改"></a>查看和管理更改</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span>                          <span class="token comment"># 查看工作区的更改</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span>                 <span class="token comment"># 查看已暂存的更改</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>commit<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token operator">&lt;</span>commit<span class="token operator"><span class="token file-descriptor important">2</span>></span>      <span class="token comment"># 比较两个提交的差异</span>
<span class="token function">git</span> blame <span class="token operator">&lt;</span>file<span class="token operator">></span>                  <span class="token comment"># 查看每行代码的修改记录</span>
<span class="token function">git</span> show <span class="token operator">&lt;</span>commit_hash<span class="token operator">></span>            <span class="token comment"># 查看某次提交的具体更改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="撤销更改"><a href="#撤销更改" class="headerlink" title="撤销更改"></a>撤销更改</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> restore <span class="token operator">&lt;</span>file<span class="token operator">></span>                <span class="token comment"># 撤销工作区中的更改</span>
<span class="token function">git</span> restore <span class="token parameter variable">--staged</span> <span class="token operator">&lt;</span>file<span class="token operator">></span>       <span class="token comment"># 撤销暂存区的更改</span>
<span class="token function">git</span> reset <span class="token operator">&lt;</span>commit_hash<span class="token operator">></span>           <span class="token comment"># 回退到指定提交，但保留更改</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit_hash<span class="token operator">></span>    <span class="token comment"># 强制回退到指定提交，丢弃更改</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>file<span class="token operator">></span>               <span class="token comment"># 恢复文件到最后一次提交的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag                           <span class="token comment"># 查看所有标签</span>
<span class="token function">git</span> tag <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>                <span class="token comment"># 创建轻量标签</span>
<span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> <span class="token parameter variable">-m</span> <span class="token string">"message"</span> <span class="token comment"># 创建带注释标签</span>
<span class="token function">git</span> show <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>               <span class="token comment"># 查看标签信息</span>
<span class="token function">git</span> push origin <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>        <span class="token comment"># 推送标签到远程</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>            <span class="token comment"># 推送所有标签到远程</span>
<span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>             <span class="token comment"># 删除本地标签</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> <span class="token comment"># 删除远程标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Stash（保存工作进度）"><a href="#Stash（保存工作进度）" class="headerlink" title="Stash（保存工作进度）"></a>Stash（保存工作进度）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash                         <span class="token comment"># 保存当前工作进度</span>
<span class="token function">git</span> stash list                    <span class="token comment"># 查看保存的工作进度</span>
<span class="token function">git</span> stash apply                   <span class="token comment"># 恢复最近的存储</span>
<span class="token function">git</span> stash apply stash@<span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>     <span class="token comment"># 恢复指定的存储</span>
<span class="token function">git</span> stash drop stash@<span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>      <span class="token comment"># 删除指定存储</span>
<span class="token function">git</span> stash <span class="token function">clear</span>                   <span class="token comment"># 清除所有存储</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="子模块管理"><a href="#子模块管理" class="headerlink" title="子模块管理"></a>子模块管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule <span class="token function">add</span> <span class="token operator">&lt;</span>repo_url<span class="token operator">></span> <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token comment"># 添加子模块</span>
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span> <span class="token comment"># 初始化并更新子模块</span>
<span class="token function">git</span> submodule foreach <span class="token function">git</span> pull origin main <span class="token comment"># 更新所有子模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="日志和历史"><a href="#日志和历史" class="headerlink" title="日志和历史"></a>日志和历史</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log                           <span class="token comment"># 查看提交历史</span>
<span class="token function">git</span> log <span class="token parameter variable">--oneline</span>                 <span class="token comment"># 简洁版提交历史</span>
<span class="token function">git</span> reflog                        <span class="token comment"># 查看所有的操作记录</span>
<span class="token function">git</span> bisect start                  <span class="token comment"># 开始二分查找 bug</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clean <span class="token parameter variable">-f</span>                      <span class="token comment"># 清理未追踪的文件</span>
<span class="token function">git</span> gc                            <span class="token comment"># 垃圾回收，优化仓库</span>
<span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commit_hash<span class="token operator">></span>     <span class="token comment"># 应用指定提交的更改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
        <tag>自用</tag>
      </tags>
  </entry>
  <entry>
    <title>VNPY平台入门</title>
    <url>/2025/01/13/16_2025-01-13-VNPY%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>纳指期货涨的太狠了，老板交给我一个任务，看看能不能实现程序化交易。我想这操蛋啊，当年玩比特币俩月亏了一半，最后勉强回本就不玩了。结果刚不玩就一波大涨突破十万了。。。只能说哥们没这个命。但老板的任务得琢磨琢磨啊，经过一番学习，量化水真深。一开始还想着自己写个平台，发现毛都不懂，好不容易整出来的东西还死慢，不如直接用大佬的东西，发现了<a href="https://github.com/vnpy/vnpy">VNPY</a>，开源万岁。</p>
<h1 id="VNPY简单入门"><a href="#VNPY简单入门" class="headerlink" title="VNPY简单入门"></a>VNPY简单入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Windows直接去<a href="https://www.vnpy.com/">官网</a>安装社区版就好了，甚至省去了git clone的功夫，现在直接可以安装可视化界面了，傻瓜式部署。</p>
<h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><p>根据文档，通常可以直接下载数据，但是一些海外市场的数据可能没有，或者有自己导入数据的需求，可以直接准备数据导入即可。</p>
<p>这里勾选应用模块下的DataManager，点击启动。</p>
<blockquote>
<p>事实上，可以一次全部启动所需要的模块，这里为了演示，每次只启动一个。</p>
</blockquote>
<p><img src="/../images/16/1_datamanager.png" alt="勾选DataManager"></p>
<p>在弹出窗后的工具栏选择 <strong>功能 -&gt; 数据管理</strong>，弹出以下窗口，随后<strong>导入数据</strong>，一步步根据实际情况导入数据即可。这里假设我需要导入的是微型纳指100指数期货的历史小时数据。</p>
<p><img src="/../images/16/2_datainput.png" alt="导入数据"></p>
<p>导入完成后，左侧刷新会看到导入好的数据，本地代码为MNQ.CME，之后回测会用到。</p>
<p><img src="/../images/16/3_datainput.png" alt="效果如下，可以看到代码（Ticker）"></p>
<h2 id="回测"><a href="#回测" class="headerlink" title="回测"></a>回测</h2><p>回到之前的界面，这次勾选CtaBacktester（CTA回测研究模块），启动。同样，在弹出的窗口功能栏点击<strong>CTA回测</strong>启动新窗口。</p>
<p><img src="/../images/16/4_backtest.png"></p>
<p>在新窗口，输入必要的信息，如刚才记录的本地代码，回测策略，交易费用等信息。这里的DemoStrategy是最简单的双均线策略，不存在与预设的策略中，怎么加自定义策略后面会讲。</p>
<p><img src="/../images/16/5_backtest.png"></p>
<p>这里就多尝试功能吧，不赘述了，运行过后所有结果都会出现在右侧。</p>
<p><img src="/../images/16/6_backtest.png"></p>
<h2 id="自定义策略"><a href="#自定义策略" class="headerlink" title="自定义策略"></a>自定义策略</h2><p>注意到在启动时，最右下角有个运行目录了吗？这就是项目信息保存的目录，我们的自定义策略也需要放在这个下面。</p>
<p><img src="/../images/16/7_strategy.png" alt="运行目录"></p>
<p>导航到这个文件夹下，新建文件夹“strategies”，这个文件夹里头存放的就是自己写的策略，每次程序启动就会扫描这个文件夹，然后把策略显示在回测平台。</p>
<p><img src="/../images/16/8_strategy.png"></p>
<p>示例代码如下，我忘了从哪抄的了，想起来补上出处，只是一个最简单的双均线策略，但是可以通过代码学习以下如何开发适合这个平台的策略。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> vnpy_ctastrategy <span class="token keyword">import</span> <span class="token punctuation">(</span>
    CtaTemplate<span class="token punctuation">,</span>
    StopOrder<span class="token punctuation">,</span>
    TickData<span class="token punctuation">,</span>
    BarData<span class="token punctuation">,</span>
    TradeData<span class="token punctuation">,</span>
    OrderData<span class="token punctuation">,</span>
    BarGenerator<span class="token punctuation">,</span>
    ArrayManager<span class="token punctuation">,</span>
<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">DemoStrategy</span><span class="token punctuation">(</span>CtaTemplate<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""演示用的简单双均线"""</span>

    <span class="token comment"># 策略作者</span>
    author <span class="token operator">=</span> <span class="token string">"Smart Trader"</span>

    <span class="token comment"># 定义参数</span>
    fast_window <span class="token operator">=</span> <span class="token number">10</span>
    slow_window <span class="token operator">=</span> <span class="token number">20</span>

    <span class="token comment"># 定义变量</span>
    fast_ma0 <span class="token operator">=</span> <span class="token number">0.0</span>
    fast_ma1 <span class="token operator">=</span> <span class="token number">0.0</span>
    slow_ma0 <span class="token operator">=</span> <span class="token number">0.0</span>
    slow_ma1 <span class="token operator">=</span> <span class="token number">0.0</span>

    <span class="token comment"># 添加参数和变量名到对应的列表</span>
    parameters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"fast_window"</span><span class="token punctuation">,</span> <span class="token string">"slow_window"</span><span class="token punctuation">]</span>
    variables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"fast_ma0"</span><span class="token punctuation">,</span> <span class="token string">"fast_ma1"</span><span class="token punctuation">,</span> <span class="token string">"slow_ma0"</span><span class="token punctuation">,</span> <span class="token string">"slow_ma1"</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cta_engine<span class="token punctuation">,</span> strategy_name<span class="token punctuation">,</span> vt_symbol<span class="token punctuation">,</span> setting<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        构造函数
        """</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>cta_engine<span class="token punctuation">,</span> strategy_name<span class="token punctuation">,</span> vt_symbol<span class="token punctuation">,</span> setting<span class="token punctuation">)</span>

        <span class="token comment"># K线合成器：从Tick合成分钟K线用</span>
        self<span class="token punctuation">.</span>bg <span class="token operator">=</span> BarGenerator<span class="token punctuation">(</span>self<span class="token punctuation">.</span>on_bar<span class="token punctuation">)</span>

        <span class="token comment"># 时间序列容器：计算技术指标用</span>
        self<span class="token punctuation">.</span>am <span class="token operator">=</span> ArrayManager<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_init</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        当策略被初始化时调用该函数。
        """</span>
        self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span><span class="token string">"策略初始化"</span><span class="token punctuation">)</span>

        <span class="token comment"># 加载10天的历史数据用于初始化回放</span>
        self<span class="token punctuation">.</span>load_bar<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        当策略被启动时调用该函数。
        """</span>
        self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span><span class="token string">"策略启动"</span><span class="token punctuation">)</span>

        <span class="token comment"># 通知图形界面更新（策略最新状态）</span>
        self<span class="token punctuation">.</span>put_event<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        当策略被停止时调用该函数。
        """</span>
        self<span class="token punctuation">.</span>write_log<span class="token punctuation">(</span><span class="token string">"策略停止"</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>put_event<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_tick</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tick<span class="token punctuation">:</span> TickData<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过该函数收到Tick推送。
        """</span>
        self<span class="token punctuation">.</span>bg<span class="token punctuation">.</span>update_tick<span class="token punctuation">(</span>tick<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_bar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bar<span class="token punctuation">:</span> BarData<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过该函数收到新的1分钟K线推送。
        """</span>
        am <span class="token operator">=</span> self<span class="token punctuation">.</span>am

        <span class="token comment"># 更新K线到时间序列容器中</span>
        am<span class="token punctuation">.</span>update_bar<span class="token punctuation">(</span>bar<span class="token punctuation">)</span>

        <span class="token comment"># 若缓存的K线数量尚不够计算技术指标，则直接返回</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> am<span class="token punctuation">.</span>inited<span class="token punctuation">:</span>
            <span class="token keyword">return</span>

        <span class="token comment"># 计算快速均线</span>
        fast_ma <span class="token operator">=</span> am<span class="token punctuation">.</span>sma<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fast_window<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fast_ma0 <span class="token operator">=</span> fast_ma<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment"># T时刻数值</span>
        self<span class="token punctuation">.</span>fast_ma1 <span class="token operator">=</span> fast_ma<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>     <span class="token comment"># T-1时刻数值</span>

        <span class="token comment"># 计算慢速均线</span>
        slow_ma <span class="token operator">=</span> am<span class="token punctuation">.</span>sma<span class="token punctuation">(</span>self<span class="token punctuation">.</span>slow_window<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>slow_ma0 <span class="token operator">=</span> slow_ma<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>slow_ma1 <span class="token operator">=</span> slow_ma<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>

        <span class="token comment"># 判断是否金叉</span>
        cross_over <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>fast_ma0 <span class="token operator">></span> self<span class="token punctuation">.</span>slow_ma0 <span class="token keyword">and</span>
                      self<span class="token punctuation">.</span>fast_ma1 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>slow_ma1<span class="token punctuation">)</span>

        <span class="token comment"># 判断是否死叉</span>
        cross_below <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>fast_ma0 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>slow_ma0 <span class="token keyword">and</span>
                       self<span class="token punctuation">.</span>fast_ma1 <span class="token operator">></span> self<span class="token punctuation">.</span>slow_ma1<span class="token punctuation">)</span>

        <span class="token comment"># 如果发生了金叉</span>
        <span class="token keyword">if</span> cross_over<span class="token punctuation">:</span>
            price <span class="token operator">=</span> bar<span class="token punctuation">.</span>close_price <span class="token operator">+</span> <span class="token number">5</span>

            <span class="token keyword">if</span> self<span class="token punctuation">.</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 当前无仓位，则直接开多</span>
                self<span class="token punctuation">.</span>buy<span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> self<span class="token punctuation">.</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 当前持有空头仓位，则先平空，再开多</span>
                self<span class="token punctuation">.</span>cover<span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>buy<span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token comment"># 如果发生了死叉</span>
        <span class="token keyword">elif</span> cross_below<span class="token punctuation">:</span>
            price <span class="token operator">=</span> bar<span class="token punctuation">.</span>close_price <span class="token operator">-</span> <span class="token number">5</span>

            <span class="token keyword">if</span> self<span class="token punctuation">.</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 当前无仓位，则直接开空</span>
                self<span class="token punctuation">.</span>short<span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> self<span class="token punctuation">.</span>pos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 当前持有多头仓位，则先平多，再开空</span>
                self<span class="token punctuation">.</span>sell<span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>short<span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>put_event<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">:</span> OrderData<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过该函数收到委托状态更新推送。
        """</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">on_trade</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> trade<span class="token punctuation">:</span> TradeData<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过该函数收到成交推送。
        """</span>
        self<span class="token punctuation">.</span>put_event<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_stop_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stop_order<span class="token punctuation">:</span> StopOrder<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        通过该函数收到本地停止单推送。
        """</span>
        <span class="token keyword">pass</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>保存后，再次启动程序回测时就能看到了。</p>
<p><img src="/../images/16/9_strategy.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章简单讲了一下VNPY这个开源量化平台的基本使用，下一篇应该讲讲如何对接IB盈透证券使用吧，主要讲讲如何先使用延迟数据测试，毕竟哪有那么对富人呢，对吧，都是臭打工的。</p>
]]></content>
      <categories>
        <category>金融投资</category>
      </categories>
      <tags>
        <tag>量化交易</tag>
        <tag>程序化交易</tag>
        <tag>盈透证券</tag>
        <tag>TWS API</tag>
        <tag>回测</tag>
        <tag>股票</tag>
        <tag>期货</tag>
      </tags>
  </entry>
  <entry>
    <title>VNPY平台对接IB盈透证券</title>
    <url>/2025/01/13/17_2025-01-13-VNPY%E4%B8%8EIB/</url>
    <content><![CDATA[<p>上篇讲了一下VNPY这个开源平台的基本使用，这篇讲讲怎么用VNPY对接IB以及一些遇到的问题。</p>
<h1 id="VNPY平台对接IB盈透证券"><a href="#VNPY平台对接IB盈透证券" class="headerlink" title="VNPY平台对接IB盈透证券"></a>VNPY平台对接IB盈透证券</h1><p>参考<a href="https://zhuanlan.zhihu.com/p/75787960">官方教程</a>。</p>
<h2 id="安装必要插件"><a href="#安装必要插件" class="headerlink" title="安装必要插件"></a>安装必要插件</h2><h3 id="IB-Trader-Workstation"><a href="#IB-Trader-Workstation" class="headerlink" title="IB Trader Workstation"></a>IB Trader Workstation</h3><p>因为要开启API功能，所以要先下载盈透证券的<a href="https://www.interactivebrokers.com/en/trading/tws.php">Trader Workstation</a>，安装，网上教程很多，查一查打开api功能即可。</p>
<p>这里简单说一下，<strong>只有PRO账户能开启API。</strong></p>
<p>打开station后，看到<strong>右上角齿轮</strong>，<strong>看到</strong>，勾选<strong>Enable ActiveX and Socket Clients</strong>，如图：</p>
<p><img src="/../images/17/1_api.png" alt="端口号是7497"></p>
<h3 id="ibapi"><a href="#ibapi" class="headerlink" title="ibapi"></a>ibapi</h3><p>在python里，不是简单的pip install ibapi就行了，仔细阅读并参考vnpy<a href="https://github.com/vnpy/vnpy_ib">提供的文档</a>。</p>
<h2 id="连接VNPY"><a href="#连接VNPY" class="headerlink" title="连接VNPY"></a>连接VNPY</h2><p>在VNPY启动界面，在<strong>交易接口</strong>处勾选<strong>盈透证券</strong>，启动。看到弹出界面工具栏的连接里，选择连接IB。填入之前的端口即可，其他不变，点击链接。</p>
<p><img src="/../images/17/2_connectIB.png"></p>
<p>连接过后就成功通过API连接到刚才登陆在trader workstation的账户了。如果付费订阅了市场，就可以直接开始使用了，但是没有订阅，使用的是延迟数据，就还需要做些改动。</p>
<h2 id="使用延迟数据"><a href="#使用延迟数据" class="headerlink" title="使用延迟数据"></a>使用延迟数据</h2><p>参考<a href="https://www.vnpy.com/forum/topic/1533-vnpylian-jie-ibjie-kou-jiao-yi-de-yi-xie-keng-huan-you-ru-he-ding-yue-yan-chi-xing-qing">这篇帖子</a>。</p>
<p>正如这篇帖子所说，如果直接查询Alibaba的CONID，VNPY显示一片空白，日志显示Requested market data is not subscribed等信息。这里就需要在后台开启延迟数据订阅。</p>
<p>大部分这篇教程都提到了，但可能因为项目更新，ib_gateway.py文件位置移到了VNPY安装目录下veighna_studio\Lib\site-packages\vnpy_ib文件夹，然后再根据教程更改即可。</p>
<p>这里直接给出改好的代码，可以直接下载替换，建议先对原文件备份。点击下载<a href="https://github.com/zcpisme/blogdownloadfile/blob/main/ib_gateway.py">ib_gateway.py</a>。</p>
<p>配置好后启动VNPY，连接IB，假设查询Alibaba股票，显示如下。</p>
<p><img src="/../images/17/3_delaydata.png" alt="成了"></p>
<p>注意这只是延迟数据，实时的还是需要订阅，并把ib_gateway.py文件改回去！</p>
]]></content>
      <categories>
        <category>金融投资</category>
      </categories>
      <tags>
        <tag>量化交易</tag>
        <tag>程序化交易</tag>
        <tag>盈透证券</tag>
        <tag>TWS API</tag>
        <tag>回测</tag>
        <tag>股票</tag>
        <tag>期货</tag>
      </tags>
  </entry>
  <entry>
    <title>保护性看跌期权</title>
    <url>/2025/01/20/18_2025-01-20-%E4%BF%9D%E6%8A%A4%E6%80%A7%E7%9C%8B%E8%B7%8C%E6%9C%9F%E6%9D%83/</url>
    <content><![CDATA[<p>最近一直再看金融投资相关的东西，刚好也学习了期权的一些知识，顺道了解了一下怎么用期权对冲股票市场带来的风险。</p>
<h2 id="什么是期权"><a href="#什么是期权" class="headerlink" title="什么是期权"></a>什么是期权</h2><p>定义直接抄了</p>
<p>期权（Option）是一种金融衍生品，它赋予持有人在约定的时间或时间范围内，以预定的价格（称为执行价格或行权价）买入或卖出标的资产的权利，但并不负有必须执行的义务。期权的主要特点包括：</p>
<ol>
<li><strong>期权类型</strong>：<ul>
<li><strong>看涨期权（Call Option）</strong>：持有人有权以约定价格买入标的资产。</li>
<li><strong>看跌期权（Put Option）</strong>：持有人有权以约定价格卖出标的资产。</li>
</ul>
</li>
<li><strong>期权的参与者</strong>：<ul>
<li><strong>买方</strong>：支付期权费（Premium），获取执行权利。</li>
<li><strong>卖方</strong>：收取期权费，承担履行买方权利的义务。</li>
</ul>
</li>
<li><strong>标的资产</strong>：期权的标的资产可以是股票、指数、商品、货币等。</li>
<li><strong>到期日</strong>：期权合约规定的有效期限。到期后，期权将失效。</li>
<li><strong>执行方式</strong>：<ul>
<li><strong>欧式期权</strong>：仅能在到期日行权。</li>
<li><strong>美式期权</strong>：可以在到期日及之前任何时间行权。</li>
</ul>
</li>
</ol>
<p><strong>用途</strong>：</p>
<ul>
<li><strong>风险管理</strong>：投资者利用期权对冲市场风险。</li>
<li><strong>投机获利</strong>：通过预测标的资产价格的波动方向获取收益。</li>
<li><strong>增强收益</strong>：通过出售期权赚取期权费。</li>
</ul>
<h2 id="保护性看跌期权（Protective-Put）"><a href="#保护性看跌期权（Protective-Put）" class="headerlink" title="保护性看跌期权（Protective Put）"></a>保护性看跌期权（Protective Put）</h2><p>投资者通过购买标的资产（如股票）和同时买入对应的看跌期权，来降低资产价格下跌可能带来的损失。保留上涨潜力的同时限制潜在的下行风险。</p>
<p>直接举个例子：<br>我现在持有100股台积电股票(TSM)，当前价格为 $211.5。我担心价格下跌，因此购买了一张执行价格为 $210每股的看跌期权，每张能保护100股，期权费为每股$2.76，也就是总期权费为$100 \times $ 2.76 &#x3D; $276$。以下是可能的情形：</p>
<ul>
<li><strong>价格上涨至 $230</strong>：<br>我持有的股票增值，赚取 $100 * ($230 - $ 211.5) &#x3D; $1850$，但需要支付 $276 的期权费，净收益为 $1574。</li>
<li><strong>价格下跌至 $190</strong>：<br>我可以以 $210 行使看跌期权，损失被限制为 $100 *($211.5 - $210)&#x3D; $150$，再加上 $276 的期权费，总亏损为 $426。</li>
<li><strong>价格维持在 $211.5</strong>：<br>我的股票未亏损，但需要支付 $276 的期权费，总收益为 -$276。</li>
</ul>
<p>可以注意到，尽管这个策略可能会减少我的最大收益，但如果我没有保护措施，我将直接损失 $100 *($211.5 - $190)&#x3D; $2150$，保护性期权将大大减少我的损失。</p>
<p>用Yahoo Finance获取信息以及期权链，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yfinance <span class="token keyword">as</span> yf

<span class="token comment"># 获取台积电股票数据</span>

tsmc <span class="token operator">=</span> yf<span class="token punctuation">.</span>Ticker<span class="token punctuation">(</span><span class="token string">"TSM"</span><span class="token punctuation">)</span>
stock_data <span class="token operator">=</span> tsmc<span class="token punctuation">.</span>history<span class="token punctuation">(</span>period<span class="token operator">=</span><span class="token string">"1d"</span><span class="token punctuation">)</span>
current_price <span class="token operator">=</span> stock_data<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 当前收盘价</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"台积电当前股价: $</span><span class="token interpolation"><span class="token punctuation">&#123;</span>current_price<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token comment">## output: 台积电当前股价: $211.50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取台积电期权链</span>
options_dates <span class="token operator">=</span> tsmc<span class="token punctuation">.</span>options
opt_chain <span class="token operator">=</span> tsmc<span class="token punctuation">.</span>option_chain<span class="token punctuation">(</span>options_dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 选择第一个到期日的期权链</span>
puts <span class="token operator">=</span> opt_chain<span class="token punctuation">.</span>puts

<span class="token comment"># 筛选合适的看跌期权</span>
puts_filtered <span class="token operator">=</span> puts<span class="token punctuation">[</span><span class="token punctuation">(</span>puts<span class="token punctuation">[</span><span class="token string">'strike'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> current_price<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>puts<span class="token punctuation">[</span><span class="token string">'strike'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> current_price <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
puts_filtered <span class="token operator">=</span> puts_filtered<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'strike'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>puts_filtered<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'contractSymbol'</span><span class="token punctuation">,</span> <span class="token string">'strike'</span><span class="token punctuation">,</span> <span class="token string">'lastPrice'</span><span class="token punctuation">,</span> <span class="token string">'bid'</span><span class="token punctuation">,</span> <span class="token string">'ask'</span><span class="token punctuation">,</span> <span class="token string">'volume'</span><span class="token punctuation">,</span> <span class="token string">'openInterest'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">## output: </span>
        contractSymbol  strike  lastPrice   bid   ask  volume  openInterest
<span class="token number">21</span>  TSM250124P00192500   <span class="token number">192.5</span>       <span class="token number">0.25</span>  <span class="token number">0.16</span>  <span class="token number">0.26</span>   <span class="token number">232.0</span>         <span class="token number">652.0</span>
<span class="token number">22</span>  TSM250124P00195000   <span class="token number">195.0</span>       <span class="token number">0.30</span>  <span class="token number">0.30</span>  <span class="token number">0.32</span>  <span class="token number">1186.0</span>        <span class="token number">4802.0</span>
<span class="token number">23</span>  TSM250124P00197500   <span class="token number">197.5</span>       <span class="token number">0.41</span>  <span class="token number">0.38</span>  <span class="token number">0.41</span>   <span class="token number">498.0</span>         <span class="token number">269.0</span>
<span class="token number">24</span>  TSM250124P00200000   <span class="token number">200.0</span>       <span class="token number">0.54</span>  <span class="token number">0.53</span>  <span class="token number">0.57</span>  <span class="token number">1891.0</span>        <span class="token number">5360.0</span>
<span class="token number">25</span>  TSM250124P00202500   <span class="token number">202.5</span>       <span class="token number">0.81</span>  <span class="token number">0.77</span>  <span class="token number">0.82</span>  <span class="token number">1379.0</span>         <span class="token number">613.0</span>
<span class="token number">26</span>  TSM250124P00205000   <span class="token number">205.0</span>       <span class="token number">1.20</span>  <span class="token number">1.17</span>  <span class="token number">1.23</span>  <span class="token number">2805.0</span>        <span class="token number">1787.0</span>
<span class="token number">27</span>  TSM250124P00207500   <span class="token number">207.5</span>       <span class="token number">1.86</span>  <span class="token number">1.78</span>  <span class="token number">1.86</span>  <span class="token number">2030.0</span>         <span class="token number">565.0</span>
<span class="token number">28</span>  TSM250124P00210000   <span class="token number">210.0</span>       <span class="token number">2.71</span>  <span class="token number">2.66</span>  <span class="token number">2.76</span>  <span class="token number">5930.0</span>        <span class="token number">1793.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> rcParams
rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  <span class="token comment"># 黑体</span>
rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 用于正常显示负号</span>


current_price <span class="token operator">=</span> current_price  <span class="token comment"># 当前股价</span>
strike_price <span class="token operator">=</span> puts_filtered<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'strike'</span><span class="token punctuation">]</span>  <span class="token comment"># 行权价</span>
option_premium <span class="token operator">=</span> puts_filtered<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ask'</span><span class="token punctuation">]</span>  <span class="token comment"># 每股期权费</span>
stock_prices <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 模拟股价范围</span>
shares <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># 股票数量</span>

<span class="token comment"># 盈亏计算</span>
stock_profit <span class="token operator">=</span> <span class="token punctuation">(</span>stock_prices <span class="token operator">-</span> current_price<span class="token punctuation">)</span> <span class="token operator">*</span> shares
put_profit <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>strike_price <span class="token operator">-</span> stock_prices<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> shares <span class="token operator">-</span> option_premium <span class="token operator">*</span> shares
total_profit <span class="token operator">=</span> stock_profit <span class="token operator">+</span> put_profit

<span class="token comment"># 绘制盈亏图</span>
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>stock_prices<span class="token punctuation">,</span> stock_profit<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"股票盈亏"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>stock_prices<span class="token punctuation">,</span> put_profit<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"看跌期权盈亏"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>stock_prices<span class="token punctuation">,</span> total_profit<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"组合总盈亏"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>axhline<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"保护性看跌期权（台积电）盈亏图"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"股价 ($)"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"盈亏 ($)"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/zcpisme/image_hosting_service/18cover.png" alt="收益略有下降，但规避极大损失"></p>
<h2 id="附录：美式期权定价模型"><a href="#附录：美式期权定价模型" class="headerlink" title="附录：美式期权定价模型"></a>附录：美式期权定价模型</h2><p>介于最近在研究美股，所以暂时只附上美式期权定价模型。</p>
<p>了解定价模型能帮助我们知道一个期权的“理论价值”是否合理。</p>
<h3 id="二叉树模型（Binomial-Tree-Model）"><a href="#二叉树模型（Binomial-Tree-Model）" class="headerlink" title="二叉树模型（Binomial Tree Model）"></a>二叉树模型（Binomial Tree Model）</h3><h4 id="1-二叉树模型的核心思想"><a href="#1-二叉树模型的核心思想" class="headerlink" title="1. 二叉树模型的核心思想"></a><strong>1. 二叉树模型的核心思想</strong></h4><ol>
<li>将标的资产的价格运动分解为一个离散时间的模型。</li>
<li>每个时间步标的资产的价格只有两种可能性：<strong>上涨（u）</strong> 或 <strong>下跌（d）</strong>。</li>
<li>通过构建资产价格的树状结构，并从期权到期日倒推回当前时间，计算期权的价值。</li>
</ol>
<hr>
<h4 id="2-二叉树模型的关键参数"><a href="#2-二叉树模型的关键参数" class="headerlink" title="2. 二叉树模型的关键参数"></a><strong>2. 二叉树模型的关键参数</strong></h4><h5 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a><strong>输入参数</strong></h5><ul>
<li>$S_0$: 当前标的资产价格。</li>
<li>$K$: 行权价格。</li>
<li>$T$: 期权到期时间（年）。</li>
<li>$r$: 无风险利率（年化）。</li>
<li>$\sigma$: 波动率（年化）。</li>
<li>$N$: 二叉树的步数（时间被离散成 $N$ 个小步）。</li>
</ul>
<h5 id="计算出的参数"><a href="#计算出的参数" class="headerlink" title="计算出的参数"></a><strong>计算出的参数</strong></h5><ol>
<li><strong>时间步长 ($\Delta t$)</strong>: $\Delta t &#x3D; \frac{T}{N}$</li>
<li><strong>价格的上涨因子 ($u$) 和下跌因子 ($d$)</strong>: $u &#x3D; e^{\sigma \sqrt{\Delta t}}, \quad d &#x3D; \frac{1}{u}$ （上涨和下跌因子对称，符合对数正态分布的假设）。</li>
<li><strong>风险中性概率 ($p$)</strong>: $p &#x3D; \frac{e^{r \Delta t} - d}{u - d}$ （表示在风险中性世界中，资产价格上涨的概率）。</li>
</ol>
<hr>
<h4 id="3-二叉树模型的步骤"><a href="#3-二叉树模型的步骤" class="headerlink" title="3. 二叉树模型的步骤"></a><strong>3. 二叉树模型的步骤</strong></h4><h5 id="Step-1-构建资产价格树"><a href="#Step-1-构建资产价格树" class="headerlink" title="Step 1: 构建资产价格树"></a><strong>Step 1: 构建资产价格树</strong></h5><ol>
<li>从当前价格 $S_0$ 开始。</li>
<li>每个时间步：<ul>
<li>上涨价格：$S_u &#x3D; S_0 \cdot u$</li>
<li>下跌价格：$S_d &#x3D; S_0 \cdot d$</li>
</ul>
</li>
</ol>
<p>价格树最终形成一个树状结构。</p>
<hr>
<h5 id="Step-2-计算期权的终点价值"><a href="#Step-2-计算期权的终点价值" class="headerlink" title="Step 2: 计算期权的终点价值"></a><strong>Step 2: 计算期权的终点价值</strong></h5><ol>
<li>在期权到期时，根据标的资产价格和行权价，计算期权的价值：<ul>
<li>看涨期权（Call）：$V &#x3D; \max(S - K, 0)$</li>
<li>看跌期权（Put）：$V &#x3D; \max(K - S, 0)$</li>
</ul>
</li>
</ol>
<hr>
<h5 id="Step-3-递归倒推期权价值"><a href="#Step-3-递归倒推期权价值" class="headerlink" title="Step 3: 递归倒推期权价值"></a><strong>Step 3: 递归倒推期权价值</strong></h5><ol>
<li><p>从到期日开始，逐步向前倒推。</p>
</li>
<li><p>每个节点的期权价值是以下两者的较大值：</p>
<ul>
<li><p><strong>持有期权的价值</strong>： $V_{\text{hold}} &#x3D; e^{-r \Delta t} \cdot \left(p \cdot V_{\text{up}} + (1 - p) \cdot V_{\text{down}}\right)$</p>
</li>
<li><p>提前行权的价值</p>
<p>：</p>
<ul>
<li>看涨期权：$V_{\text{exercise}} &#x3D; \max(S - K, 0)$</li>
<li>看跌期权：$V_{\text{exercise}} &#x3D; \max(K - S, 0)$</li>
</ul>
</li>
</ul>
</li>
<li><p>如果是美式期权，则取两者的较大值： $V &#x3D; \max(V_{\text{hold}}, V_{\text{exercise}})$</p>
</li>
</ol>
<hr>
<h4 id="4-二叉树模型的优点和缺点"><a href="#4-二叉树模型的优点和缺点" class="headerlink" title="4. 二叉树模型的优点和缺点"></a><strong>4. 二叉树模型的优点和缺点</strong></h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h5><ol>
<li><strong>适合美式期权</strong>：可以随时考虑提前行权的情况。</li>
<li><strong>灵活性</strong>：可适应不同的资产或期权类型（如看涨、看跌、障碍期权等）。</li>
<li><strong>简单直观</strong>：通过逐步倒推，容易理解计算过程。</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h5><ol>
<li><strong>计算量大</strong>：随着步数增加，计算复杂度迅速上升$(O(N^2))$。</li>
<li><strong>精度受步数限制</strong>：步数太少会导致结果不精确，步数太多计算耗时长。</li>
</ol>
<h4 id="5-示例代码"><a href="#5-示例代码" class="headerlink" title="5. 示例代码"></a>5. 示例代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token keyword">def</span> <span class="token function">binomial_tree_american</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> K<span class="token punctuation">,</span> T<span class="token punctuation">,</span> r<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> N<span class="token punctuation">,</span> option_type<span class="token operator">=</span><span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    dt <span class="token operator">=</span> T <span class="token operator">/</span> N  <span class="token comment"># 每一步的时间间隔</span>
    u <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>sigma <span class="token operator">*</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 上涨因子</span>
    d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> u  <span class="token comment"># 下跌因子</span>
    p <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>r <span class="token operator">*</span> dt<span class="token punctuation">)</span> <span class="token operator">-</span> d<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>u <span class="token operator">-</span> d<span class="token punctuation">)</span>  <span class="token comment"># 风险中性概率</span>
    discount <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>r <span class="token operator">*</span> dt<span class="token punctuation">)</span>  <span class="token comment"># 折现因子</span>

    <span class="token comment"># 构建价格树</span>
    asset_prices <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            asset_prices<span class="token punctuation">[</span>j<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> S <span class="token operator">*</span> <span class="token punctuation">(</span>u <span class="token operator">**</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>d <span class="token operator">**</span> j<span class="token punctuation">)</span>

    <span class="token comment"># 计算期权价值</span>
    option_values <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> option_type <span class="token operator">==</span> <span class="token string">"call"</span><span class="token punctuation">:</span>
            option_values<span class="token punctuation">[</span>j<span class="token punctuation">,</span> N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> asset_prices<span class="token punctuation">[</span>j<span class="token punctuation">,</span> N<span class="token punctuation">]</span> <span class="token operator">-</span> K<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> option_type <span class="token operator">==</span> <span class="token string">"put"</span><span class="token punctuation">:</span>
            option_values<span class="token punctuation">[</span>j<span class="token punctuation">,</span> N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> K <span class="token operator">-</span> asset_prices<span class="token punctuation">[</span>j<span class="token punctuation">,</span> N<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># 递归倒推</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            hold_value <span class="token operator">=</span> discount <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">*</span> option_values<span class="token punctuation">[</span>j<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> option_values<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            exercise_value <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">if</span> option_type <span class="token operator">==</span> <span class="token string">"call"</span><span class="token punctuation">:</span>
                exercise_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> asset_prices<span class="token punctuation">[</span>j<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">-</span> K<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> option_type <span class="token operator">==</span> <span class="token string">"put"</span><span class="token punctuation">:</span>
                exercise_value <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> K <span class="token operator">-</span> asset_prices<span class="token punctuation">[</span>j<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            option_values<span class="token punctuation">[</span>j<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>hold_value<span class="token punctuation">,</span> exercise_value<span class="token punctuation">)</span>

    <span class="token keyword">return</span> option_values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># 示例参数</span>
S <span class="token operator">=</span> <span class="token number">211.5</span>  <span class="token comment"># 当前标的资产价格</span>
K <span class="token operator">=</span> <span class="token number">210</span>  <span class="token comment"># 行权价</span>
T <span class="token operator">=</span> <span class="token number">1</span>   <span class="token comment"># 到期时间（年）</span>
r <span class="token operator">=</span> <span class="token number">0.05</span>  <span class="token comment"># 无风险利率</span>
sigma <span class="token operator">=</span> <span class="token number">0.3</span>  <span class="token comment"># 波动率</span>
N <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># 二叉树步数</span>

<span class="token comment"># 计算美式看涨期权和看跌期权价格</span>
call_price <span class="token operator">=</span> binomial_tree_american<span class="token punctuation">(</span>S<span class="token punctuation">,</span> K<span class="token punctuation">,</span> T<span class="token punctuation">,</span> r<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> N<span class="token punctuation">,</span> option_type<span class="token operator">=</span><span class="token string">"call"</span><span class="token punctuation">)</span>
put_price <span class="token operator">=</span> binomial_tree_american<span class="token punctuation">(</span>S<span class="token punctuation">,</span> K<span class="token punctuation">,</span> T<span class="token punctuation">,</span> r<span class="token punctuation">,</span> sigma<span class="token punctuation">,</span> N<span class="token punctuation">,</span> option_type<span class="token operator">=</span><span class="token string">"put"</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"美式看涨期权价格:"</span><span class="token punctuation">,</span> call_price<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"美式看跌期权价格:"</span><span class="token punctuation">,</span> put_price<span class="token punctuation">)</span>

<span class="token comment">## output:</span>
美式看涨期权价格<span class="token punctuation">:</span> <span class="token number">30.816545596666153</span>
美式看跌期权价格<span class="token punctuation">:</span> <span class="token number">20.12084028958185</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>金融投资</category>
      </categories>
      <tags>
        <tag>股票</tag>
        <tag>投资</tag>
        <tag>期权</tag>
        <tag>市场</tag>
        <tag>金融</tag>
      </tags>
  </entry>
  <entry>
    <title>海龟交易策略</title>
    <url>/2025/02/16/19_2025-02-16-%E6%B5%B7%E9%BE%9F%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>最近看到一个很牛逼的策略，海龟交易策略，其实这个策略也是老古董了，但是它是一套极为完整的交易系统，经过时间的考验后依旧经久不衰，太棒了。</p>
<h2 id="海龟交易策略"><a href="#海龟交易策略" class="headerlink" title="海龟交易策略"></a>海龟交易策略</h2><p>总有人说这是个垃圾，但它提供了一套交易思路，最亮眼的就是仓位管理机制。原版的策略里，直观可以理解为：<strong>如果从日线的角度来看，通过计算ATR，每一次建仓，每天最极端的变动会使得总资金的变动幅度不超过所设定的risk value。</strong></p>
<h2 id="策略核心理念"><a href="#策略核心理念" class="headerlink" title="策略核心理念"></a>策略核心理念</h2><p><strong>趋势跟踪</strong>：利用价格突破信号捕捉市场趋势。</p>
<p><strong>仓位管理</strong>：通过计算波动性，确保每次建仓时单笔风险不超过预设比例（例如1%）。</p>
<p><strong>严格规则</strong>：制定明确的加仓、止损和止盈规则，保证策略的执行纪律。</p>
<h2 id="Average-True-Range-ATR-平均真实波幅"><a href="#Average-True-Range-ATR-平均真实波幅" class="headerlink" title="Average True Range, ATR, 平均真实波幅"></a>Average True Range, ATR, 平均真实波幅</h2><p>下面是原版海龟的ATR计算方法</p>
<p><strong>真实波幅（TR）</strong>计算公式：<br>$$<br>TR &#x3D; \max(H - L,, |H - PDC|,, |PDC - L|)<br>$$</p>
<ul>
<li><strong>H</strong>：当日最高价</li>
<li><strong>L</strong>：当日最低价</li>
<li><strong>PDC</strong>：前一日收盘价</li>
</ul>
<p><strong>ATR 计算公式</strong>：<br>$$<br>ATR &#x3D; \frac{19 \times PATR + TR}{20}<br>$$</p>
<ul>
<li><strong>PATR</strong>：前一日的ATR值</li>
<li><strong>注意</strong>：首次计算ATR时，不能使用递推公式，而是用最近20日真实波幅的简单平均值。</li>
</ul>
<p>从ATR的计算过程可以感受到，如果我想让每一个仓位（Unit，做建仓的股数）每天的变动幅度所带来的影响不超过总资金的百分之一，可以设置risk value为0.01，从而计算：<br>$$<br>Unit &#x3D; \frac{risk\ value \times Total_net}{ATR}<br>$$<br>其中，<strong>Total_net</strong> 表示总资产净值。</p>
<h2 id="Donchian-Channel-唐奇安通道"><a href="#Donchian-Channel-唐奇安通道" class="headerlink" title="Donchian Channel, 唐奇安通道"></a>Donchian Channel, 唐奇安通道</h2><p>唐奇安通道规则为：当最高价高于前X个K的最大最高价时，做多；当最低价低于前X个K的最小最低价时，做空。如果你想对往后回溯多少K进行优化，你会发现在不同市场会得到不同的结果，甚至同一市场不同时期最优值也是不同的。但是一般默认值为20。</p>
<p>该指标的计算方法，设定常用参数为20日，则：</p>
<ul>
<li><p><strong>上轨</strong>（Upper Channel）：20日最高价<br>$$<br>Upper\ Channel &#x3D; 20\ Day\ High<br>$$</p>
</li>
<li><p><strong>下轨</strong>（Lower Channel）：20日最低价<br>$$<br>Lower\ Channel &#x3D; 20\ Day\ Low<br>$$</p>
</li>
<li><p><strong>中轨</strong>（Middle Channel）：上轨与下轨均值<br>$$<br>Middle\ Channel &#x3D; \frac{20\ Day\ High + 20\ Day\ Low}{2}<br>$$</p>
</li>
</ul>
<p><img src="/../images/19/donchianChannel.png" alt="唐奇安通道"></p>
<h2 id="交易流程"><a href="#交易流程" class="headerlink" title="交易流程"></a>交易流程</h2><p>海龟策略的交易流程分为建仓、加仓、止损与止盈四个部分。</p>
<h3 id="建仓时机"><a href="#建仓时机" class="headerlink" title="建仓时机"></a>建仓时机</h3><ul>
<li>突破信号：<ul>
<li>当前价格<strong>突破上轨</strong>时，产生买入信号；</li>
<li>当前价格<strong>跌破下轨</strong>时，产生卖空信号。</li>
</ul>
</li>
<li><strong>初始仓位</strong>：建仓时先买入&#x2F;卖空1个Unit。</li>
</ul>
<h3 id="加仓规则"><a href="#加仓规则" class="headerlink" title="加仓规则"></a>加仓规则</h3><ul>
<li><strong>多仓加仓</strong>：当价格在上一次建仓或加仓后上涨了0.5ATR时，加仓1个Unit。</li>
<li><strong>空仓加仓</strong>：当价格在上一次建仓或加仓后下跌了0.5ATR时，加仓1个Unit。</li>
</ul>
<p><em>海龟策略本质上是一种“追涨杀跌”的交易方法，通过不断加仓来顺应趋势。</em></p>
<h3 id="止损策略"><a href="#止损策略" class="headerlink" title="止损策略"></a>止损策略</h3><ul>
<li><strong>多仓止损</strong>：若价格在上一次建仓或加仓基础上下跌2N，则卖出所有多仓以止损。</li>
<li><strong>空仓止损</strong>：若价格在上一次建仓或加仓基础上上涨2N，则平掉所有空仓以止损。</li>
</ul>
<h3 id="止盈策略"><a href="#止盈策略" class="headerlink" title="止盈策略"></a>止盈策略</h3><p>利用<strong>10日唐奇安通道</strong>判断止盈时机：</p>
<ul>
<li><strong>多仓止盈</strong>：当价格跌破10日通道的下轨时，清空所有多仓，结束策略。</li>
<li><strong>空仓止盈</strong>：当价格突破10日通道的上轨时，清空所有空仓，结束策略。</li>
</ul>
<h2 id="QuantConnect上简单回测"><a href="#QuantConnect上简单回测" class="headerlink" title="QuantConnect上简单回测"></a>QuantConnect上简单回测</h2><p>这是一个量化交易平台，就不介绍了，用这个平台回测2024全年，上述策略在AAPL股票上的表现。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#</span>
<span class="token comment">#                     _ooOoo_</span>
<span class="token comment">#                    o8888888o</span>
<span class="token comment">#                    88" . "88</span>
<span class="token comment">#                    (| -_- |)</span>
<span class="token comment">#                     O\ = /O</span>
<span class="token comment">#                 ____/`---'\____</span>
<span class="token comment">#               .   ' \\| |// `.</span>
<span class="token comment">#                / \\||| : |||// \</span>
<span class="token comment">#              / _||||| -:- |||||- \</span>
<span class="token comment">#                | | \\\ - /// | |</span>
<span class="token comment">#              | \_| ''\---/'' | |</span>
<span class="token comment">#               \ .-\__ `-` ___/-. /</span>
<span class="token comment">#            ___`. .' /--.--\ `. . __</span>
<span class="token comment">#         ."" '&lt; `.___\_&lt;|>_/___.' >'"".</span>
<span class="token comment">#        | | : `- \`.;`\ _ /`;.`/ - ` : | |</span>
<span class="token comment">#          \ \ `-. \_ __\ /__ _/ .-` / /</span>
<span class="token comment">#  ======`-.____`-.___\_____/___.-`____.-'======</span>
<span class="token comment">#                     `=---='</span>
<span class="token comment"># </span>
<span class="token comment">#  .............................................</span>
<span class="token comment">#           佛祖保佑             永无BUG</span>
<span class="token comment">#</span>


<span class="token comment"># region imports</span>
<span class="token keyword">from</span> AlgorithmImports <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta
<span class="token comment"># endregion</span>
<span class="token keyword">class</span> <span class="token class-name">TurtleTrading</span><span class="token punctuation">(</span>QCAlgorithm<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">initialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>set_start_date<span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>set_end_date<span class="token punctuation">(</span><span class="token number">2025</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>set_cash<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>aapl <span class="token operator">=</span> self<span class="token punctuation">.</span>add_equity<span class="token punctuation">(</span><span class="token string">'AAPL'</span><span class="token punctuation">,</span> Resolution<span class="token punctuation">.</span>DAILY<span class="token punctuation">,</span> data_normalization_mode<span class="token operator">=</span>DataNormalizationMode<span class="token punctuation">.</span>RAW<span class="token punctuation">)</span><span class="token punctuation">.</span>symbol

        self<span class="token punctuation">.</span>entry_length <span class="token operator">=</span> <span class="token number">20</span>
        self<span class="token punctuation">.</span>exit_length <span class="token operator">=</span> <span class="token number">10</span>
        self<span class="token punctuation">.</span>atr_length <span class="token operator">=</span> <span class="token number">14</span>
        self<span class="token punctuation">.</span>risk_percent <span class="token operator">=</span> <span class="token number">0.01</span>
        self<span class="token punctuation">.</span>max_position <span class="token operator">=</span> <span class="token number">10</span>
        self<span class="token punctuation">.</span>donchian_entry <span class="token operator">=</span> self<span class="token punctuation">.</span>dch<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">,</span> self<span class="token punctuation">.</span>entry_length<span class="token punctuation">,</span> self<span class="token punctuation">.</span>entry_length<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>donchian_exit <span class="token operator">=</span> self<span class="token punctuation">.</span>dch<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">,</span> self<span class="token punctuation">.</span>exit_length<span class="token punctuation">,</span> self<span class="token punctuation">.</span>exit_length<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>long_entry <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>short_entry <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>long_exit <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>short_exit <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>set_warm_up<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_atr <span class="token operator">=</span> self<span class="token punctuation">.</span>atr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">,</span> self<span class="token punctuation">.</span>atr_length<span class="token punctuation">,</span> MovingAverageType<span class="token punctuation">.</span>Simple<span class="token punctuation">,</span> Resolution<span class="token punctuation">.</span>DAILY<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>entry_price <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>position_count <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>stop_loss <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>consolidate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">,</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_consolidated<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_consolidated</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bar<span class="token punctuation">:</span> TradeBar<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Plot the candlestick data</span>
        self<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token string">"DonchianChannel"</span><span class="token punctuation">,</span> <span class="token string">"AAPL"</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">on_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">:</span> Slice<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>donchian_entry<span class="token punctuation">.</span>is_ready <span class="token keyword">and</span> self<span class="token punctuation">.</span>donchian_exit<span class="token punctuation">.</span>is_ready <span class="token keyword">and</span> self<span class="token punctuation">.</span>_atr<span class="token punctuation">.</span>is_ready<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>

        current_price <span class="token operator">=</span> self<span class="token punctuation">.</span>securities<span class="token punctuation">[</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">]</span><span class="token punctuation">.</span>price

        <span class="token keyword">if</span> self<span class="token punctuation">.</span>donchian_entry<span class="token punctuation">.</span>is_ready<span class="token punctuation">:</span>
            <span class="token comment"># self.debug('dc is ready')</span>
            <span class="token comment"># The current value of self._dch is represented by self._dch.current.value</span>
            self<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token string">"DonchianChannel"</span><span class="token punctuation">,</span> <span class="token string">"dch"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>donchian_entry<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token comment"># Plot all attributes of self._dch</span>
            self<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token string">"DonchianChannel"</span><span class="token punctuation">,</span> <span class="token string">"upper_band"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>donchian_entry<span class="token punctuation">.</span>upper_band<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token string">"DonchianChannel"</span><span class="token punctuation">,</span> <span class="token string">"lower_band"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>donchian_entry<span class="token punctuation">.</span>lower_band<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>


        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_atr<span class="token punctuation">.</span>is_ready<span class="token punctuation">:</span>
            <span class="token comment"># The current value of self._atr is represented by self._atr.current.value</span>
            self<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token string">"AverageTrueRange"</span><span class="token punctuation">,</span> <span class="token string">"atr"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_atr<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

        holdings <span class="token operator">=</span> self<span class="token punctuation">.</span>portfolio<span class="token punctuation">[</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">]</span><span class="token punctuation">.</span>quantity
        dollar_risk <span class="token operator">=</span> self<span class="token punctuation">.</span>portfolio<span class="token punctuation">.</span>total_portfolio_value <span class="token operator">*</span> self<span class="token punctuation">.</span>risk_percent
        atr_value <span class="token operator">=</span> self<span class="token punctuation">.</span>_atr<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value
        contract_value <span class="token operator">=</span> current_price
        position_size <span class="token operator">=</span> dollar_risk <span class="token operator">/</span> <span class="token punctuation">(</span>atr_value<span class="token punctuation">)</span>

        <span class="token keyword">if</span> holdings <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">></span> self<span class="token punctuation">.</span>long_entry<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'long'</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>entry_price <span class="token operator">=</span> current_price
            self<span class="token punctuation">.</span>stop_loss <span class="token operator">=</span> current_price <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> atr_value
            self<span class="token punctuation">.</span>position_count <span class="token operator">=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>market_order<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">,</span> position_size<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> holdings <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>short_entry<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'short'</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>entry_price <span class="token operator">=</span> current_price
            self<span class="token punctuation">.</span>stop_loss <span class="token operator">=</span> current_price <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> atr_value
            self<span class="token punctuation">.</span>position_count <span class="token operator">=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>market_order<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">,</span> <span class="token operator">-</span>position_size<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>holdings<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>max_position <span class="token operator">*</span> position_size<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>holdings <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">></span> self<span class="token punctuation">.</span>entry_price <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> atr_value<span class="token punctuation">)</span> <span class="token keyword">or</span> \
               <span class="token punctuation">(</span>holdings <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>entry_price <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> atr_value<span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>position_count <span class="token operator">+=</span> <span class="token number">1</span>
                self<span class="token punctuation">.</span>entry_price <span class="token operator">=</span> current_price
                self<span class="token punctuation">.</span>market_order<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">,</span> position_size <span class="token keyword">if</span> holdings <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>position_size<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>holdings <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>stop_loss<span class="token punctuation">)</span> <span class="token keyword">or</span> \
           <span class="token punctuation">(</span>holdings <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">></span> self<span class="token punctuation">.</span>stop_loss<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>liquidate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>position_count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> holdings <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>long_exit<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>liquidate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> holdings <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">and</span> current_price <span class="token operator">></span> self<span class="token punctuation">.</span>short_exit<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>liquidate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>aapl<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>long_entry <span class="token operator">=</span> self<span class="token punctuation">.</span>donchian_entry<span class="token punctuation">.</span>upper_band<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value
        self<span class="token punctuation">.</span>short_entry <span class="token operator">=</span> self<span class="token punctuation">.</span>donchian_entry<span class="token punctuation">.</span>lower_band<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value
        self<span class="token punctuation">.</span>long_exit <span class="token operator">=</span> self<span class="token punctuation">.</span>donchian_exit<span class="token punctuation">.</span>lower_band<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value
        self<span class="token punctuation">.</span>short_exit <span class="token operator">=</span> self<span class="token punctuation">.</span>donchian_exit<span class="token punctuation">.</span>upper_band<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/../images/19/vanillaTurtle.png" alt="原版策略"></p>
<p>可以看到，原版的策略表现并不好，但依旧提供了一个不错的思路以及在仓位管理上的启发，理解整体思路后完全可以自己继续改进策略，我们以后再见。</p>
]]></content>
      <categories>
        <category>金融投资</category>
      </categories>
      <tags>
        <tag>量化交易</tag>
        <tag>程序化交易</tag>
        <tag>股票</tag>
        <tag>投资</tag>
        <tag>市场</tag>
        <tag>金融</tag>
      </tags>
  </entry>
  <entry>
    <title>海龟交易策略私人定制</title>
    <url>/2025/02/16/20_2025-02-16-%E6%B5%B7%E9%BE%9F%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E7%A7%81%E4%BA%BA%E5%AE%9A%E5%88%B6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2e69b5606288198e0639f0ba72c016c3cbd8fa58488c1793ab6ad3bb08103c65">d02da7f6edb536564f61f5ecde661dababba2da155e046f06e96ed1162154bbeda555b695bcdcc36b2e6d2284363dc13c39f465d042dca9ebe6f9dbf29005070a6a4f538bed6ae7935fd7c0c174766fbe4bc78466c831fb03d615c6af80ed95ea72cb5883581db85ee4f2af3f864717068fa78eba1bc6ece8babf2e9d4784432fe2bffabbc9d4676c81e705f460c118dccda6198b52abe44195921f19cd12baaa45032a769847b0d6035c6e4d71b897743bc9bd9345cf8761d5c954fb0cec0b8f0b61b2b9f87ae36b7ca951171f4def1591f513d8b6b50819e8a1a27b083558a4fb8603bacf170d0966472d57471ebbda1d0458dfdd17cd31e6770269d0882c4c473198179fbb8784d2f20a972d07c8a63c61f1ab0ea51e8fded54bdd1af0449ee9b5451466094b6873b39b556854efe2a12cf9e1429c0cfd1d0acf111505e8ee7ca87a68ad37b8f0c2c74362c2975b98aa6444bded644a46b53ba02b5bfc898e8cf6fd1c18acb58c77adba3ce41266bbe4ff5b6643cb68b3d450137b13b9b8c16478d6367de8c6506dea5c4f11f71871bf4bd408fb4de32af3604d08a6cc70f856dea3919323b73a701e39eeee1de0a3569aafd508389923c20f7a81187808247cdab20920ee9499fc14a5059c7a89a656a50e7b65a9e1ddb3f82357e3cf05a6d36ccbfc37a87377272bcf87f96e6aa15f7f7e153b7c0049161759e2bb52e8e2f0edede66dc76568a1a740a6a2f622293d584602b8ed5e9d26d6bde9479ea3cccfd01386ae1910aa0d14e66fd938f0cec78dccad44646139dc4794f03e80c0b6d398381187cf10a11c7abbbdd8a2d3d1b07159855ea46bafd64e6a16fd917c669e36c8178a4d8e008b624147efbd842385ccbfacf1602a67736fdf15763a1ed0902993d50ec2b8f620f84cfc7c0fd561a7f4ae1bbb9f3619cf3d32d3664bdf83baba48deddbe398ab01100b42172e53d9cb7ede8bfe2c09c04a3f47e43a32b9693c9272cf3056db716bad28872fce863bb1bfb765696893bbb7aea36fc8053216cd134ab6d3cd5dcb08a1ab338246b1925feaad80b7305c5d3a1b4b215e3641ae3bbb488083cd6249a28a3299265604fa537a16fb19dc403f931d2f2f3a7f8ac46eef343f479a84ec07fb3d65756d4a18c59e4ee175f7f310d93ef9d8c993724c5fc316f77287de8c89d6e0f018ced3d78b0a09bb61b0eebd2e05ab61f2742994986a06bce4f615e7feb49c75f7fe95de5ffca4fd64464f0ea5db885ab41663a4d740b3c847ba7f04fd9378dfd6fac7dedb0244941d041a977024b0d77e2bb9570bf618c20b8cccf3ab19174174ffc9e68bcd51219ebb460868a368bc01ce991540b39f3a982a170444537f31d0fc85dca9e1c5ca718e16e99fc39eb30123133f971b3267b81880ebabc1f030102c29a8e0ea12e7568bd6a2e602bb6586998c8c67390e20dd44abec5dee3ca306616da229248601f8411f8bdb7847771a5043dd3834fb0eb555e6d377014fa9365b1afd1e93338ecc432890162d15a1b967c88262cd917941e79bbbb223d0f4256299f8a690d68033f00ad0f2a6fe62fda2ba8c9acb6049170333f05369e737bc22e669f1a770f20e560c513ba3554d1841562c0911d7f7b8fac4da0b8ffdc3cdb38226c60203023d580ba1f35787b0cda288d468c70061ed80d763c481974df478413cd98d83eeaabdf3c613fb12bee34f85565687564be1f0ad7edbfcae144c13cb1f64fccf585fa9883cbec76bb530eaa274252ea565e68df348a4623b1d7ece37635e66a75895d2a82fd88a4e338ea2c0b000fb25215cf1c642ee4901ea3f6e6ea6dbb20e0d1725ad083ccef02631b5461d59f43d5ef09ae0f243cbcdbe4c66ed89268cd177c96ba3b98a38d89abba758279e115501e9d7b906a9ed8e512a2396923177f021ef4bafbd265610ee0d582b6ea8b2f5a8953af5077bf9ab908d8468b37e1d530f4dd5ee2ed2f7849e40fda000c7baecaa1004032368a1a780ddc0dd5d6f2214e374a90b261099432e583dedfd0c4e1bed93fbef324b159eb99d5f7e0de5f2c6a9334b3007443fd049585b18cbba6086795450052b8a9daf60bd1c49f39b10abfb841a096566556d7ce7556a68e0fd553358b9ff0b547990aed58eb11ae20671c0bac8b64dded4561d639d1a46d9733ea283ad68133b78d5d2a49d4d3f75b62e002939911cb33ca047daa7864865ad5831bebec84c429c055e268cf98c4f595c9dce328a551b2b01b2e9cfa0cb537efe72dda02b6aebddcf795c09a4a4556a6d829debdf4d88d5a9b0f8d366a0527d427adf67e5ccb1f7a80aa9ba4ca2fd74ac4279fad0a24ac1a1fd3367b14072c7233b09e5fa87a7dac6762576944a9c42a7e951c5788d78e5ea0e80f2ef793801dcce0c05e3f30f7bdb4cc1aa5e3a242dce335f7dd72124b843a38e38e97ca67c33286f02bbbb252286ee885ad6f990f8980b8cef8f0dce0f95e02fb90213017a9016f55560f8c18e4da9f0e604421da07170b704aee426f962587eff672073e3cc0818d11fb93f4934c773ac027486c58f2f10b8dc9d6b209f0e94c92ec40c579805fd3ca90d219241697b2191c765d29018322a4092005cf4e95702e3b56ed97237e5041c7964148c12f79b0cebc88c9e6420dc5bf271dae3ad80ef0ea9cf1f14594d2eec783ac406338df7a25ce2212ebd238cabc18769f7104266cedd8c09e7c2ca27ec060944462edcc9a121fec8911ea0b433f24d2ac6a078649178f5b5751cf17bf9f4efc938c2afb8153391e2fef7db2742cf2fafe11719d6cba685112e88201dcef6b95a22eed5509ce0a6ee29c1a0011dfbe9ba2f3101fe9a4fa2889f4b73bc30432bed0ea5280c74d0798b4ff01c9266d48e133245f78871eaa26a30c88752a37741647c93f530d7449d854b9a0d5d31d3e41ea58fe954f7a5b8900555180a84e11f6080f4ebe4cbcfedbe61db77cee76c2f4beb5a98b9e04d8b400c2bb96ff1cf8bebeeee2be8882153120876990567172e7e4577e54f54638118b0e1ebbcfdf3ce7bc916144f9e98c988cb2388fdb3d205768afa024cfc046fbe7a65723d4837bb102446a7789e491b351ff60997e85c9351319e9bbe453dd812035f1289626d43350b376c060f96466b7a01fb1c815ae80fce9d506746fb2ee12f80e071d4f887e65d7f53f4d4961497c653d9eb073f1a49f59e90a28e0460ec56f9fbf8102981ec8b0c2f6c1deda777bec9878f9d27f8b3c09d6636dcc62d299a876b80c9dcff698e382dff355ab27d9b9b895db71b6569dc4bd0cc1fd0117e01c5c39010954419532e55134a0ea01600c4c6127e40283ba33e94077947fddabdbf3b04485f2681c7321568e29f7a55a1f5137fb08201f134ea05a3be728dce93fc141c3b6190fae8b92e2c21a138347b48f0fe6c2fb53a2abf1f96e2015df5d3797cf966d26d042ccdff70f95687a05b0dd7df19b38d6d563fccbdbce04996840f7e2f541cdea07c8658c7338a803053ad6cea326b29e9b4bd1806eaa728a7aa89ceb516c1392bd131a7dbc06f67af0d001154112e9fc786cce5ad25eb74e33cdcbeb8ee67ab8cc88deca1eabf72d0374da3f44bebb0dab5777637507f97ee647351727437e799968b28acb9070a3b7a4eb62b3f5cc8e7db4520f324bba1027f24e651e84f82c2425230b25e144acab1230a06e7c40d42af738e725e6c22fdbd6f37f265550f84669fb634b3f79df586d5fc480625fd8a45baf46fbbb936b7ca7371fe245e71f25d01974665f245e7951a6065c76b1378bde73881bdc58d686bda416defb4727c6cc865d7d8830b439bed178a3d46fb31c12048792afb18cb79a525ae2aa8f2afcd899950bd53a3e08026e4dc9547028772a1beec129eb51bb49ff89f760cfe206513c14ac0398ce4f5e9475ea815a4bf3c374008041c905d1d5c01c4352a808c3216c4d9e7125b726e7543079773a72494efe1aa06a27acd2efd135a0eb8e66002b92e18d5608518636c9e5946fd6f4d3d6572c37f5d1d9d50b5aba935228692e943e71f23bbe0f4e6e459736ce0dd5d11b52b4843e2678a089e4e7fd22087258c0d099ee5a8faed7f9818e14fcfaf915f95f2bc53f698a928ffa480b540dd3b74f096da2e3375e225455a6c02519889795eb45a123d4baa97fc34ecd320df22d380dde02257f6553d35aa59bd687e2cc022f63924ef51239de78e81da014f35f4289888654425106ddb1899b0614418ea9f657e63414d73efe54a15ce8e8baf45924ef4750798d0c4927623ed22972768ed347a43094bb5651f31d3f5f37845b027e3a82aa12824a9d76ede7345a0a2bd5f8647a27ff8d9e7e1ed6a6265e0cae0f844e12e7918ff36ac3437fd02fda47f0a5a2abc3c264eaeaa467452a026e2480f3a20380ef7d70db56c4355cab7ee201fffcc9f3b3fa603089e23d134a50601504081ecc7f874d28c67dcdc9600340c66a4a3398dbec5ec638e48334b632f9aedff72b6a42ad848e08e09028a4570cfa7e93e5cd55351ab6946b4aeb36b52849d5a7bf0769df114e055c99c6da61cd0fc54515d5ef3dff3c417171fb9545c580c30a0a2b30b036c7255e450d2838280d17c5b3ac32118de529dad8403578a10a869eb71836c930a2b1d65179bffdb9f0cfca495cfc7a1540f55b7f54c9f52402d92a00f7f592533728e38b1778c94525a71e4c7676a8b73347c26b57f808c61b9434849444b2ddd93529682f777ba60cdf1f6aa0a9df0131d84eb9ed53eb70dd03de67ecd26c38252ab8ae2fe88c3c168afb4ed93626e7e11ebc8c5bbc01dd8eb5f58e4ff73c8e85579f178f96f5b8bb57fd8fa408440c667d1ee503c8b2de982299c3b0fade8cd4c73819f4d5dfacc685c46e87c850bdba9aa2ac9fbb9486b3e126eabe87eb4383994750cc3207c681c1cb9e0ebdb043d1777ab1ccb8701a5e7a0c75ac512df106911409353361c27882d1e9be63adc1a3453ed150c7c7370e0c0f9a6d0a3f991c3ec1a82df01c970bdf50132fe634349bab3b035ba3c89b735804263f25e1a57542af569115e82c2d25daae65024853b5f230babd10f62eb2236a899f7ab973c54d6bab49e62c9b9ce8281530fe61a5c48fa59b323a83d89b392bb8b6997e557b4881c94e6d8d88fd577a54bbefc7fda537ba5dd8391bda65afde446cd609740483130ca730e05331cc2f8dbf14ea080f0c053a2825e1dbfad2b1517fd6e87838fed43d3d568b877cd50dff4819a57045e38095808d3a328d2f1a1c1f720d28a8c48389b8eca76aed50fa41365cfc19a9fd94bb801d7846bc2d53216619604a7943013f3dcfa832a5f8877af95bc4a396b9d4d7aa5edddb36ccefdd9c67f85dee8abecfad4fb9657582f4e395a04581e0d41384cd77230cec2bca5a2ea6b922dea4f7604f123cab76367771c012615a3a6c3f5a6ace1db8c33da22bcb8b1998d26497c3d33a07d6646db027357d53b8ef8844a0f4a0a10f73116227d7d3dce741d1b5ae90b8685490fe8b1022c05fdf67834b8de6f8726ba5736c56c1254aae88c71629f35c7ac909a7ad9ada6ced8305beeb1f4a03c8e86da8670436cbf84b48f6ed5586f951e97416f986764b61f9d3a348dd753448d6d13eb10366e7763652f60a7878e8075aa79901c8620df99fb2bb0ee31c8040061f99abd60e97af62fcd246969aa1950a00598969837cda4d60b8061797443f2072863cd7249fcee42f693769d79e00dd0e2e7ec06aee934773fc267fd09bc32fb26c196fa9bd5937c17936e8e73ff6d19744593c610f1d7c219723c3ad14df53fe772c1cea10860b700f824f9aabfbdaa1894db40c26816911ef89b7cefc448fcb06ce10fa8e4ba0b9d7c7c630790c07339729435558388d58a2d5193aba0f93e31ae70103cddcf1217f37816fe28304020e2f349849fff967646af62a85fdbeb5b840f258ee91ff5955fb23eccd1d70a0668b9b8c0bb85255bff18186334d689aabacb65e32a129b1a9253293eabeae7cfa6b18fec8c62b4ed79a01312ee4434d1135f301d1626586728d004d2b353eb80a6d487e0957145a2fbdb6457aa49fe38ec7d97bfeeb40c7ce299c2aaea43d94b49d94deb9bc214d3d710d35f381db940f15af6df6c0b4debbbfb5b25085a74335e0fe1f0384ce012b482d4ef3964b902a474fcb9a1ed54c5f2d3d4802d41162cc91a1a675f2c5f96f38716769af3eaaa539d7270318cb42bc832fd2774332d5a6b0196fca638d0946351f577109dd4a3068a051abc8cec02f247a1a025977cd3c8790ec09482ec538ff2e208a13a9e5087cdf3337d8bd812170988ffaab98eb1442ef6815e10788e806351e582476650149eb0b20423c3749d7221a3fa5185d88fc0e09334499d555a0c98fb046bb8d3a707789197c3cfe27769778bd41bc588e1bc53498086259afbf3e918230b9969ae614c7c4178cfff0c6853428c486193bfe8868540a7b69940900e19cb7e7e78a0017b3c5a09802f3e40410cc8bf7c51325ae2fddcd2d54253cf64325471d21a6a6162f2290c56bd6b3b6a8a3df7a5e23c64e03af177f9288cf0965d2053b9c5094dd7d72a814f1273da39a187cb13ab73f44b64760a17d44cfdc769426622461b98844b65102b9c557f8ccd99b4c0113e2eaff5c867fa4e61dbfd5964d02e19f0a06afbdfea38229ef157bb3d406518322dd49e08d197b829098b77ae69bdbbf80ef9ca56cbb539f3a4a3cd84fb5e624632000bb58c5486aba04decd77e22eda91204de569affe13e722c94d1df5d9341cda5850944cf25c2efa1cdcaa6d4aeebd69b73c8fcf251df0ea9235f7871840e1584b440627f1d428fca19973d89a767ceb7f5f4a2f1fb3bcf9d1b5b5b36156ea3fd0f9b6abcaaf026f7bbd980b6279386a1a418807150b8b693364c081aeecc88f67dc4b82703e33557cd4ae7dd276858951f122dcce8052ffdd2bd2caa769534bd292ddcf2215d5b8ced32fa424f29bd2e93b0ea779af7a266ecda332447cdc640187abe34b91ab2654906a356a623bfab3e778cfc23b9461c1ed6fdfc011af9d98490b100b4d3eb110df4fd23c81f5f1921840b40dff362abd4e12cf16e309756146ba3338d2d85f61f0191143105c5414861f18c64976e8dd4f85571b6338b6177c0143394688e99e7efb21c7d3b4f12339b5236d297fdc14ada537a69bf6aadf0857093c54ab03ff9427c0b86be33f27e4ccd6470460bc1969a31e8761eb3ed2bb5ec4adced5bebc342e808b903a458a2f0d3aaa51965a68f295c797f0f94c24597708650e54db109ed9c423ac02596a3a41c582eabc2c2aa4e556f16acf3dac700b2d1ce660c0b31baa6313051c11297af9e0ecb7a842a23f20ed9e196f463e33402bda4395567b36a2639151ce9c1c7d0b6f69e4d6f43e375cfc8dbea39601ebc05bbb6eda407ede8de941eec162dca186ac8b9c4b139ba7188d8087046aeff27f0c5ec9747b13cc36bc861fca826b585fcd1cce71d151478fbf6eb47966913152178e737a54a9a5074219c730e30a319aee9eb4ffd53d78f833517a91aaaa14819ff61f4cd5cd925c9eef985701a0c58ad93ab7ce6c116f598dccbd6d7ad5df6de6d9c6b9c5d48cc4b54eedaafcf2c18e81b62760fcea75283ed26316bfc2bc70bb59b2d8f37ebab5fa2d0fb294c5ca4db670a518b97582f9f5208a5f8bb0c53173677f0088f1a3c817cd5a43d9034f7ca3be2e8f21ce45b2eb5b3670a65d2f8c27e2594d6e9e0fea1f0a6d8d7750bceeea94c9e34ae619b40c1473a05826e4a2d99856bb09980e2556de2603ef25fe14cd090a3150f2ae9615581cfa5c0dee236a87893feed26a5d73a6eacf57417ad1eba349443c29fe0dd8d7367b212edebc1534feee6bfc467cca9deaafd2dac1d8374d2af3407bfb4c5de7de4c58ac18caceb1e7d984bcd684b81e40c2a2e07888633d6332f31686888a61cfe71932975fbaeda9dcc1cedf20636b4ae4a0bf434c7a419993f9b0015abac4a389f9e67f0c9f7eccc77dbb2efe9d53678567e4a01e11e03ade12c043294febcd989b305f5eed59efa545c03c8d92207858842d1076905f6fa7e6f2d0859e2f4c6cf8705d33416e584a29758f0473b25ebfa4fb13a26c7d44fe964d5695b36a9421a92dcf4d0bd24dc845242c0ede91f1e2bd039ff83256a986aa621ae342da660bed60b42118d5e5606893ff4abe8839e23091542995085cdb50ede7694ae733461ea350996b0e78a5059ee244e9b52a8e5b335e6e00e4a55ab36466b35bd9251a0f5a218368ba95c65b2176149a4b20d2f94db01eac60a4d4dcf2834a0164e761e23bef331c0de91ba31ce2507d6dba5514155c77975a8eb95138d4364f25ffd24f821f4abbb5ded4a705f9c3cd0a9311fdff14089ab648b909ebf1c7b5939f21d33245ed749b636e097cffd2de8f77b61752d1377c0f5e208e860202a38b25550c6e3c17626b0f8f7b068e998f504f66d0ae09cea945e59f8c0bd89ecb44053d5e8ee9452229206707837e97c545404b85c7d8d53e9ec9e56e19c21b9acba4e7c5bfafa7c62459ec713aa14d4d551a12f99f644061807f07d018ed36e577197b9379ea5a5eaeb7a8b30bad2636be13966221e2a11e6d8558de93567af140b4de5400ef5ef717ef21ef2b2a22c44e5fbf5d628e526ef9bdc3a96c54279e2e31d34df42f31b5e623335fdaea33b0979ca52f8234c5f3d825c5078e557cb89d97db350a8c69d9adeef7d824d8685ab41c4a60384fa15d5d50f9987d569fc1ff6fd37c0192d1efd72e73c65931040c3e1a347cf9f32a70a6251ca2a7e074bcb0ac814bdedf6a2c7ab1a05b4c3323e705498f9f684580b2267885e511b55149c6e96c2f459879813601c8dbe3040d4222af7e14c998da857df3176cac742895b08ee27bcbead802ece8223fa4e16883dc0f06db3ac47e154f49637973cb47cd227dcca489f6eed7d58ac4f74b20ec70307d9d3aac7d6c7a1a0e7f4648d788852701cdbf3405eede80c88a1591a38da8c0edc58e49a761d20890a010c6a8b851835e3af555cc9390a13f04fa25d788fa4a0b3fc76852ee4252a99fb99ddb47a2caaba63dfb14b797feb66546a1a59572778e4bdbb621f4a41c3920d5a308f55068cbb45097f1d85de8d6a14952b5d602d7c5e6085ec5cfc838d1903d1245edf13172536879ac53b2defee684d829af827889bd2117059c6db596a98b9742b2603bd0fd55938304e8e921a4482f6d5bb48ed3d7b992c56963fbb6937d9d12d10800efedc29ece571e1306f1f256f56e59e54613290c07a7c70e0aa357fc08bfbb73451fadce77eabaf6e1cb3a8438c9c50821b2d5f337b2854c9eb21fd8145ce213cf82633cab14d05b3a20bc8efadb1b2b27249b9e01ac736eccc08da2a96b9376b6d2adc40a641cc8548e42dff1f18feea4ef885837ad155627307c3a8252c8914d6ed3a1a6f38bc4800cc6972de672b3d2d296eb83fd4f4570d2a05e1617c259cba98c536a8bd97aae1e9abe3379cb08e4b70aa626670ea4eefd139254c0894574ca8efdca4d069539adc8c373111825dd1dcd3d4d4f3a25320c96d05deeec1dc112d54e989435c45f0642992ecb8dfd0a059eedf9673964618fe8965f2c1473e64cd76833d39904b12583437c5b4432a2d10f5f9dde764e043294121d0746c3fe740b45917b7c46a8c7112c078ddb22cbc6315d6c1b168f9b1c5a6743045ca1fc344b13bf6ce6839ef5789cab378dd7dea966b99278db45a0ba64ca242e999f61021ed83b74866eec3a7f343b3b75c5a14656828ed753aaa5e02f28152936e8a390de4737ed7fe304d368a74b6d9c6c81faa5c8e5d43aeed8b8a9db958c9b4b4ff58333f468dcecfe22b6e9392362f11ac7929f16f5ebccfdddaf18589ce5cf7828db33fe6c647823e9ad31291624c6572c9353b90adf650f4a792dcbd61000381b17117a2f2e268d551970de5b5ceeae7e5e83972e24a25b9ea2819b9c3a588068796f84593301b065622c4ceef27856c877bf1c070459148dfb3d9ad7a6b1061837ad6dabaebc4541a2ba70b38fb62a21cae47c8eca77e71a3ea89de1cccdcb968dac7144ae3e00f008f945519cddc343014f25fe495d62b7709b5387bd70dcb2d2764da81165074943cbe938bf73b5ded881bc2690669014f6e8fda384a095e93818af4414da2e72f0702a1d5fefbc8c625727b47a31728b844fbb2ffe8cdbc1a1027bcf2556bed3c0767984867a9813f4bf06d092957a433006368ecf6360ffebe6afb0c89e0d6acd9aee95b3de9280d4dc015f4df06ef48cde66593247068513c71f3b079b54c37909071a3994b6c8c059b99015801877224cf643ab2f3679ad9619db312108f87300c0160e31a0a017983b41f904ae1fe4ebe2dc1352429dd85bac28d70f8cb1fc3489686767402c99716f8b6654964443e3cb503526c96e13490d573ecc438de71d3ee8a2f55f43dcd6b7daf750db6ec0f7084cc4f7ae19c7448ef52f0791733d2a81f2818dbec5c864dc2d1a583faf8aeed14a92a7bc5990a879a0958f0794e984e6421036eb28a9c685aeb83f8e4505b6829af634d003821f48ae4c8e48e3e7d6293f8053d579076ab9da6d3d92d8d4a68c15379135551de45f9e99fd92bfb9fafd9be2a6948f21ab23fa71ea3e7da4e056176cb60e8f0bab0389bbcca850aeb73561eaa4b7d4e67c4c9fe5b96aeedde51d5558b6085f34384896fae29811ee4e9fda6d88c5138467581205c7db81a32d362e710750bf96ea1e68a2bd90ca443d9ba810d96aa56c357a677f69f7ad880c95f4eaca75677e1a9c576d5cd5c0fb9abac424297264d50e0683c52e0741c40d95eaa8edfdb50904268a0ce8d4bac7c31de8d1ea0c09336686e9b77f4a3e53b569491c0fd64b556bda5b5d1651d34d3ba448563993a17b97d28d7c22af325e1c11822120af2124a026831b31a35aad5a1f9f36e6517383d34fd718a91e14893c2292c87ef904aae30334d00b5f2b58ec9291952781d57db6897e602ddbf887cb1a5e265e093f20019a5ff829db888d83a5fe921cb3d5d59935249b7873fcd0533cadb7c10487153452db1dae8940bdb22f1a32b0f2424a77605d30a291cff09c6b0db3b735a2c095d007898757de6264e7a7f5ee761793cb6dbb1203b69f76571dd9bc27f8a407ab6abb7283c0438d3286ac2b632d97a7680cccc6a9b805becb332b712b038cfe9e4fc196860f2a833e64deba098e25d2c7b3d590cdf4a4a9ce7d5c59cd2e8938a907e7aad710effa56b855f4224b6213012f5e0d13a6bc42aea266fac85f09dbb5f53b40eaa3f0cd349835640bb07783a6e58d3315d331870c0172b4e3183cddcb34e9f6721842fa656064031ef98bcb4839433d8d646fa2adf4a119ec4e97e4d34a20fb6ddb0c8c5a6fafffb65586e3bce54929381444c33c943400e1dd0b8fd7bfc29233b0d605b728aff93d13bd8fdc16d5d80b7880ae9a98ebe11343040410fa7ed658c448ee00c532f7527433279a0463defc679d936292f3d05ac2bb7e9b613ee77f3d7dc26c07bb08e2c33d4e7e78e330a92f65288222381f45120562a9919916cfc1dfba037573ff72d0d0a5302b733c9dfef2fd7af654dada4e48c8d6465eeaf4ebe3a8622c706c7c604c7bc650fcfab727cc2178298e9d9fc59ca21e822d48654b0c80674c6e5dea302d8fe66e1e6eaaaafd6ba4c4ce58b5e8bc9424defd799902bcea500c25dbbb983e032db659a0680955a5a0ab3a829a0d7552fa90895db39e9039c953efeef9f4a5829de27685bbd92ad95d1af5b76df7405750e474ad7d6555fd57d6907b9edd76f0188681db28d2d241c0fa7f755f14b6baf6446c006b4c674665eef624a2ddcddf19fb8bd2b1b3ef69a637275a35c819ac64081de1d3e5a5809a056877a7b0d81469b78f7f37f6b660bbfcd87500c9daabd6a5440df2888f9af14ecdc1a80c53f7799ffce76a2dfa093f04951c07503f2fc3f62449bfc6b209291107060c925620084ddaf45f08e0b28239724e2c6434bd305bb416ee5e11d7001a400c39cca87383794a2c1dfe1fbb9216bc27689dacbd1469e00b8b6d02d8bded44d8844557fe617b44f90b1e077b630807d05cc504533e1d024b9b41ddd7ca8431fd6eff3c77d8c8131c746d63dd3721d29e434245ca795fcaff37eb4095cd9eb8ebee885ae6ce2f0dcf4316a5fa631f3d65126fb5e56a6d1bc5c79f5184c705fe0794bce2738758fdb8c00e86efd25e23f0635716a19da6a40a26753db19a4e6e2718c8b71d7d22c1d22c8d6cb291926e87fb7e48155534fe3aa842f91770a39213cc41e02bff41d86f223cc1552d7be8bca0d4a38a33a01461640ac87de0462fef8d7cd4e3b5998127f87855baf3283750580c05554221ae18c13f20898eec9b8eab8e5732c53a85893d71cf6af63ff33ccdead4d238a6b6afa48825a83e18f782a9a8c31d057869daae1e0c49efdf6124454c16df06a109cf7ff339f32b9f5ab750316b5f6ba775f7361c24bfc126f120fb11f670b7e91559d82408b57b8fcae519aabdac0868775e7cbe15f5c1ebbfbab5800313164b86103eb05f5e8ab4f2d2369191e3778a3b9cad90a57b78451eb486b98545bc13ea7be56a4b3544a69e7819a458a270f1d678bd315e03fecadbda1781f15c37ff998135848d1dab97e07f760c505cdcbd236fab7656f5285817599d77d05c8b5a8f1f61f3c8d5e6b91ef6dba117c5c1556db7a7a6287138cef5730f10181e121590a93296373d2ee84b7000c40c2a31888fe63fffbb99cc2cc1702d987d896dbc97712ba648c010262c034f4dc62bacdbf9cafeeef0e041f1725b2d4de51fc876847889ee6007f928ef91bf3b0a340b0152903972958e95889bac87350df76accd2ca3c807a2f0b2be195902c4eb20ca97aec12dd7511b87938938ea5d79db15dcce801cec46b04a6a1d19ca85e838c2378f0974a71dc1e605da39f694481e7a722021be5d8b157b88d78345c43b25330e414b1ce443d72fb38ddcd5037faa53b55de8e3046108bb8e542400326513e3e39778765be4dc24861836dd03d05bde8241f751a71156008f322adf1d7930f6c78f1b890f75a3f5fe624dbad8be8677b52df2ac43633715956fadea6e39a1916865b158431092ed86630de46ed474aa7747e6cb51db27a0b11e1495ec99fdf3d008481b044361a09fa5732a3ca16fbe73184ba7065b2b90d2e4fe78ba55c2a6463081fe0c3ab9809e2520d24c367ca23439de406203155c81a57bcf48173407b23af226d1875055bba9e961374a48e09cde007890b8034e47f5a430aea6e1810605b518e8c5459c49652e080e5238187daf10dbe01cb7a6ed8731d35db5bca3b377c374071e298bca9bc77539f4388a06ac83e2149bba3ac6c2a27be6933763eeeefdf54a2aaf43f7897de07bb6fcfcf84e35b07de876d37471d1e04fab26b0d0688b5feb3829725bab08be64d00c1af57c63fe3aa8348d8d69b38fa9b54865f65694d6e8dd836d9e768ed5f78531f31e39fada254ed753c6e316d954b7ac56bc9b743421c451a52258acd1d356b95393ee4759c2e35bed456d4a81524e616a8d1cdd3ff8f95c8582f28772929f1609cce285f89c6193e14f47b81ad748d48f31609819505e232e6613a711553e9ac1d252bf431c0355a2f4793d8463c107ed2147214881ba32c174e0145b2c57823cc8c91469c45088741e579466f7415c1db4166e2242e672497db0209b11ca92ea2745a2926e1163dadb9b11a6f23799dd1ed86ae81fb2b78aebc456e6e6e8370d758eddbdc95fe7fd59526958b7f2f7e4d6f9a65172ed7131b972fe64554b25432a040c21898a923b299ef1b8fed66489cf8ab5a8f97d99881095507b6ab96efa017c62a69b5dcdac6032c5dbb56a29fbbb17fb72f814aec96f8d46de6d2e670fb4e6277f4eca8b2199280878f1a55bb8409418c05a02d8feb6a2350d1ece7380e7108eada4f1504b6d61610823f75dd5d75ac66567a45bdcfbd5a6cb93c6ea0617880f79ae501d63faad3bbaff643c6ca98ace4b835e4a2fb18e9e8205024a15fc50a105cc1fbb8f73ef72122ab844133167337fae071e55603c1a7081d47b1c203f20e3222e1172a513f4d516897f715da0b03deaf8883a16f4febc1d7f2b3090e70a4dae571dbb34cf7b466666fb4c9fbdbb4febdd19f6cd2d5844bbf0240f547e0ab34dd7cc15d4d046edbeeeafc0231cfb60d9ccebbd9c4ae4484c058c46240901919105bc79a27bb82df410467de60d3149d6152c61c6851bae20f15fe9a8ebb609e9ca525c72e040b6f6b085c7ab0a79eadc14cc47f71565d91fe31370fb962f498d64c81bdd4547f62ac0dd9474d227aaa6b53eba47c64bdaf82663fa39c33a2c94378d09c6e741c0c5ccd9a46ea7f1ca44b72391f2b1ca86adf07e665c3dc9afbaf42c034a399685b28f7175df4aa337a74b0fde01961b65ddc62d10ea5bdcc1419c980f5425058d2d3006a9b9ea99ff493387ad5e1254c939a8a42d959d269b3d8621aea3772b49504fccc5018490de3b705bea06277c041e2bf997bec604c4d4e84a9403353b25d5ff9f375f66ce8fddc340bed8218367e69e101a7e5f43ee7a11674658498fe471902c2bc512e958b6b9807594ad3f2dc6247e710afad53482fdb04c058c205a5feda62c0a2674fa4853b52f7202174ef23f821cbd7ecfaceae108cbc52b775fc9dc9067eeb7a3bf4bebdd0e5c3b2864346f22822b05eae5522b058a3f830173eddeb62060b5196f21058a23b9d5bf080c2d89737fc52abd0965ad3e38f48b7d002dda62fd9eaef30c7dd8bab3b57c78ac40c94a301995bb694f54dc4faad24c120398734a2a33acd2e3ceb43531f6ae4e91c5a78000df88fd3cfabe74158eff3342173e76122e9b46ef373d8d3f7c836cb1ac8754d8ea8b8f2d9093ae146d38fd737e26eb67cf9b40a459664a62442447782f2516f28def4e3c2bc10cd07de2fa5a40ecca5206e1841629a305d70304ea0e9e39c8d3d87b65ed9c3ecce9694329214eb3889db5aeda342e455f5c8dfb10b14a23683cd0a29a50b9bacb346294a57c6f17f9786d278073da4e187b4e4aac08d71ae88a518ad7045d464893fdc9b5ce72165920c0649ee1ae68be4df6fe5d5698a10c2a989f45cdf4fbb3154b79e3f9657e74aacff547838d5dc4a0878db64f3ac773aa15d13888dd6a5a8d7de6aecd2a60768552e385cd8def016786c3413113732a840350b6a2f5f52d2bbab003a7e2727123f4eabec3c9f9baaadb323a886b4ac620917983822814bc78bb7bf90805ee70399ded29829f7e5a685051491d8fea78eb805f6e517ec850108accc7bd04a442a3b9280cff9b5c9e6f52b61a35785f48bce8ec49a741c57572ded4fef329c1a607fdd5565f7b133de710d341e9fb6f31a7dee6c8303ac8b89145e1a23987d427e90cdd83b15065b553a5226ca8255d554fdba539312410309403af5c1ea9c3a7aebbcde6c797b2ef923dbb11ce3f8432db8bc77372fde1253da1d12ef9447dcbd47cbd8cda7319c23a7013006be77f3acd3a371c46da64257e09f44d9f6ae7f7f0eb0706b9dff6bdb44d1496caaef32bf4ace4250a125780eb14c6b945cdc4b1ea3436fa1e442b94e6c0e75f163feb8983bd013fb9fe2d3d23b212f946da8c89e7682d746b984e3c452965b125a37eb19523d77e786b56c008b625402d1e4067d50ae25982e80f11ec6a0d6ee043f815d3dc89f73b7c0a17a6cbba59c6754d397e185ec092c384df57a8631ffd440753d307c40d43eb7ebb99679bf8d7eadd9729b943ff02236d0ca57f874a006fcaee2d808afd434d6106226fd80fb208cfc534d0d980a9d4ba8274f3de8131d3432a3e30dccfd23a3e9bc98072b130d42aeebb2492ccf2bb3a47f2c4f3e06f624a9bd89abd09a100e2c44210b346d3c74741df0a948d01d1d50fddd5f088a6e99b8f1012446a3b637f9b80da009bc48a57a32ed4598025e0c712639fc50396f71f9bc23e0374016092d04b8028bfd64c6ff475a5b7bc8ec626465d9b6ebf18410edbb76f6530009243634e884a8c7ef92cabc6db348eb514784d0886cf3e3d8b9740d3e8786852c9a55aa136faeadcc1897b0f9db10de03c68aa889886098e027c08c3c9c2d74fb909c7a552e3028a5224cd9999ad4eab040d1cb26d1ca4ac26af428630d49025fb68a3c045824d3724b8bcd59cf1b58811ad382173575f320d9139239ca22947cde47cf7dd1f2c7b1110517eefdb7027cba465676f15980b3d2dacd106ce8a239944f5d83e818c782734da40de4d6d74307796bf922353a1d7b2da005ee89ce8b02e6e512b2c54257ea9de9ffe024f2660c939efc182210dfbfd4300420f37c35eaabe897d52da54a4008bd90b05eebb901cbd8f3d87ff6736c91e073f623af7a684f1aedb5a275e0d5e7bd7bad24faa8f378d1d5d8092d6ed4f41d9d33254f987ad0915671abda5cf96c91a0ce20861df06c30576b39fc178b61dc613415449bcd1ce10b1a7a085e175715e6237fd54123f626dab086a79b10377727046032af6a3e890d34c203dcdce206cfe68aae9b946695d2b9eb974eb1124ede44d1ca4a8f82c65e5d704509774ab89088edf62f13fd512a8c035c87995d24794fd128c3fa052df6d75d23004c0dc71f3d1edeeb93ceb47f17be9de3f7375216a523f031d53b5f41704f488d0bd8fa82004c15987f358b4986e460f9602efb73e14c9befedbb31ea9cd598933646d951de06956492a8024e330310550ee97ba8f5a45901535d2b6c92d1c93c36463bc4ef8f21db4ee4b5989838bfd49e7cfe45f931ab6713939c1866b4646893c87be619ebeb1a3837d1fc37ba7e766ee620483d8876be90a4a7f8ed0f092e72b9a20f4ee39fc8f5103de5963f0d93159093c00f44d931ed770c230227712161db0350a8a32f9566cc2c07d3a84d8755cedec926f17c97c4453b60862eec0447a7edf890916501a077eaf9855d7f34670feb6253e521431c1f937feb1d7cd7c2c301f11a1b6d8bfb513ede52fa87fabe7f5d90286eeccd8c3f4d020b311bc84999bf74116febd2d4cd0bf0ac3233ef774d013696221b6737249e09028b36ef40afa1e68892973fbf707f792b61cc175d096ad605524739458a283986ee88d5c8603bde48b897a2665f8e613ee9c5188d294fe8a81d67d08c34c2803e2261a99d03f02c5f953299b5cf33d89843293bd44d7820acd226467d9ead7ecf1ab0181c51da9025f1dd853e740924fc24a8fc0d64c71bc543af4d8a73c6625edc89c20835567760e424c0661e23a7e99f9aae6f5f9367bed51ededc0fbcb4d34a6ba370eac9912921920f8ea29a89845e6e70a75cc34075310a1eb46c3e4824e11ce8d3bd36be618b8653867af65e559bf8085e70629f2cdc971ed85bf13a905b89334362f4d05a0cbe476e72c2a90bf301110b1d8c44387b511ec0378f3e0f21d0d151b6f42a10a676a22627af54618219f28c0ead642d626f8c0977afd1af0bd18589b8e160c20201ab5f72d8a11109c15f9ccabc516d2d03547c07b2797056b02aeb5a0a22eb9b3f16e484d86f2ae190f0db15a625150049c0781a02141f65d1780e49538803f45e2dae1ea978c8d8fda618dc3b3a95ba7d7405c0ce1a01b0681fe6cef7c6840713c5165fa4afb11e7eb944e57213c3fb7fe287ee7c1cf8a017b85de546f36d72923b8e9dd4f618710d8789d5471b9b1656e42fca3e11c205448158876a14f8a0c00517bbb9d414a030255b8156a0bd40cc1778fb3f2beddbbb063db6c2cba50be36ffbaeadadc64b536b3e637b7547d969ed44f6ae08fc6d3a630de9ac68ac6b638172871abf27385b7b6cea10e26f4d6c794aa9293f89c87032abc904c98f0ba3bd643e95adb136a7c5128c29b6103cd9c576e3dc0e26bb82bef1ee3f917f863ba1fe880eaab5b24965f84e5aac080375457d6be03baae8279c91da3ce1245acb86c6d0f6319b1d0f29525157eef098746889406e0717371f445301d4117639ca94ebdb74c1382b1c9e5325dc6ff534144e31648382843baafdd15cb469d3d6d5b79bc872744903c593aa2f10ee992196fb4d2212382595782756f7f2ca29087d2de07091401889184cb1d1693f7fc85f37b42a21f4ca9734ae874f120651c107153441cc20e027a0ec71b662b3b0efa90095943350139a930ead8ca50186f3f98413ee2d50775b08d1e580d0bc3ae140f35185b6264270edced4ba31aaefd9e18e8fcb04db4a0f2c31e2ed6bd70d08e073dfd7eac7a1c38c1e1b0b83ac7b3e0708525f03942fbc7402d842c206fd4aa7ff5e11dcc3f5aef7368658ea703dd2a9b96c50fdccb7a8c2d77e3d505610b6242b4dbe757fb96db59637c0fb882f9147fe24976903175351396d7b31c0830062af8715060c608f0d3ae7723307c22cbedb9ae189e4215a11285a6c0db6c5a690238dc67ae8358b28e0bbd1be6f22dc66126576fa3a60a5dad7b9cc97c4819acac514c05125a5dff7703f3f4453d5a676e0bf590c26ddec4a1cb517a93219f6c63da49102ebf395188b804d0f350e76075565f3b869a53867e923d64701dc0eb4519cb2e1ed6665224b1106d61b0026b898e6c9ad4d9433e7064408322f5eeef536a8610069947bc0fa749dcc8684b1e897772e314fff30362683970839f1d20ea337ba648c49a93a0a97b731d286a01a2ccfab666eef364f398c6a2a136f7a4447f4fbd319ff74b849549c029212d35fe323bb8a5d3f5543c9e4e0d986317690a51bee9500c7187dbc7ce98a59ad9e9b88156ba00506eab1c891233b31d348c3d3af89311941455b3ba660ebdd95c6339f657b9fab2579b356b4f84ab958332ad4d7498d390157e4b506c855237c596b5ded6d90f9d67117b4d08f826688f52a6a4c5660b5ca6bbc1ed79f41dc4faf3edf3d5839d5a0e78216f8a5e7968887a60e07f9e073aed0f57c8bb08ed69e68ecd10d8850784dd15b02ad96b5ac8d84d7559ad1b70ff3cbef7002841d4e089e43a8f5d4e18e89e068adc0931a3000ebf4521d743a8a951c47aae7865dd31cbce345428d92f229cc22a9599d9914feef554867a21874e4b3e05331e0fa4c3d4f5c9bf676792ae8aee37337b99a527f0317b1a0ff30a8872cd49a2e30651879330951b4c123226e90d2c76404cfda88e4cafd05ac8b89888eb00cfdad9fee72ae42583b9dd02cc26fa09172981033ac12474026e3454fa34c8c7915fad19a0fec8301a9659ad769d1ee99beea44cde20cffc7eaf350ea1bc04e752555806fdcd52083c8a48c7ec7a07c890d08a5c061fb45eb7442bce22a766420dce6e02fd1c0528e9be0a2c382b8eda027e5d7b24e8ee5c46b78f67da04bc7e3f54648b4657a3489398a93c2895944e3c49c2e3db7575f676e90a77bd9739d41c4cfad47796766923dcb0ffba7a13d66ac77dc52aefaab8c085cae9c9caa6564b780bfa80c19a036c2c7b0be2e6ece3583936832cf986dc64eadd058b1519a0a2ca898882a7dc3f96c93d75597408954c5cf0a5fa257c6ce86236796fc61beaf8f702c6e039cbc6e6a5806d14d1ff25c883f91f0c09a6fc433ef4439b3c5bbf75e6c8384b79f3ad306a1caa60ed14acba285d00011bbbf72635437e906d16996806fe45f4cbc3cd973e4692fe4d4681148256438bcc31f9d4b078954cacda31b89bff3dbb1b0ee670b410774cc296cc6cc2802eae96c3efb4169f2a85f71d756d549312cdfda2821d2b005dcfabfc463687a818b1d7bce55fcf138cd9aabf9eafb63017be29cc00d010629c9cf8d1dfdc95f84cab8993273aad1c357d4debea93bb8a1c071420a10acc92264f4e69aef8ebe12ead38560136b51d2371ab98d98244f53167221aa80bcf9a4392e7e20740a258a2965529e5f1b5657ddb9e5b099369ebf9e25083da76aa4ec8b618292138c182b531bb32a735858c18f429eaa02f4b22b32859943e67fe200ad8a22ab051226ebc750c5d8ce3603fff9b4234ba2567455e7a06bcf4eba08be7b14de595c86ff16683c09eb29646b4c625aee89b27abf6f41c0f7ba1bbff3e12967f4ce6dbc89004052f5df2f0f3e00f559db26e338fc41fc6b8953c08e596eaa7b39e9a5f9d9efbf33288a7a6bb53b741366a039b37849f409dcf85d9372cca03d7532485831c93877eda6007bc0f8b2f756f159b401ad90ef36765665c068ee67e66d996bf9efb098f664f326d3165ef54c8d9641e7a3bf317d8535da71fd0efbfc1dbae953e99ac8cbe371ee1990ade9d5287431ed8551b4424e251cf85d02e5745d4fcb9d3d18921bf2d39a106d1c39d065f7c05bd7dfdaaded9b7ba69603adc5d72796a6ec1dd3277c28d472beb61cf6caeb9322d314bee329eefe1e5cc367fb079aed3b36777b3ee31f98156b19a625d23c7caf8f602b4e4ac0bab5d90ece77427cfb3cc24b2f958d74f45ae76088cce72fecc4cdc50d1124e461ac2edfaf459f55e996c33bb2bc81a18346eee5ea411b1cd5ec26787e32d99c0d50d1a9cb6933787f1de7714e24247aac5a35656bd24dfdfc124dce1913ef7b83017b876480c4031014243dca4c615551e8282eb9dc7385a700e10ceb6bc372792ad5766d1db52a8cbf66eebb80780e4e48c812b7898acaa66b6086e0a7da4e7b0ab003e8da40f7e5feff4775a13ce69d6f972e6d998c4592472e01471e39e53b0f8d80d493b9e083d24b08975845800cd2bc74f30d795f4da5aa3601698b439d2419fade29cfc6638848d3753093048069cd3f7de529af416fc5d66123e8c5ec8f332fd29224b5c0fee1406c5bd0bbf343582ee87fdd42f14f7da975be42a0c924340682d51734b16df7bd3bec23fb5ca773b0ba684ea9c51e978b4bacd1d5925fd6074df219da0101ce04be8aa934ad6670ae87e0d08b0e75e9e53dd1a5c55aeb6041aee1e222e14ae66aa4722808334e0448adb2866d7694d0e8c0235d48ae7a991e762ce8d26ee8477609e9b491c5f0546dd453fcfa7601c441f65f2f7e61f37306551a42351d031bfff134a471bed194a852358a0e2fa2b6b0a3202141a5c8bee8c638f70479346166c1dc080ccd7ba796696e6cbbfba9690fe00f21f1882db94493ce95bf80c7ae3a8d651efc570a6e67ea69720e31b70b14cfe6bdf1a16c5259f2743bb5999bb5ac046f1a61c72538ef2db2b693c9f988c193fb4275db4781dcaecaf3a30d9e10e19f1b503a281dbafe5aa663ec67109077814fd9bb942fc078e0e7250ac0b181f76715e0873f6d5e5f5b10f9b8653d6e56025690c532bcd037f02967116c7e7bbb267a9cc517b95e5a51ebaa10ab96b5f884cd9a3699b028e511835059bde07178840e30520bdd2a2083a1962a3365bd873334cefa7f60e235fab7af721eb98fae61ea0d1bb13c1bd8f861d730bc86e97f0a7c5cf35d9ca19eb2f2d95ae71cf8f8e82a091497469181bcc42f212fba35f603e8de38345eaf2dd10d351c2d600efb491d6fbacceeeb4ac211a56aa99706c49a6a537f90be2954340c64f9eeb8443c49e789a800dc5299e0bf3804ea184f19e6f0b3b9c8dcce4d5744ffae0c6a62d128385b0227cf2541fc6dd774f72b607e8eea6a8685b95ad7a1955e528db6df81295c0d3fae6b27d0dea03344e0a3770eaa37cda1f94183c3a0d8195bd630dc4dcac8253131e2415de87e351e55e61121deb3e880396e79c67969be5bb998745949fac1735b64e3a1326f65c48cd28e59f137251787042208445810ab9fdec6552821cd5092b4f7f0f0f53002d844441d9bce8dbbcae74eeea5beb1741a1db0c5f72968ff217e65a23fbcc7a3c345bea408a5716bb2d9d36bcae43e79da86ee21d894123a9dbd8eb573aa6b2842ed82a9bea4a5ccbaecbc3467e52a47b347d3720e26a25a416647abd509b477cb52d11138f31163db432d4e5687924f7ef04454dd459227e1ce2fdc120a1711f249dde3c9570ab8fbe1e7902eae56d0a5f62bdb596471562bce984360daadfed84f01fab44b9a82c9f5a8f1518e13b355b0639509d09a00971b6c20d709cb7276c0f388d0a2db8d3292a34aafd37360bd43de40af9c19423f21435d9488db8436e2a38ddd9e86faa98132e01868f7312c4ebe55e4b2a45af1580b08ac1c0181e43d972f9c08672e2707d234c90c6215d857bf0576815bdd647aee8529e8b213e7bbe4fd46ea7d05229fa38173585080f6f8a89652784bf0ddecdb5f02f6abec13acebb52f0baec3316eef7d5d50acb85b8f4a1320b6bc00a0c8155ba500e6e3e558347e1eef3de50eb05799a37bd698100f096945964d6d9cbe196e104fe9a03b81a03789306a80843c3ad60089e9ba3dac97fc3006acce327ca1f5d8dbe4b5bb8a38b08ebd536ad23bf1169fb8f14b75a35990394c7e5c3011e65f3262bf95e06d86c60399943f0788025944d428762b86b40737126e183065ee80511f243d5fe560401cc31506babb263e12316058508579e6dde1516c8c9186ed6e18d250b6590a22e51a6745af402e5500b0bece276ea658e9b7120a72472dee21652eb4d20cec021f555443ef47f3f8f26fff97dd9859408f77463dc6356022cd5c57f46360f42b294247cecd2b0ec6b7e2d42e925aab5e5b69393e5c6d4ac15e99cf518caa69373b163e7c75c1d455763aae80b7cdbbdb84db345574a1380dfac046dd99f9744988e2b284c96e2da79bb2c01a225f5c34dee7e944bbf34a9566a335d5d762b43fbd88e7e013e064389980faba587d8ae5c55c451f5bbb2bceca514d9de708e08bcdeb6476e5693ca6dbca9228e1b08d563b6e4e8dffcd7ebe22309570d2f9d85b02e42889603a04e9341db8e6896e7f09fe5c0f0165f2d79aa63ad22bbb500d321eff6ef93ab403d5548bdeefb8dfab5369c9d6faf5587a1341fbb3a6539ef8f003a5d52ce56675fc41df569e073437b4b677ad1e1ae8e70b2506908254a6d8e009ccd4f05512714b18eb8a18000e89614af3b374ee1fc6e9f9807d11fd93b2ccca08e34d4c2541697806ea2b5b794d9071062d7546cd6dd82aac8b5a1afa2d8b739ef8625ef8c42c397e0b44d41df14bfeeed6bcfa2cdd1c2b330f4e36e34ba5ea3c8f3520d6b50c281bc008a398a6aaebfbaa47fd296f1c37963541eb575302638fb70e4784840145d9911136381bfc27bec3346ea994236238bc19108c1a96d7ac689e79891992f879b9c505b96ecc74a66cc0790170d3df1ea30e06a29c565fc772cd1fc60a0c5a0a35398d08f671e9799ee9747d93dc9b50c1f4324d0e973a407b054ba2db2f7f1b7fe35b1cd73709eb57d6cdc5715ec1a66e2da9e8064a30b6463ffd7220d5d3045f0eed65304d43e4160e4ae927d13e17f7405b8feb0fc14724548b4360c57bbd2877802349f79db548d22142c09820dadd3b627cfda83a31eca758276cf08dbf56e9a0ad8e68511167f83fa483e4fce8fdd3dd121cd1579f9cdcd8c179fdd779f43b01c97d756d5ba5819add1184d2083743413350c387e0e8ee88ba72e18fa395749dad428ed2b3bca9f1f6c2f29c9fb3246090b068405b5cac7cee7f850e4af8d1a79b85fe6aea40b57507029f4e791c5d3153e0525b10cd10ba8d7af0f87db11aa8c0bd74b8365cf48bc05585d7b2e05ffb298f91e5e3be7e01246f0a8d5bc145c9b167beacd867c6ff86ab11e61e1115e8f937facd9dc1d6a501129bc51523134c511d497a5b00697569e359571f0550da34927fdcbc39b1ff5f17ce4511d1eac81610c79cdccbdd2d7e82631034cb3f607511d42c3f72d3df86ceebb2df457f06e184c71c909b51057a953a31e2894397613712ac59c4af1906f620e3a98397c4377c13ba9ca3310ff3cd8e786d44f7d367c3dda0d7fa604f64f5dd8c4fe9304144400e88584f991ba899f0806c95c61880261942a0727eec54e1025dcabe04c658530b24170dbb3f815de81ed3c4577f5e7eba12d2eec70dda5a87f327cb942c0105f8fad4ff29c1dd0f20eb44d8afdfcd197a42a7e238611306da7d5bee9991a75be25d52c320592805b10abf42e235d1eca61493f9d2ff5da4b4bbbb102695b7cb0602397635a3bfe3af819f3d779c52fffb7d2ee8629adf138a35e33f6c88b6ed9af7ffd9a40544abc1f66254e0334f2f80055268f3ec769f059855225e34781ba66adcf17093f4b81c852218d0147eae381f2864ad950283071f8586048d2131659a2f55dbafd58489d782c5e74561c9753ad19ced00b6570ab69b88f5bbdd525319f98eb6359d08b3aefd0e784609c154bfea020cf06848c13bd06e7835c8f296a4bdfeeb8766a86c4ff0bfdfb2ec01d96f8bf9184ac727b59cbe9b08335d29792817beb23ee10a2ea155cd32da1f9714644d7c61dd1fedab2b7e3d513f3189868cb268370da1863219b6d1c1a0ba16e2f200b38e746ccee3d5d7209a2a4f0b877547b9bb3fbc361c0911f238126b93bef9a2de65c6183abdabef827c01b96691b688caf11961e2f24d341e27c473deb15c7c4fc9ae55864fb88a0e2ef0c89ff4bbccc4a24060d2d81309ec09473306bc986e255d9031c0ea8b5da33eacb359bec42a69a3797ee97c9bb3b02e28b6a58029c1b71d86e1c28ed96d4465657be5c006c057521dd76d2b5c414c0bfb03dffecc13b3c7857d18af3a230e3708daf5cbcd9d0b0e5fc7806c1945c6e0e57ec74fdd6eeede7a8d0bcbf89bfe43c4cf6c8daff43caa6cc2ed940ea67a1aaf632cec8942975c178a43735c0f99901bb9cf8ba81505b95ddb9e6a26693dabaab93987d2114e23e5bc992723b711225705662e2641dc29bee34ac91ea99878f6e3bce0d4ee36ef962f22d83939732235a8722dc5d5cb9640f2f673159e301d272301c1039ae7c20ded23aba6b6d5208d1f95aa2d3bf0ebaba6b16991112cc6b117361fd94f9ba4dab1e283b7a2eb52e8e3fb90f6856de6d354bb1eec0546f42f3c7dd115447146233d9108111fb5ae58df9481b4e9baa05b6e0621722a3be38fef94cb455de90e0396d6695195f9f6991c763ecee5d4c2ad9819e3da01676792ec17617498ef8fb069e6643fba8e38a4384e19e645a80ee6f3d2f95e3f7da515bf10707078eb02ac2cbcf4a3fb16f81d86ccf1b90ac1ac708a31a33337fd7a15dd35c067a3048b387ece7a69a05f30d7d44ee74a8cb8ea9b25438c9cc30de4da5c52f056d3c511939dcd6f14b7576668978b08ed339a49881174a9f5650422ff70c9e500accd272b62687726d9c8b669e757828f915fb15b7d9df7981f3aa87d22d0a341005f2beca01204ea8f25f8fd805d0346aa8b5d0c8cf4b9f1fbc3ef93633e677eefe7428f98b15a1facf1de0af183edbb86130ca364e44ccb262b3227cf3403482c3bbe76aaffa5908519b6d574f008a7e327f7e91c4e6029882b6e1cbd5dab2a9dbefcb2de866bb25043c74120523150cdca885986c2b4ac7b6313a2d9ccfc40f6bb64f225630b6490fed2042fa227f488c71cc8b9af22b645fffe2609ad9c70337ccb9bc793beffc5ddcd40c3f8c12818d66ea8479c63c0ab837b17f3ca942a420a2c8c12a394918339ec38ceb1d25c4f6ae797d6f22bb93a15c3d4d5652a00bfb633a2c6d37010a17f92c0c5337784c352426a2796d76f9f7b78f042871c9a8f0f5465c64c724c6c9b7a79e88a69638138062c597de060e264c28d3a7d64814932129676e9cf2a522f576736db1a1c92fbcee360e4ecafc0203a937a990f0fe5de9bf04fcdd9759cb3ad1a031055d35c28344d5c1821120aaa9191fef40f42616084e7d7bcd326729b0d486f5a8797a62f08106ad4b77c9fed2496ec745d57ca1fa423ebf75f4f255c97500c7fcc6291dd4a373a79ffe7fc57849b4d702906d3c882b2c777127dc37a78b4f0b8228ffcd0f00e5373bfa6a3a45aa5e6610d270ddee64cdd06750b666c1d494f0e4247802d5ad3c16b6e4b46774a3918a4de5b632b52de550088ba90fa6e39c4d7d9ef5122834f3e7f1611a2938093fb6f98e89efe3e78ca46dc3391d3a5d1bb712449f40caf9b71b5c64c940a872dfc2267e6019614b414acec4e33e06c80de79719057af4fc045909a21b3aa2a97f3a894dcfda9dea4b2b632e6bd1e9ef5ce8cfe5bba03f03f1ed63be44b16bb1682e87d3c05c58853726fafa5ca7c6c9cd84037017bb5ce1a6c88e377ef16b0de123fc61f0b3cc3092c90b59abec65cddf5f0f0f6b6885fa1e8a2e04e9cba177c35baa187dc19d0aba6efde5cbace592b51dbaf48641e35b346cbe954dfb4f39759dae720601036081815a60df9878f06a57b2206ea74b5eadbbbda23931dadd863be49a2fb3f1d51c78bce08869be0bb6d95bf515434a3a4f48cfc3443ff2eb688e70d51cf77b7b5a1f756c9479c674a253d84c98983b087006108417f0641419d7fd251f66416636a480a560d9e5a19c3fdcc2fa1e74d429647c35c1d63b34fbebc8555558645b38b9b9400cff58ffa7a69c9e5e6ff5314d77d2fe28ba874bdff8cec05e211d64533d1ab2b34cca5abcbf6cbf88eb30ab7b6082c21409836860265a8f231fec574f5c73aa777cbae598e2cd5993629f7a8734faf04aedc812bb9f176fb1b6b7706fd781535b2b84b911d3f268165d2c63842a5a58691e3291ca34b8712b17531fb9815555a6eca8b1540ca66be971dc21c081f5acab57c3f6ac4b497ca2c3aee0d66132c126d8990b416cf03332fc34d36984968c504fe3730bc1581f79344ca80c9f2758cd9d526798e7b7960f0d3fe687b54eaa2be7ce8d04984fc073e07f2bb58448038419ccad68141a37db5453f489e2543eb46618a498a33a519913539804a767b216927f6a15395f9564590c597e97a4d5313b7cae682a1ba6dab324cb13982f978785029746620eee178bb3c175a7fbad82d351913cf6aa448890c80d0fa1ef7ca54280b0fd876beebb1e99235daf6cfd0ca92f3ac908cbd2f288f00fa6bf03d89789f43c6792afa5f879e72324f5cc68a8e0ffed669cd6477be3c418e65854824f8dcf89ed608d4b6672e7c8041ca47d79490916a6c28a11476e4ba2d042e535be999738a72f27156b6b3ca2f9b57d8c0523aa6d0e293f11ca4a6a30fe902f07d3b2f06efb73df360ce73c0c72bf834b3ed79de895886d5bed790a44f94e314ec4fb18ac5465f366bdb7665489de2481884674129174e571091dae11bba0e14450b7ce82b9bad3914ceda2eb09ffd5d7a03b7aaf50bc50d8b2aedeebb02b80bc6ebd85857f6043d53f02f698d58c168c8b9d35d8d4d0703ecd36bcb60d1ea7d097d72bfe873cd4419e392af4158159bd27ae60cbd0430f74dde898d07940fda3ac48402105b6339b86164ecdf32a61bd8cb59096f785f340fd91c22f469dbb223f1e829fdc3ce7090f793bde158ca705a3a22249e1f08af0e93f0bf83fb15e6e03b644defa83e3f83b582d7a209e331fcb061debf68a99aacdde9b9a5c781e2f71f9b3f2d512095d213c476be17f56b1cf13957d536963f4133b54c0639cc070bac3205539737a741df4ee1aba1a8e1abcfa0093cd8faaee8778e201f0b52d8414ef074e61248757c18fddc5f79c3e6785b48eadb0cbbb74b95986ae22112f8eaacf125239516fc142aad8e003a8215240b17576a98545e2d19c5ca547dee21547e807bf619c576fcdd2fc39f6501758153958f3c4826ddf7e2ac44ebbea26de79343f80ba6a9f391f30ba1e915534325ddb1f483736d06d73c92cd76fec7633e5dea465f6dbe84714c3c6126108c2511d2aeaa242b7f0b0158e292f0110373096ef1fd82ab65e419346c13793e58e4d9051e34eed3dbf098c5ad7801c1107ad0cb57fa6bf19e87e7754db17d1df79301304de24e9903328e7968b2085d9f38f35e9e8578b4b4d3431adf2683d8bc75f32dae5039d63f6f609028256061105458ccb29cb167dfeb3019d93ad39bfe7bf22e1f4a0fa1bfad96d6439b8e06702970f944342f6f5d6e66895b12999846ad7b1c24255bb74f8c7bbbe247287b902419e546eb57f0b29b558fe53bf00ecb352780cda525df084277638e42969f2fb65f80092eab07555cf0d046bea371f5bd01b65ca25450d07d6e9e502556da6c135007d02594de6c35c68e5d545003863bb003b4f22ec1f46e35fb1d524d5e052b0f7e736ca1a9947c8196e3eb977c405b66f14ee01407e79097ccfd1c36074dcbde48ccfaff18404ca5911f8b6e0a53878318c2b3e5c13ea39bbb55ac2044b704ba6e9cb3c90d3d3453b64a0ef56ff4e553d984925e577fe57e74020bfe36da44ca7fcb20b250e727500d45ae7040db4a3565b0f3610c7c5763103813ea794bd5aad89cf58ce23157fca4c0d89dae36f959871f23a04697ad6d152b7d7e36f404a01dcc6899c51be7ec0208e5b14644bbb09b45dd2cb82314c0f903bf9751acffbcf4135d1fcf57bb9e4ad5c035ec3d257f5ea80677cad34da00b38f2e2f4a6c90a3585ee55c7469b25dbd353369b33a8c7074069e0f8889b438a8b665e4641fda01bd23b1cdabc3ca9f01cf5de89364e2cd050bf7566fef6f58452e8285e5aed18f91fec8f76b6dd2998f3cf76b11bbbb7e5f15335ffeb407fd297f441e497ddec762dfd91f93bc72ca933882dd274b0bd42eaa4728ca65744caac0c26cf9d319a59fcfe8a57d9440bf018796d14ebb3e5fa18e9da26cbc671a3835a87ede0e994779da23c4d53175b18efa92ce383551084926c21c147fbc4444f983d5044f4ebde61a816a4636064513f881457d2be467abff5f14d9a0ffa07a06b523ef3ffc13b3b97aece9bcdd42112f4178048ce05fc4ee0fdfabbfbe2a58ad6535dc49c8fff6e70cc7bcd339bdd2d8c089f3fd75b941fe9497a00d81b029f73f9bcb9d3b80f1a041e124f205afe595199b2cb6ea2daae9cb6ac160c4b27d3c56789274bc9e38b99097899cb7312a53dcb2476a93ced48689e88c4f60b22d5af99ab35f677100b6f34cff14d28cfac06de0482b64b5baf66aa02c078feb86ce3a9f07eaf28a75aba39b60d06b2426dd9fcd406f83e3d0b070c32951ad3237941bd40da5c6b738cdd94f5d8dcf4d73b0b569e3fbecdee5f5a54029c959d262f9b1bce1996c6a084c77714dfcdf8565e5b580e33458cba70f032a53c3b6ad9a357b50b80d509f5262a106350daf7add12f319764f7bf1c95220f4729e52e868fe38774a49ae89e7e646f02574042233b91097530a584fd53fce4c3a9389d48786f2e7ade766d9e00cfda8ed1426cc562e0f1db2e6569b7d9be5ae17d9cb2326ea8cfd60bad4b3073b88cdfb3fa5c0075c01cb00aeddb3c6a42b953df826df256ae23b7b0c05fd9aa849c871a45b17fb10c5af6d0f58925521babd2a472e7584c785ea13c590843fde6f99b7be5eb91e37718514d8f12c11f1866dbc1214ec007d7066cf5c5c1d333ef7c2ffacebb913a0c1eb6939f472de47509f3cfe2aaf465253ab28e275bc3ecdf54704f0603d843eb4ebe1d182aaeb45fb4fb99c2ccb74d961c2995252a52516c044819bb8b21209f3ff4f4a7621ed9e04a21dee3bb71cd593508f7ad7b18689c83046910fecffe82ef99677fd9998486dd1e79a0b8f2833a57c424f81fec35248c520afff592107d3aafa762f64772c5fe7e7bbcce590a1bff64f2913b53c54b287ffa79ed25f77de56a9251e819aa14c883a87713f7395ccb24bba3382c7a66a836e73515d279abd343ca76c7a3e9246527568e4778fcf2fcc19a693a1d2e3e234cab8acd7b02daec440d4dd953b174a786c2f40dbc82a41de500cd15ced66db3fa2a236a0fff6849f041e7504aacd4b34c855d71af6d51be9d1f84e71fdda0d3609cf4632919760e64c3d96cf6efc7eea10eb6044d83dced1c049bad6b3217aee137c4e53d97cf4db1e1eec1e48626fdcdf9468364ba5bfaa93c777168b60c958c3d87464d2fb7d2eb8b983e6cf68bef65ec982a5d8ea1ce2ff2726fb06879021bacb077f9a5ed2a3fe436dafade227d91a8b975e3d21dda74261ec009c374af508aa583fd74012f80bf6002a5b0ad3edb80090a63368046c8ba84b48563726f81c95c806e38139288a6cef3f6db8eff50cf8d97e6c3655c85783e944bfaff17e2b8adf9e68776a0a6caddadc2d5b9d6ab6d2d2f7b9da0b8aecd662858283c5e7bd6946f9e7fb54b5c78eba01a7b5f57a2ca5c362ea2ff24ea7e9e7ba3a698c55020e906018af4eddb8274e87a6a0afcc780b215335ac8bfc003d7e03a96a72fbb4aa42201c6c3800e942646f72e0a9121ddca75cfda1e4a742f89b711585c0f46d4a8f41bfd8de30592c47157276cb645fda2aa05a8e8a63a6b04a97df33d5aebf2ac1df4dc3843b4800a126733aba1295bb10fa53e6b36a808ab30c84f1ea0697360d6bd85d0c965834aac790d5a6f233ff105ad5e4b4ef01c638e8098d6c9090a92418fdc5b75689612760cc473c12553905cab82250212d796c0d7cf148cf2c31f6e8415840e81e18dc378610d316fa5129f7c99feaec4ec4468ca1d6b163acb3eac67d289fd2c9c67481c1898ac858b285e9bf3f1fa5080a8707059811a320c08b932fdb33c56fdcde8475fba655fbddf7294a0a9c093179355c1313499d6056278a23f67890bae4387aad84419bf12847a8a6ec7f18f112844a6c1b74384e0d1637c67671a09d5770fcbec026b0b2ec07cd193a3d80de01606807bf6955d151bc9e7eb60b0d2cb839e5387298d600f68396aeb157c45a0dadc4fd549e9342965f75607e208cc014ad13780c5ee60d21d69f298b704ac06ae4917ee180f72af5ab33e0c797be6785a1691f066b8d81f90d95741bba3239acc9f1f32fea3d7f7b3a85d4052570a47d48ae94a9f8e33b0b7dec3ef20735ca0e7c83c2bf220955ba63d29cda748d093da1e60d7a028396cbbfe3395cfb3a87ca8ea8081b189f60452c6a2366dde8f9f5bdba657849cd67e44988fb39050c220da3eb4dc9370fa387e16fbe547dc6a62659316bb04472fdfde4865cb3e66a6fae081a2e2012434091e9ba8282882851a61a892d8ad1593d432710dfb81df6c6c320d5abdf7b91655dc08be686106d512c86b6aaf3a5bf852e7765997645512c9f5c8d2c7beabe4faded28c89bb73a4c9888969200eae75b5479923916a4d4ab7a43ae56dbc3448bde9ab71acf88cb5febdc80acabfbda7ee59b71de48c054d715fdd295d2b3504011a7038dd9714d6e7fbc41be677628d9fa0567ef20568b9a5659628a38e1647b80897042d3bcdc66cb0a597289a193c919b8bf256abf7f5c3c97e44d0ad1d8152af6ca5750868c577a5f055b2acb005c372d63c1b9f9627fd21adf1455cb8df6ba1f3ba3b7ebe80441299fd40cc86c063ede86ce4eeab1b4eed1b2631af256b7f577cebfacc9506f8fb2a7add103f7df23720379ec387fa0fbdedde934ea38de550720813c1919d8772bf5f823819c6c50bddf72f23647b19cbf5d909d5dac7e7c6746f926ed77bb665de97def244d7cf3b98953d0fb4a519e3b98e5bb3d55eaf50f2644df52fcc1d426958655e4c06709958e22f0b591c490e7ebe9061f9b0eb40d451400ccdaf0e29a3de4dc4f255ae2470e18df2ef57b284e9f6f0f7d3549947ab18376017acfcacb933ed22a81c3d65ebb57b656eab03e43443daf03508682f3c3ed88a8bef175bcf65cc1d32fbb80e8899040a8569871c574d269cbdac7a935e98198517b8ca2effc837772a2f7936c9d4e5584d984086cc92349b803bef816abf07719a609da29f3833d1c7e28a64143a5e50725d4fb19cbfc03f9fd4bc2a411863f10457f8d63e2687be112cc28a074d147fb3e18915d2469e624d91184b8b24093734a375ad5ac9ae26bba63dadaf085a8afd4e0d16838b98eece19db6a0c0af84ed0595a1d5b322b6052d472121565ddc959cf2857f45136db0d971abcc14bb8c63467a6a177119daed249653f6cc633b0013ed7a9486021170bdd93d58a5025eb5a7d5354408ce60b17c1c88006f7d018179a914b9936300409ad57350a096434ae1349ed6df23d7e4845860b46959f24f70090fb2cff0145113888ce67cd499c4fca82bff5c79328ce5cbb954902e535a4edd31bbbdb5a25f8c2d7ce6d65da8fb422a56658a09e8885546c4f9db0e16cd9daf416633c6c6da48da17c99d41547c486c02529c4e9a2e42d934af3832f026880acc554cce6d5b1dbd0963397bb0406e51c0384c3372017b08063328383a20fc27d64bb9e64af4cf955231bcfa6166420f170b6e3015cc355e2a955c6bdcc7c393244b78f308f79ea4b3f4e02df024ea2bef74bf7320e2262bf2939641acce040b32ebb0255919172f2be6a9debe2caa8ef606590f7bb66e28afb0c737e8d8dac20704b62c2f25bbbbe2219f7dcb28f0683eac1e05c9e17117d96d92c24268a31f69270cd5fc45d6d2888f468ce4546eddbb83e21ea38eccb2d04486f9da80f5736db29ede7142c28377ab8d29dd7f5eacaf1622c16651e0a31c4ccf99de62b47e168bc169f36c43ed1b3217969837803d15eb272d687837c94e8d6f6cf31c3dd1bd8e3f9f3c8652abfc83a9abc82b3f108d908c48aea8ddb9ba34150f34fe01eb2e0773ef73281437707f83a09a0b4d552ac467e7f88576da52cc691b1a64c6e7eb8e15b35d129112151c45118b894a285dd3138738c52fae7d261661b3b1ee1fcdb829b4418f1667915040cdf24f7d450550282a212709ff9b4290591b3443a7f6fe10975eca819f21b312e206eaf62536e685c69f11772e30517f58e832024313a59c5708fa62537c6a19147aeef8d1013f29eed0419ced81ef3b8cf0d210b4e208fb0a35271dd21feedc8293f91c416e1e14238620884c27723a6617236ac932684c5c0697575aeafdb55bc37a22f01c0935bf462687b9c267aeed4b3df5cc5a3d369b6faeceb3c124ab4e94050eef1307ec41183254c6e8057cca8b096672d0b46118ecd623489559247c87df6171f9af0e3efb9dc121d02e7938eafb56b2bbf88c57405ba7be5f509a102c76f159997bf0ad794e396832c8283e131a7792d4a593858896b3dd6969031437319c3dcceb53366edb9c3988b51477bbb30825c18eb0cda2eb4ebf1a3297bb540beb102ea83521d325eb44eaf090c25a01b3ea8c71d85676a6814dc994251e8303f9479a41a049e6a4efdb97e508e1b2324b6a863056ffeae493c5be38d0c6a770c1304154815a024feb5e7e01b198e363f7860ddd52ba8ed42c08e6590b792d710d43f079eb1309fb5743bcc63af12f320802c72a427ad694f4750f2df24a18e0b667733da5cb2790e1e2979fb02e5a93c1f22242ba37719eff04c4e90e575c38281abc065d8eda5b5f41dfcac824ce2932664643c4c708e4de005754ae45d8d68018d6b064f9507af2cb4fa299626d95666ad1d53e8940506eb515023184805a1120f083cecc81e13a5768b0dc282e4dac879061a8ea199d97047aae5b21e8c7f4e2b2f4812cebe626690f4b0eca03fb2e5cdd402df76fef96fc59acf0890266d50cb20483faee1bf6d7a33afd3dae2ae0cc296f1b9432d7f8e9d4c1a3d53e3d9188a384d1a4cb02179105fd0e72b6f13d7906dbe61994d24797a52089237fad42a99c606672b8642c534c605eda667b80feee71de6ed0150a723435a9010c826859da21d593c9d0d8d13f19a499e30a03eabef553ed2c6c796e62e58d63a1cf8d32224aa3d3a435cf4217d43d92f32067b5fab5ee033d4147f75c766f04189fd126a3a92d1497a0fea7c28edca75b7dac79640479689244484a98a3eea2c2dd2cd5718a6f7c3a3532f3ef85fca9d57969003f450687d3a6123b9ca295a6d4517b1819ec17e01e6672b06587ade320635987273a41c5bbd28485a3ecfcd9209b633e6ab53d9991909abaf4e457d0db4010a7614c08c70a824fd01ddfdda8cb20d99aea610762b42904abc0068ee24b749146ee58404e5eac320e2737b4f084a9ed27508f1a9a96c1ea0e27f91da1bbed9c191a6fe29b577d9f76242d25b99680f74204dfd3638e54318f1f92433c51766380b3534de5afafbd2ddcf15831a0ab87016c38d443b56dcc0bf5cad0cbff54faa87dea29a1c38d5ce8a99528e6da3cede37f438a3ad9c89f7337c6d18dfc5d8ad8ab24ce7c76e756f2c2809a5329cdbaf2bcc8519f642aeaacaa2230377c2cc94a7e6c7dbfc6bce7e4dfcbbd5b153147c68637cf1914cced812e51c699d54d3d664cf95ee375182e7d65f47fcf21c82bee529d9c5ccc972fe2b5e94f67ddf44138fa8528aa218f846bc566cd2a28539a45db63e3c69445a15b4fdfbd2c3cee1c3031106252a154813bd409a956fe2cc43eccc82c9db4531794f8278277a5b5ff4e220c0b78bdb1bcfdbf1f07df1ee05fe1eca831169f1987d8e1bcd4a4311e6730231fc03e1f8a2359f4c32f387615ba66e7a7e02d750ebca0c83c2b92dff6d7d3314c535122a831db54b804f8a84c65962589bb80e78a8d2da96d95b3b925379de56fbcad488fb76609ee0170cfbc415b59d128a5c0ada0ce05e1942ee17ea02a266a574859239a0b3f372c890cdb1191640c313ff8d5d119aead337564fdbf3eae4c3ae063003d71f75ed0339637c45790dd407229bf6db6862d544a6cfb8653851c409f251ef86619e5ca8a2f70420559d9c4fe66ea7d36df7f763e9b9e1f0fcfaca31040b786a1515ca1402dc3560e9163964bae88bb0988020bdaa399c99a37c36a2b6580c0f843b99ecd6aea5d6be452c77a1a32d139bbdf5259c106cbe52c797d0bfae5e587f8f11be5f3006b0ca906e2b35a24cfc3b3cff4da0fd2b43f886f63c242282e2a6c4cd6337a655bc312f433af991d35c2b90dddd34c075e256d2a0fa9500549d4dcced0296fef07676a34d95fe82164a9e756064eb8e12f636aeb4e7cd0ad7bbd3f7473412334d2d3c95d5d64062d6c74fca8f912ee61a403d2661dcc0f7a6bf644abe1eec6ad5d6f89253163061c118d8b134c645d55e86fd95e8c18eede21e0ebb20576a9c7d434db08c684dc84bca20571da1645efc5e60285577be48d55c1eebc38c9581e5104f48f094197fdba13e0b07bdff4e27a7a60300635eb0e598f016b0204ddd9d9665fa33defe4940a2cd8213e769d84dca33e025323d8bc4261cb7c73c3161bd56d420c67850b6abf01d0874ebb4b30f62ebbda355a0b12b0323e6ceb1e0e8ca76ffa0d1194b11a3368313bea7010f2a4f5b14ca03a734a093e00c967f0e96393c5671e1ce721d68ae010113db8e1cc203e3e5c9c70008e3716dfe99194d2423ebed57ce941cebe4401c3ae73f2cd4c237ab9e5fe70702c1e30791af7cd228b27ec89aac4006654d24a38f88cac69976d9bc5fa8494cc1139ba369d020e45a31aeed18b60382a5b8d696edd59e7d701c62a5f55f97d3a58c0eefa7b1d590185b3495bdab824cf242c0ed14dbb3b8c1c0608d7ffa0f68395583f9052b819a4b25c653cb6708750cff28235e21ca4c8ed0c06f090aa457e997f52bfaf5ac8c687f73624fc82e552ff0f3496f38d7c7ade2ef92d8689f8ea4a2c48f72ef6e7d2a2e4b3a88eb7839dbed7748d4d77229288b4c8bf22aa81e548a7e60c2a9487e3c8549b2ae9ecedf2bd502187da36b09a56d8605d28213a9fb1f816307d8da0336c311cf6395aa797c08191d785a6607a42481aa687db9fa1119fa8402f60752bee7c1087071240d653efd53a756e87d45809f5b688ffecfcc11cfdeb492ff1adf4c3250186460f9eb8d39652e1b3490624e66984b462df6dc0aab29edd5df5ccc6dde13831e9a803220e256ddf095a623be12a28f8ccbe81dde0b3c6e6bb91887edc21414558a7a28d6bc4c0e50e3d222f7f5953eca786ff7640b4e61603ee851381c7b83c49deedd931162df7ac93ebbbcfe12bcb49bc7ed25d2e02285de3e10e04aec6123f860ae0d81c3bc58ea94bf04e55f12eeb6a40fbc9789470732fce2c47a9fe8a99370b548ebf42988c0b5a359acb14fdc6aa3aa595de92605cbaba09b01f4ae7338932fd0e60ce431b59ba518fb4e3d9d1023877e943f49293102957b753baa742f49a70a5833d26f52873edfe1826ac8b73dfbb1f486595aeb44fe2e1abf41da9788af504248de1bc571dd702300ec9d607c1ce005a6bfd584ce7b6c1a8e97009650c10926678e84d920c2c110af2286955a329e049b270f8d2f7264f30f4f45f70082752b77320a7ce071ffb675ed6282703727a5b4e8a35e188c8268dc4bea3a39834f7f3271bf2be5ce0d9e861d15b0d7ec2623ec2207845b7efaa5e4c6ded30a1e4310899712634eaddf114077a99decd00cbb1ce5e74f85b8968f73b04f0431baf5729590757b7e92f080d9c8a6eca62c5e80ba5141743c057d378960ddfd4059406ed4d6615ca85c973705b6dd297f5f18f379862b5b648efadd34f7227b6b1bd925565defb0c4f9b27189c53b16214c978671cde78998f7817deab98183a27fa92c1242b1186e4e5ff629844fbaff02cb85a16f7de3c551ec610c9110a6ad8ebe4c1aef50f77dc03a1ce13a1a809325cb01bcf4a055080cef11791adb5dfeb468d238a06023507553ed6499414544c33d8bd093afb9e745aab1b62c74558fa40488aad97a626f0e37655d0f6c4001d337c468e4432abf76cf11c0323657bbe795ad8e3abca0ce595d971301f51b7725c678a754f059289d8168cc6f6ba20ce176d8c44fd847ce97cf1efbe100e1b58bd8a69f46ef836c51b3c6b780e8d53d799</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章加密。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>金融投资</category>
      </categories>
      <tags>
        <tag>量化交易</tag>
        <tag>程序化交易</tag>
        <tag>股票</tag>
        <tag>投资</tag>
        <tag>市场</tag>
        <tag>金融</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github个人网页制作</title>
    <url>/2024/03/04/1_2024-03-03-Hexo-+-Github%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p> 作为第一篇文章，就讲讲这个网站是怎么做的吧。 很早就有想做一个个人网站了，但是无奈不会的太多也就打消了这个念头。不然还得从头学一些奇奇怪怪的JavaScript和CSS相关的东西，这对我来说可就太折磨了。但是，昨天聊天时朋友提了一嘴：“你们没有个人作品集之类的东西吗？”， 我说还真没有，但是又突然想到了个人网站这种东西。想起本科时那些教授都有自己的网站，我就又去搜索了一下类似于“个人网站制作”的内容。 没想到居然有现成的库可以直接用，那就是Hexo了，甚至还配有各种主题（theme）。时过境迁，现在一切都变得那么容易，都可以一键生成。</p>
<p> 跟我说，谢谢你，开源侠。</p>
<h2 id="第一步：配置Github"><a href="#第一步：配置Github" class="headerlink" title="第一步：配置Github"></a>第一步：配置Github</h2><p>使用Github的原因很简单，对于个人用户它提供一个免费的user page，完全可以当个人网页用。</p>
<h3 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h3><p>此步略过</p>
<h3 id="本地生成id-rsa和id-rsa-pub"><a href="#本地生成id-rsa和id-rsa-pub" class="headerlink" title="本地生成id_rsa和id_rsa.pub"></a>本地生成id_rsa和id_rsa.pub</h3><p>打开一个CMD终端（或者windows下推荐使用Powershell），依次输入</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git config --global user.name &quot;Github用户名&quot;
git config --global user.email &quot;Github邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh-keygen -t rsa -C &quot;Github邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>例如，我的github用户名是 <strong>zcpisme</strong>, 用 <strong><a href="mailto:&#x7a;&#99;&#112;&#x69;&#115;&#x6d;&#101;&#64;&#x75;&#x63;&#104;&#105;&#99;&#97;&#x67;&#111;&#46;&#101;&#x64;&#117;">&#x7a;&#99;&#112;&#x69;&#115;&#x6d;&#101;&#64;&#x75;&#x63;&#104;&#105;&#99;&#97;&#x67;&#111;&#46;&#101;&#x64;&#117;</a></strong>（我编的一个邮箱），则在CMD输入</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git config --global user.name &quot;zcpisme&quot;
git config --global user.email &quot;zcpisme@uchicago.edu&quot;
ssh-keygen -t rsa -C &quot; zcpisme@uchicago.edu&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>按回车，如遇到y&#x2F;n，输入y回车</p>
<p>结果如图</p>
<p><img src="/../images/1/1_rsakey.png"></p>
<p>将生成的id_rsa.pub用记事本打开复制内容（在我电脑里的位置是C:\Users\12427.ssh）</p>
<p><img src="/../images/1/1_rsakey2.png"></p>
<h3 id="链接Github账号"><a href="#链接Github账号" class="headerlink" title="链接Github账号"></a>链接Github账号</h3><p><img src="/../images/1/1_gitrsa.png"></p>
<p>github账号 —&gt; Settings —&gt;SSH and GPG keys — new SSH key</p>
<p><img src="/../images/1/1_gitrsa2.png"></p>
<p><img src="/../images/1/1_gitrsa3.png"></p>
<p>title任意（建议你的邮箱），key粘贴刚才复制的id_rsa.pub里的内容。</p>
<p>自此，Github连接完成。</p>
<h3 id="新建一个名为username-github-io的repository"><a href="#新建一个名为username-github-io的repository" class="headerlink" title="新建一个名为username.github.io的repository"></a>新建一个名为username.github.io的repository</h3><p>在右上角的加号处，点击New repository</p>
<p><img src="/../images/1/1_gitio.png"></p>
<p>repository name 输入 “你的用户名.github.io” <strong>!!! 重要，一定是你的username.github.io，且一人只能存在一个这样的repository，且设为public</strong>， 点击下方create repository</p>
<p><img src="/../images/1/1_gitio2.png"></p>
<p>自此，github配置完成</p>
<h2 id="第一点五步：拥有node-js"><a href="#第一点五步：拥有node-js" class="headerlink" title="第一点五步：拥有node.js"></a>第一点五步：拥有node.js</h2><p>有人要骂了，说哎呀zcp怎么这么啰嗦，这还有个一点五步，还不好好打1.5。我说停停，我的目的是手把手教学，我也怕我以后忘了从头开始整理网上的教程，所以还是啰嗦点好。但对于这部分也只是告诉大家要有这么一部分，并不会在这里细讲。</p>
<p>node.js是一个JavaScript运行环境，我们之后的配置离不开这玩意。</p>
<p>安装教程参考：</p>
<p><a href="https://nodejs.org/en">https://nodejs.org/en</a></p>
<p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p>
<p>其实就把msi镜像文件下载安装就好了。</p>
<p>安装成功后，可在cmd输入查看安装是否成功</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../images/1/1_nodejs.png"></p>
<h2 id="第二步：第一个Hexo个人网页"><a href="#第二步：第一个Hexo个人网页" class="headerlink" title="第二步：第一个Hexo个人网页"></a>第二步：第一个Hexo个人网页</h2><p>来力！有了以上的配置，接下来的一切都变得傻瓜了起来，既不用自己手搓网页，也不需要什么编程知识。</p>
<p>在上半步之后，我们可以用 <strong>npm</strong> 来管理node.js里的安装包。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>输入以下指令即可，</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>例如我想在D:\desktop\campus\personalBlog下， 创建一个文件夹叫myFirstBlog用来管理我的网页，在cmd里进入此文件夹：</p>
<p><img src="/../images/1/1_enterfolder.png"></p>
<p>输入</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo init myFirstBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以看到</p>
<p><img src="/../images/1/1_enterfolder2.png"></p>
<p>myFirstBlog已被创建。</p>
<h3 id="打开个人网页"><a href="#打开个人网页" class="headerlink" title="打开个人网页"></a>打开个人网页</h3><p>在刚才创建的文件夹里，启动服务</p>
<pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/../images/1/1_starthexo.png"></p>
<p>也可以如图 hexo -s -p 4001来指定端口用来调试多个网址（默认端口为4000）。</p>
<p>复制 <a href="http://localhost:4000/%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%EF%BC%8C%E5%8D%B3%E5%8F%AF%EF%BC%88%E6%9C%AC%E5%9C%B0%EF%BC%89%E9%A2%84%E8%A7%88%E3%80%82">http://localhost:4000/到浏览器中，即可（本地）预览。</a></p>
<p><strong>于是，恭喜！你有了自己的网页！</strong><img src="/../images/1/1_starthexo2.png"></p>
<h2 id="第三步：-稍微等一下（发布到Github）"><a href="#第三步：-稍微等一下（发布到Github）" class="headerlink" title="第三步： 稍微等一下（发布到Github）"></a>第三步： 稍微等一下（发布到Github）</h2><p>当然，我们不能仅限于本地预览，我们需要将我们的网页发到公网上，所有人都可以预览，于是要如下配置。</p>
<h3 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="_config.yml配置文件"></a>_config.yml配置文件</h3><p>在刚才的myFirstBlog文件夹下，有一个名为_config.yml的文件，用记事本打开。拉到最底下#Deployment处， type为git， repo更改为最开始repository的网址+.git，branch为master例如：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span>
<span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span>
<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zcpisme.github.io/  <span class="token comment">#修改为你的网址</span>

<span class="token comment"># Deployment</span>
<span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zcpisme/zcpisme.github.io.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>最后一步了，在cmd中（依旧进入到myFirstBlog文件夹里），输入</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>即可等待文件上传至GitHub，几分钟后，username.github.io 就是你的个人网页了！</p>
<p><img src="/../images/1/1_gitiofinal.png"></p>
<p>是不是as ez as ABC~</p>
<h3 id="hexo常用指令"><a href="#hexo常用指令" class="headerlink" title="hexo常用指令"></a>hexo常用指令</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo init [folder] #初始化hexo
hexo new [layout] &lt;title&gt; #新建新文章，所有文章需要为markdown（.md）格式，默认存在.&#x2F;source&#x2F;_post 文件夹下
hexo generate #生成静态文件，同 hexo g
hexo server #启动本地服务， 同hexo s
hexo deploy #部署网页， 同hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>在个人的使用中，一次次更改部署，一条条指令输入过于繁琐（甚至会漏掉某一条），所以可以创建一个sh脚本，每次跑一遍就好了。</p>
<p>例如，在myFirstBlog文件夹里，新建记事本，输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># Stop script on any error</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># Navigate to the Hexo project directory (if not already there)</span>

<span class="token comment"># Clean the public directory</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Cleaning..."</span>
hexo clean

<span class="token comment"># Generate static files</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Generating..."</span>
hexo generate

<span class="token comment"># Deploy to the server</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Deploying..."</span>
hexo deploy

<span class="token builtin class-name">echo</span> <span class="token string">"Deployment successful!"</span>

<span class="token builtin class-name">echo</span> <span class="token string">"Press enter to close"</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更改文件名为deploy.sh， 在每次部署前输入</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>即可</p>
<h2 id="第？步：稍微等两下（可选）"><a href="#第？步：稍微等两下（可选）" class="headerlink" title="第？步：稍微等两下（可选）"></a>第？步：稍微等两下（可选）</h2><p>想必有朋友非常之激动的打开了网页，一顿欣赏。而后发现网页设计是如此的单调，心中暗骂：”这不坑人吗，果然便宜没好货。” zcp在屏幕前打了两个喷嚏，再说了一次停停。</p>
<p>当然不是，真正精彩的地方来了，世界上用爱发电的人如此多，以至于hexo也拥有种类繁多的主题可供挑选。</p>
<p>此处<a href="https://hexo.io/themes/index.html">Hexo主题</a> 可以挑选心仪的主题，从简朴风到二刺螈应有尽有。目前，网上<a href="https://theme-next.js.org/docs/">NexT</a>主打一个简朴以及有极多的插件可自定义。这里，我们选用<a href="https://github.com/blinkfox/hexo-theme-matery?tab=readme-ov-file">hexo-theme-matery</a>， 一个非常漂亮的主题，再一次，感谢开源侠，感谢<a href="https://github.com/blinkfox">闪烁之狐 (blinkfox)</a>。</p>
<p>选好主题后，下载源文件（git clone），将下载的文件拷贝至myFirstBlog下的<strong>themes</strong>文件夹。</p>
<p>同样，在_config.yml配置文件里，更改 theme为刚才下载的文件夹名，例如</p>
<pre class="line-numbers language-none"><code class="language-none"># Extensions
## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;
## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;
theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>再次发布，可以看到网页主题变得奢华了起来。通常，每个主题有自己详细的文档。</p>
<h2 id="本篇结尾"><a href="#本篇结尾" class="headerlink" title="本篇结尾"></a>本篇结尾</h2><p>自己探索一个未知的事物是快乐的，并且在一次次试错最后成功时，内心是极其愉悦的。</p>
<p>感谢阅读我的第一篇文章，请多包涵，并欢迎提出建议！</p>
<p>下一篇我们来谈谈我对matery这个主题的一些额外设置。</p>
]]></content>
      <categories>
        <category>个人网页</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基础进阶设置，2024版</title>
    <url>/2024/03/06/2_2024-03-06-Hexo%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p> 在上篇我们搭建了一个很基础的网站，这次来看看我个人有哪些在2024年要做的配置吧。</p>
<p>事实上，在<a href="https://github.com/blinkfox/hexo-theme-matery">原文档</a>，以及博主<a href="https://marmalade.vip/about">lijunliang</a>的文章里已经有了非常详细的说明，想必也比我这个门外汉再写一份来的更清晰易懂。</p>
<p>但是这些文章也许有些年头了，有些地方在2024年可能需要额外的配置，这篇文章会简单介绍我做的改动。</p>
<h2 id="1，代码块highlight"><a href="#1，代码块highlight" class="headerlink" title="1，代码块highlight"></a>1，代码块highlight</h2><p>在原文说明highlight代码块的地方，原文如下</p>
<blockquote>
<p>Starting from <strong>Hexo 5.0.0 version</strong>, it comes with support for <code>prismjs</code> code syntax highlighting, and hexo-theme-matery has been modified to support it.</p>
<p>If the plugin of <code>hexo-prism-plugin</code> has been installed in your blog, then you need to execute <code>npm uninstall hexo-prism-plugin</code> to uninstall it, otherwise there will be <code>&#123;</code>, <code>&#125;</code> escape characters in the code block of the post.</p>
<p>Then, modify the value of <code>highlight.enable</code> to <code>false</code> in <code>_config.yml</code> at the root your hexo project, and set the value of <code>prismjs.enable</code> to <code>true</code>, the main configuration is as follows:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">></span>highlight<span class="token punctuation">:</span>
 <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
 <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
 <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
 <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token punctuation">></span>prismjs<span class="token punctuation">:</span>
 <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
 <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>然而实际情况是，在2024年Hexo已经到了7+版本（cmd 输入<code>hexo -v</code>查看版本）。在官方文档中，新增了<code>syntax_highlighter: highlight.js</code>配置，所以在此基础上，需要将根目录的_config.yml文件highlight处更改为：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs <span class="token comment">#声明prismjs来启用</span>
<span class="token key atrule">highlight</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">prismjs</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>前后效果如下：</p>
<p><img src="/../images/2/1_highlightcompare.png"></p>
<p><img src="/../images/2/1_highlightcompareafter.png"></p>
<h2 id="2-代码压缩"><a href="#2-代码压缩" class="headerlink" title="2, 代码压缩"></a>2, 代码压缩</h2><p>在<a href="https://marmalade.vip/Materysettings2.html">此文章</a>里，作者使用Gulp实现了代码和图片的压缩从而提升网站速度。但是早在2022年后，有一些commonJS的package完全移到了ESM里。例如原commonJS里的<code>del</code> v7.0.0，不在同时支持commonJS和ESM，而仅支持ESM，<a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">原文</a>如下：</p>
<blockquote>
<p>The package that linked you here is now pure <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">ESM</a>. It cannot be <code>require()</code>‘d from CommonJS.</p>
</blockquote>
<p>对于这些ESM的包，需要使用import()而不是require()。</p>
<p>因此，需要在原教程基础下，做额外几步：</p>
<h3 id="2-1，-安装esm"><a href="#2-1，-安装esm" class="headerlink" title="2.1， 安装esm"></a>2.1， 安装esm</h3> <pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install gulp -g #安装gulp

# 安装功能模块 
npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save 

# 额外的功能模块 npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --save

npm i --save-dev esm -g #新增，安装esm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>并将文件名<code>gulpfile.js</code>更改为<code>gulpfile.mjs</code></p>
<h3 id="2-2，-将require-变更为import"><a href="#2-2，-将require-变更为import" class="headerlink" title="2.2， 将require()变更为import()"></a>2.2， 将require()变更为import()</h3><p>在gulpfile.js最开头，将所有require的地方改为<code>import xxx from &#39;gulp-xxx&#39;</code></p>
<p>更改前</p>
<blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//css压缩组件 </span>
<span class="token operator">></span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//js压缩组件 </span>
<span class="token operator">></span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//html压缩组件 </span>
<span class="token operator">></span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//html清理组件 </span>
<span class="token operator">></span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//图片压缩组件 </span>
<span class="token operator">></span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文件更改校验组件 </span>
<span class="token operator">></span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//任务 帮助调用组件 </span>
<span class="token operator">></span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//容错组件（发生错误不跳出任务，并报出错误内容） </span>
<span class="token operator">></span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件) </span>
<span class="token operator">></span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//是否调试显示 编译通过的文件 </span>
<span class="token operator">></span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token operator">></span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">></span>来源<span class="token operator">:</span> Marmalade's Blog
<span class="token operator">></span>文章作者<span class="token operator">:</span> lijunliang
<span class="token operator">></span>文章链接<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>marmalade<span class="token punctuation">.</span>vip<span class="token operator">/</span>Materysettings2<span class="token punctuation">.</span>html
<span class="token operator">></span>本文章著作权归作者所有，任何形式的转载都请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>更改后</p>
<pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">import gulp from 'gulp';
import debug from 'gulp-debug';
import cleancss from 'gulp-clean-css';
import uglify from 'gulp-uglify';
import htmlmin from 'gulp-htmlmin';
import htmlclean from 'gulp-htmlclean';
import imagemin from 'gulp-imagemin';
import changed from 'gulp-changed';
import gulpif from 'gulp-if';
import plumber from 'gulp-plumber';
import gulpBabel from 'gulp-babel';
import es2015Preset from 'babel-preset-es2015';
import &#123; deleteAsync &#125; from 'del';
import Hexo from 'hexo';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其余部分保持不变。</p>
<h3 id="2-3，部署前启动Gulp压缩"><a href="#2-3，部署前启动Gulp压缩" class="headerlink" title="2.3，部署前启动Gulp压缩"></a>2.3，部署前启动Gulp压缩</h3><p>原先部署网页到github的步骤为</p>
<blockquote>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo clean
hexo g
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>现在为</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo clean
hexo g
gulp #启动Gulp压缩,控制台可查看错误信息
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="3，-中英文个人网页"><a href="#3，-中英文个人网页" class="headerlink" title="3， 中英文个人网页"></a>3， 中英文个人网页</h2><p>这个需求到现在没有一个通解。在hexo提供了一种叫<a href="https://hexo.io/docs/internationalization.html">Internationalization (i18n)</a>的解决方案，其本质就是在source文件里分别创建两个语言的文件夹，然后再把文章放入相应的文件夹中。然而，但实际操作起来的过程中，尤其在应用预设theme的时候，会遇上种种困难。有些主题，例如在<a href="https://github.com/next-theme/hexo-theme-next">NexT</a>里已经适配好了语言转换的功能。不幸的是，本文用的<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>似乎没有这个功能。当然，大神们可以通过魔改实现功能。但是有没有更简单更傻瓜的办法呢？</p>
<h6 id="0，当然是直接右键谷歌翻译成英文咯（误）"><a href="#0，当然是直接右键谷歌翻译成英文咯（误）" class="headerlink" title="0，当然是直接右键谷歌翻译成英文咯（误）"></a>0，当然是直接右键谷歌翻译成英文咯（误）</h6><h3 id="3-1，-初步设想"><a href="#3-1，-初步设想" class="headerlink" title="3.1， 初步设想"></a>3.1， 初步设想</h3><p>那必须是有的，其实我们想要的无外乎就是一<strong>套</strong>不同的界面，那么是不是可以理解为，主界面就是中文，然后在网址加上一个例如<code>/en</code>的后缀，转跳到英文界面。</p>
<p>换句话说，我们直接建立两个仓库，实现两个网址间的相互转跳就好了。</p>
<p>很幸运，github的个人网址里，虽然只能一个账户只能有一个免费用户页面（user site），但是页面却可以有很多个项目页面（project site）。</p>
<blockquote>
<p>例如，<a href="https://zcpisme.github.io/%E6%98%AF%E6%88%91%E7%9A%84%E7%94%A8%E6%88%B7%E9%A1%B5%E9%9D%A2%EF%BC%8C">https://zcpisme.github.io/是我的用户页面，</a> 而我有一个项目叫myProject，这个项目的网址就是<a href="https://zcpisme.github.io/myProject">https://zcpisme.github.io/myProject</a></p>
</blockquote>
<h3 id="3-2，-第二个仓库"><a href="#3-2，-第二个仓库" class="headerlink" title="3.2， 第二个仓库"></a>3.2， 第二个仓库</h3><p>这就简单了，我们把中文网址的项目文件夹复制一份，重新命名（随意命名，但方便起见我会直接叫myFirstBlog.en）。</p>
<p>在github上新建一个repository，名为en。结果如下：</p>
<p><img src="/../images/2/2_enGit.png"></p>
<h3 id="3-3-1，-更改myFirstBlog-en文件夹下配置文件"><a href="#3-3-1，-更改myFirstBlog-en文件夹下配置文件" class="headerlink" title="3.3.1， 更改myFirstBlog.en文件夹下配置文件"></a>3.3.1， 更改myFirstBlog.en文件夹下配置文件</h3><p>根目录下的_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token key atrule">language</span><span class="token punctuation">:</span> en <span class="token comment">#改为en</span>

<span class="token comment"># URL</span>
<span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span>
<span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zcpisme.github.io/en/  <span class="token comment">#在原基础上加上en</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span>
<span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zcpisme/en.git <span class="token comment">#en网页仓库地址</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages <span class="token comment">#推送到gh-pages</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>theme文件里的_config.yml，加一个按钮超链接到中文页面</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Index</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive
  <span class="token key atrule">About</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle
  <span class="token comment">#粗暴的加一个中文按钮</span>
  <span class="token key atrule">中文</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zcpisme.github.io/  <span class="token comment">#直接转跳到中文站</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-3-2，-更改myFirstBlog文件夹下配置文件"><a href="#3-3-2，-更改myFirstBlog文件夹下配置文件" class="headerlink" title="3.3.2， 更改myFirstBlog文件夹下配置文件"></a>3.3.2， 更改myFirstBlog文件夹下配置文件</h3><p>根目录下的_config.yml</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN <span class="token comment">#改为中文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>同理，我们只需要在theme里的_config.yml加一个按钮到英文站就好了</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Index</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive
  <span class="token key atrule">About</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle
  <span class="token comment">#粗暴的加一个中文按钮</span>
  <span class="token key atrule">English</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /en  <span class="token comment">#可以完整的写上https://zcpisme.github.io/en</span>
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-4，-效果"><a href="#3-4，-效果" class="headerlink" title="3.4， 效果"></a>3.4， 效果</h3><p>分别上传的两个仓库，等待片刻，便可以查看网址，效果如下：</p>
<p>中文站：</p>
<p><img src="/../images/2/3_ch.png"></p>
<p>英文站：</p>
<p><img src="/../images/2/3_en.png"></p>
<h3 id="3-5-，缺点"><a href="#3-5-，缺点" class="headerlink" title="3.5 ，缺点"></a>3.5 ，缺点</h3><p>缺点是显而易见的，</p>
<ul>
<li><p>两个仓库需要分别维护，这太麻烦了。</p>
</li>
<li><p>文章内容需要单独准备，因为这只是翻译了主界面，文章内容依旧需要自行翻译上传。</p>
</li>
<li><p>部分代码依旧需要改动，以适配英文页面。例如<img src="/../images/2/3_enflaw.png" alt="英文页面下部分并不是英文"></p>
</li>
<li><p>……</p>
</li>
</ul>
<h2 id="4，小总结一下"><a href="#4，小总结一下" class="headerlink" title="4，小总结一下"></a>4，小总结一下</h2><p>这里处理了一些原文档已经过时的教程，也简单说了一下我个人对于语言切换的一些想法，如果有更好的办法请务必告知我！很想学习捏</p>
]]></content>
      <categories>
        <category>个人网页</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>简单NLP — 情感分析</title>
    <url>/2024/03/08/3_2024-03-08-%E7%AE%80%E5%8D%95NLP-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p> 前几天面试的时候，面试官突然问我“为什么想选择数据科学相关的专业？” 一时语塞，说我纯粹的热爱吧好像又有些虚伪，无非就是为了混口饭吃，哪有什么宏大叙事和美好愿景。</p>
<p>但是，我这样回答面试官的：我说也许在我们不知道的情况下，一些简单的数据分析能给我们带来很多信息，这些信息可以是商业上的，也可以是社会上的，甚至可以是个人的。因为我有每天记日记的习惯（虽然大部分是在写废话。。。），然后前几天刚好用Hugging Face上开源的模型简单跑了一遍对每天日记的情感分析。我回答面试官，大概，数据分析也能让我更好的认识自己吧。</p>
<p>所以开一个“简单”系列，就是无脑调包就好了，没什么技术含量。</p>
<h2 id="0，-我的日记"><a href="#0，-我的日记" class="headerlink" title="0， 我的日记"></a>0， 我的日记</h2><p><img src="/../images/3/1_diary.jpg"></p>
<p>这是我记日记的习惯，写一些话，然后没有标点符号（亏贼这太变态了），靠换行来断句。在python里，数据大概长这样：<img src="/../images/3/1_diary2.jpg"></p>
<p>我要的其实就是<code>diary_item_content</code>里的内容，一顿操作后提取内容，在简单做点预处理准备分析。（此处无码，因为每个人写日记的习惯都不一样罢。）</p>
<p><img src="/../images/3/1_diary3.jpg" alt="没错，就是把换行换成了句号罢了hhh"></p>
<h2 id="1，-直接调用在线模型"><a href="#1，-直接调用在线模型" class="headerlink" title="1， 直接调用在线模型"></a>1， 直接调用在线模型</h2><h3 id="1-1-Hugging-Face"><a href="#1-1-Hugging-Face" class="headerlink" title="1.1 Hugging Face"></a>1.1 Hugging Face</h3><p>在<a href="https://huggingface.co/models">Hugging Face</a>，有众多深度模型可供选择。可以用来微调也可以直接拿来使用。（拿来吧你！）</p>
<p>我点兵点将选择了<a href="https://huggingface.co/touch20032003/xuyuan-trial-sentiment-bert-chinese">xuyuan-trial-sentiment-bert-chinese</a>，一个在bert上微调用中文数据集微调的情感分析模型。输入文本，输出大致如下：</p>
<p><img src="/../images/3/2_modelExp.jpg" alt="不同情感的分类概率"></p>
<p>乍一看，看挺准的吼。</p>
<h3 id="1-2-Python-调用"><a href="#1-2-Python-调用" class="headerlink" title="1.2 Python 调用"></a>1.2 Python 调用</h3><p>在python里的调用很简单，直接</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline <span class="token comment">#直接使用高级API</span>

pipe <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"text-classification"</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">"touch20032003/xuyuan-trial-sentiment-bert-chinese"</span><span class="token punctuation">)</span> <span class="token comment">#可自选模型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pipe<span class="token punctuation">(</span><span class="token string">'今天来坦帕了。是阳光沙滩。细腻的沙子和平淡悠闲的生活。没什么人。海鸥围着人飞。如果可以。想在这生活更长时间。'</span><span class="token punctuation">)</span>
<span class="token comment"># output: [&#123;'label': 'happiness', 'score': 0.8051121234893799&#125;]</span>

<span class="token comment">#or</span>
pipe<span class="token punctuation">(</span><span class="token string">'今天来坦帕了。是阳光沙滩。细腻的沙子和平淡悠闲的生活。没什么人。海鸥围着人飞。如果可以。想在这生活更长时间。'</span><span class="token punctuation">,</span> top_k<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token comment">#top_k = None 返回所有分类</span>
<span class="token comment">#[&#123;'label': 'happiness', 'score': 0.8051121234893799&#125;,</span>
<span class="token comment"># &#123;'label': 'like', 'score': 0.18319253623485565&#125;,</span>
<span class="token comment"># &#123;'label': 'disgust', 'score': 0.006669812370091677&#125;,</span>
<span class="token comment"># &#123;'label': 'anger', 'score': 0.0025043778587132692&#125;,</span>
<span class="token comment"># &#123;'label': 'fear', 'score': 0.0013982513919472694&#125;,</span>
<span class="token comment"># &#123;'label': 'surprise', 'score': 0.0004570793535094708&#125;,</span>
<span class="token comment"># &#123;'label': 'none', 'score': 0.0004206936282571405&#125;,</span>
<span class="token comment"># &#123;'label': 'sadness', 'score': 0.0002451551263220608&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-简简单单，写个for循环"><a href="#1-3-简简单单，写个for循环" class="headerlink" title="1.3 简简单单，写个for循环"></a>1.3 简简单单，写个for循环</h3><p>代码就不放了，还是那句话，具体情况具体分析。也写得过于丑陋，不好意思放。</p>
<p>我把结果存为了一个字典，key是第几篇日记，value是不同段落的情感。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token comment">#&#123;0: &#123;0: 'like', 1: 'anger'&#125;,</span>
<span class="token comment"># 1: &#123;0: 'happiness', 1: 'like', 2: 'sadness', 3: 'disgust', 4: 'happiness'&#125;,</span>
<span class="token comment"># 2: &#123;0: 'sadness', 1: 'sadness'&#125;,</span>
<span class="token comment"># 3: &#123;0: 'disgust', 1: 'none', 2: 'sadness'&#125;,</span>
<span class="token comment"># 4: &#123;0: 'disgust', 1: 'happiness'&#125;,</span>
<span class="token comment"># 5: &#123;0: 'sadness'&#125;,</span>
<span class="token comment"># 6: &#123;1: 'disgust'&#125;,</span>
<span class="token comment"># .....</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以写个pickle存到本地：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'DiarySentimentRes'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
  pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="2-我的情绪"><a href="#2-我的情绪" class="headerlink" title="2, 我的情绪"></a>2, 我的情绪</h2><p>接着，简单粗暴的统计了一下每个情感的个数。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">sentiCount <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'sadness'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'happiness'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'like'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'anger'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'surprise'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'disgust'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'fear'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'none'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> res<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">for</span> m<span class="token punctuation">,</span>n <span class="token keyword">in</span> j<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
      <span class="token keyword">for</span> k <span class="token keyword">in</span> n<span class="token punctuation">:</span>
        sentiCount<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
      sentiCount<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>
    
<span class="token keyword">print</span><span class="token punctuation">(</span>sentiCount<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
&#123;'sadness': 1227,
 'happiness': 1075,
 'like': 784,
 'anger': 550,
 'surprise': 129,
 'disgust': 918,
 'fear': 106,
 'none': 558&#125;
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(开心和伤心居然五五开了，可能是每天大半夜才记日记，深夜emo吧😟)</p>
<p>简简单单画个饼状图，</p>
<p><img src="/../images/3/3_sentpie.jpg" alt="情感丰富针不戳"></p>
<h2 id="3，-简单总结一下"><a href="#3，-简单总结一下" class="headerlink" title="3， 简单总结一下"></a>3， 简单总结一下</h2><p>在AI火热的今天，操作也逐渐便的简单化，直接使用模型，不需要过多的解释，大部分人都可以接触并快速上手对AI感兴趣的部分。AI绘图甚至都有开源的图形界面，连打python这种胶水语言都免了。所以一切都是那么简单（如果不深究的话，也许）。</p>
<p>谈回情感分析，其实也可以自己训练一个分类器（SVM, Logistic Regression……），效果也不见得比所谓的深度学习模型差。说白了，如果有合适的数据集，硬train一发或许更好。</p>
<h2 id="4，-一些小概念"><a href="#4，-一些小概念" class="headerlink" title="4， 一些小概念"></a>4， 一些小概念</h2><p>没错我喜欢把概念的东西放到后，不然一上来就是各种之乎者也，看得头疼。</p>
<ul>
<li>Transformer（变形金刚（不是））：一种编码器—解码器（encoder—decoder）架构。在<a href="https://arxiv.org/abs/1706.03762">Attention is All You Need</a>提及过后大放光彩。</li>
<li>Encoder（编码器）：简单来讲，Encoder理解文章内容，传递给Decoder。</li>
<li>Decoder（解码器）：通过Encoder给的结果，生成对应的任务。</li>
<li>BERT (Bidirectional Encoder Representations from Transformers)： transformer的encoder部分，通常用作文章分类，命名实体识别等任务。</li>
<li>GPT (Generative Pretrained Transformer)：与BERT相反，只用了decoder部分，通常用作生成任务。</li>
</ul>
]]></content>
      <categories>
        <category>自然语言处理(NLP)</category>
      </categories>
      <tags>
        <tag>自然语言处理</tag>
        <tag>调包侠</tag>
      </tags>
  </entry>
  <entry>
    <title>超参数优化</title>
    <url>/2024/03/19/7_2024-03-19-%E8%B6%85%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="调参"><a href="#调参" class="headerlink" title="调参"></a>调参</h2><p>在训练模型的过程中，为了达到更好的结果，免不了要优化超参数，又称调参。虽然感觉提升并不显著，但提高一点算一点嘛。</p>
<p>在<a href="https://aws.amazon.com/what-is/hyperparameter-tuning/?nc1=h_ls">Amazon介绍的超参数调优</a>的介绍中，在传统的机器学习中一般有三种调优方式（其实就两种，网格搜索和随机搜索没什么区别）：</p>
<ol>
<li>网格搜索(Grid search)</li>
<li>随机搜索(Random search)</li>
<li>贝叶斯优化(Bayesian optimization):</li>
</ol>
<p>为了演示，这里使用Random Forest Classifier。</p>
<h3 id="0-数据"><a href="#0-数据" class="headerlink" title="0. 数据"></a>0. 数据</h3><p>随机在kaggle上找了个<a href="https://www.kaggle.com/datasets/muratkokludataset/dry-bean-dataset/code">Dry Bean</a>数据集， 我也没仔细看具体是什么，大概就是不同豆子的种类吧，应该和iris差不多。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrix<span class="token punctuation">,</span> classification_report<span class="token punctuation">,</span> accuracy_score
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier


X <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'Class'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Class'</span><span class="token punctuation">]</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用默认参数跑一遍</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">rfm_default <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>
rfm_default<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train <span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

rfm_default_pred <span class="token operator">=</span> rfm_default<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>

<span class="token comment"># print(classification_report(y_test , rfm_default_pred))</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy: "</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> rfm_default_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Accuracy:  0.9217774513404333</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="1-网格搜索"><a href="#1-网格搜索" class="headerlink" title="1. 网格搜索"></a>1. 网格搜索</h3><p>这种方法简单来说就是把所有的超参数组合试一遍，和一拍脑袋手动试并无二致，不过网格搜索在给定范围内自动运行，不用手动一个一个试。</p>
<p>为了演示方便，只调 n_estimators 和 min_samples_leaf，并只给两个取值。事实上可以无限多个。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV

param_grid <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    <span class="token comment"># 'max_depth': [None, 10, 20], </span>
    <span class="token comment"># 'min_samples_split': [5, 10],  </span>
    <span class="token string">'min_samples_leaf'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment"># 'bootstrap': [True, False]</span>
<span class="token punctuation">&#125;</span>

rfm_grid <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># 开始调参</span>
grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>rfm_grid<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

<span class="token comment"># 打印最好参数和结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best parameters found: "</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best score: "</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>
<span class="token comment">#Best parameters found:  &#123;'min_samples_leaf': 2, 'n_estimators': 100&#125;</span>
<span class="token comment">#Best score:  0.9231263776634827</span>

<span class="token comment"># 在测试集上测试</span>
predictions <span class="token operator">=</span> grid_search<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
<span class="token comment">#print("Classification report:\n", classification_report(y_test, predictions))</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy: "</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#Accuracy:  0.9232464193903782</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，调参过后准确率略有提升（0.92178 –&gt; 0.92325）。这种方法理论上可以找到最好的超参数组合，但是<strong>太慢了</strong>！因为每一个组合都要拟合测试一遍。</p>
<h3 id="2-随机搜索"><a href="#2-随机搜索" class="headerlink" title="2. 随机搜索"></a>2. 随机搜索</h3><p>顾名思义，就是在超参数组合中随机取点拟合模型，保留在有限次循环 (n_iter) 中最好结果。</p>
<p>牺牲一点准确度，但是解决了网格搜索过慢的痛点。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> RandomizedSearchCV
<span class="token comment"># 速度较快，我们可以加大超参数取值范围，但为了演示依旧只调n_estimators 和 min_samples_leaf</span>
param_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    <span class="token comment"># 'max_depth': [int(x) for x in np.linspace(10, 110, num=11)] + [None],</span>
    <span class="token comment"># 'min_samples_split': [2, 5, 10], </span>
    <span class="token string">'min_samples_leaf'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    <span class="token comment"># 'bootstrap': [True, False] </span>
<span class="token punctuation">&#125;</span>


rfm_random <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 开始调参，注意 n_iter 为循环次数</span>
random_search <span class="token operator">=</span> RandomizedSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>rfm_random<span class="token punctuation">,</span> param_distributions<span class="token operator">=</span>param_dist<span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

random_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train <span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

<span class="token comment"># 打印最好参数和结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best parameters found: "</span><span class="token punctuation">,</span> random_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best score: "</span><span class="token punctuation">,</span> random_search<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>

<span class="token comment"># 在测试集上测试</span>
predictions <span class="token operator">=</span> random_search<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
<span class="token comment"># print("Classification report:\n", classification_report(y_test, predictions))</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy: "</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Accuracy:  0.9243481454278369</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里准确率依旧有提升，仅仅是因为范围比较大。</p>
<h3 id="3-贝叶斯优化-⭐️⭐️⭐️"><a href="#3-贝叶斯优化-⭐️⭐️⭐️" class="headerlink" title="3. 贝叶斯优化 ⭐️⭐️⭐️"></a>3. 贝叶斯优化 ⭐️⭐️⭐️</h3><p>贝叶斯优化假设超参数和损失函数有某种关系，但是由于函数未知等原因，无法使用凸优化的方法。取而代之，用数值分析的方法找到最优解。简单来说，在每一次选取新的超参数组合时，记录了前几次的信息，所以效果理论上会比随机搜索好。</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">pip install scikit-optimize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> skopt <span class="token keyword">import</span> BayesSearchCV

<span class="token comment"># 开始调参</span>
opt <span class="token operator">=</span> BayesSearchCV<span class="token punctuation">(</span>
    estimator<span class="token operator">=</span>RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    search_spaces<span class="token operator">=</span>param_dist<span class="token punctuation">,</span> <span class="token comment">#和前面范围一致</span>
    n_iter<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 循环次数</span>
    cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>       <span class="token comment"># 3折交叉验证</span>
    scoring<span class="token operator">=</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span>
    verbose <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">)</span>
opt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train <span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

<span class="token comment"># 打印最好参数和结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best parameters found: "</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best score: "</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>

<span class="token comment"># 在测试集上测试</span>
predictions <span class="token operator">=</span> opt<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
<span class="token comment"># print("Classification report:\n", classification_report(y_test, predictions))</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy: "</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># Accuracy:  0.9254498714652957</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，贝叶斯优化由于是有规律的选取超参数，表现较好，并且耗时较短。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>调参在一定程度上可以提升正确率。根据实际情况，每个模型需要调的超参数不同。现如今，我们也可以使用一些自动调参的包，类似于<a href="https://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html">H2O AutoML</a>， 这个甚至可以从几个基础模型中选择最好的。</p>
<p>调参的过程需要时间和耐心（和玄学），最离谱的是调random seed的都有。在<a href="https://arxiv.org/abs/2109.08203">Torch.manual_seed(3407) is all you need</a>这篇文章中，作者居然说3407这个种子在主流预训练的计算机视觉模型中表现最好，娘希匹，这都能水文章。太变态了。</p>
<p>总之，学再多的模型，也逃不了调参的命运，真是不幸。</p>
<h3 id="附录：基础模型的常见超参数"><a href="#附录：基础模型的常见超参数" class="headerlink" title="附录：基础模型的常见超参数"></a>附录：基础模型的常见超参数</h3><table>
<thead>
<tr>
<th>Random Forest</th>
<th>Gradient Boosting</th>
<th>SVM</th>
<th>Logistic Regression</th>
<th>KNN</th>
<th>Decision Trees</th>
</tr>
</thead>
<tbody><tr>
<td>n_estimators: 树的数量</td>
<td>n_estimators:  迭代次数，即要构建的树的数量</td>
<td>C: 正则化参数，控制误差项的惩罚强度</td>
<td>C: 正则化参数，控制误差项的惩罚强度</td>
<td>n_neighbors:  邻居的数量</td>
<td>max_depth: 树的最大深度</td>
</tr>
<tr>
<td>max_depth: 树的最大深度</td>
<td>learning_rate: 学习率，用以控制每棵树对最终结果的贡献</td>
<td>kernel:  核函数类型，用于转换输入数据空间</td>
<td>penalty: 用于指定惩罚中使用的标准（如L1或L2正则化）</td>
<td>weights:  预测中使用的权重函数</td>
<td>min_samples_split: 分割内部节点所需的最小样本数</td>
</tr>
<tr>
<td>min_samples_split:  分割内部节点所需的最小样本数</td>
<td>max_depth: 树的最大深度</td>
<td>gamma: 核函数的系数（对于‘rbf’，‘poly’和‘sigmoid’）</td>
<td>solver: 用于优化问题的算法</td>
<td>algorithm: 用于计算最近邻居的算法</td>
<td>min_samples_leaf: 叶节点所需的最小样本数</td>
</tr>
<tr>
<td>min_samples_leaf: 叶节点所需的最小样本数</td>
<td>min_samples_split: 分割内部节点所需的最小样本数</td>
<td></td>
<td></td>
<td></td>
<td>criterion: 用于测量分割质量的函数</td>
</tr>
<tr>
<td>bootstrap: 是否在构建树时使用bootstrap样本（即重抽样）</td>
<td>min_samples_leaf: 叶节点所需的最小样本数</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>调参</tag>
        <tag>机器学习</tag>
        <tag>炼丹</tag>
        <tag>玄学</tag>
      </tags>
  </entry>
  <entry>
    <title>LoRA微调Twitter-roBERTa-base for Sentiment Analysis</title>
    <url>/2024/04/07/9_2024-04-07-LoRA%E5%BE%AE%E8%B0%83/</url>
    <content><![CDATA[<p>这两天在准备一些简历和面试的东西，终于也是要迈出求职的这一步了。美国我是打算放弃了，主要感觉还是经历太少了，简历就看着没人家炫酷。也罢，回国吃烧烤也很香。</p>
<p>前两天面试了百度的NLP算法实习生，感觉是寄了，因为是个日常实习，也没办法中途回国。不过面试的时候提到了上学期做的一个小项目，就是用Hugging Face上的模型做情感分析，也谈到了微调。</p>
<h1 id="0-前戏：LoRA"><a href="#0-前戏：LoRA" class="headerlink" title="0. 前戏：LoRA"></a>0. 前戏：LoRA</h1><p><a href="https://arxiv.org/abs/2106.09685">LoRA</a>, 全名Low-Rank Adaptation of Large Language Models，在2021的某个夏天，在一伙微（巨）软（硬）的研究员疯狂玩弄线性代数后，LoRA横空出世。</p>
<p>死去的线代知识准备发起攻击了！</p>
<p><strong>Rank</strong>这个概念在我们小学二年级的时候就学过，指的是<strong>矩阵的秩</strong>，行向量或列向量中最大线性无关组的向量数量。可以理解为矩阵里真正包含信息的行数。</p>
<blockquote>
<p>例如：</p>
<p>\begin{pmatrix} 1 &amp; 0 &amp; 1 \\ 0 &amp; 1 &amp; 1 \\ 0 &amp; 2 &amp; 2 \\ \end{pmatrix} 是一个秩为2的矩阵，因为第二行和第三行是一样的。</p>
<p>\begin{pmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \\ \end{pmatrix} 是一个满秩（秩为3）的矩阵。</p>
</blockquote>
<p>而低秩（Low-Rank）简单来说就是矩阵中存在大量线性相关的向量，从而导致矩阵的秩远小于满秩。</p>
<p>实际上，在深度学习的神经网络中，存在大量的的矩阵运算，而其中的矩阵随着参数量增加，极大可能矩阵就是低秩的，从而一个思想就应运而生了：在微调更新参数时，为什么要更新全部参数呢，只更新必要的参数不就好了吗？也就是说，对于一个低秩矩阵，只更新线性无关的向量不就完了吗。</p>
<h3 id="奇异值分解"><a href="#奇异值分解" class="headerlink" title="奇异值分解"></a>奇异值分解</h3><p>特征值分解针对方阵，可根据特征值将矩阵分解为三个较小矩阵相乘。对于非方阵（例如m &#x3D; 20，n &#x3D; 15），我们可以根据类似思想用奇异值分解，将矩阵分解为三个小矩阵。</p>
<p>奇异值分解是一种将任意矩阵分解为三个特定矩阵乘积的方法，形式为 \(W&#x3D;UΣV^T\)。其中：</p>
<ul>
<li>\(W\) 是原始矩阵。</li>
<li>\(U\) 是一个包含了左奇异向量的正交矩阵。</li>
<li>\(Σ\) 是一个对角矩阵，对角线上的元素是奇异值，这些奇异值按从大到小的顺序排列。</li>
<li>\(V^T\) 是一个包含了右奇异向量的正交矩阵的转置。</li>
</ul>
<p>那么对于一个低秩矩阵，我们可以只保留前关键信息来进行降维。</p>
<blockquote>
<p>举个例子，假设\(m &#x3D; 20, n&#x3D; 15, r &#x3D; 5\), </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment"># 生成一个低秩矩阵 W</span>
np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">5</span>  <span class="token comment"># m x n 矩阵，秩为 r</span>
U <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>m<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
V <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
W <span class="token operator">=</span> U @ V<span class="token punctuation">.</span>T  <span class="token comment"># W 是 m x n 但实际秩为 r</span>

<span class="token comment"># 对矩阵 W 进行奇异值分解</span>
U_svd<span class="token punctuation">,</span> S_svd<span class="token punctuation">,</span> VT_svd <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>W<span class="token punctuation">,</span> full_matrices<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 保留前 k 个奇异值</span>
k <span class="token operator">=</span> <span class="token number">5</span>
U_k <span class="token operator">=</span> U_svd<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>k<span class="token punctuation">]</span>
S_k <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>S_svd<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
V_k <span class="token operator">=</span> VT_svd<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>

A <span class="token operator">=</span> U_k @ S_k
B <span class="token operator">=</span> V_k
<span class="token comment"># 构造近似矩阵 A_k</span>
W_k <span class="token operator">=</span> A @ B

np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># n = 10</span>

<span class="token comment"># 计算不同近似秩 r 下的 y</span>
y_original <span class="token operator">=</span> W @ X
y_r5 <span class="token operator">=</span> W_k @ X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">y_original <span class="token operator">==</span> y_r5
<span class="token comment"># True</span>

W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># 300</span>

U_k<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> U_k<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S_k<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> S_k<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V_k<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> V_k<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># (100, 25, 75)</span>

A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># (100, 75)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由此可以看出，原矩阵参数为300，低秩矩阵参数量为200，实际上，作者多做了一次矩阵运算，就是说\(A&#x3D;UΣ\) 和 \(B&#x3D;V^T\)， 从而参数量为175。</p>
</blockquote>
<p><strong>注意！</strong>以上例子是在我们实际知道秩是多少，所有降维过后相当于保持了所有信息，实际情况是我们需要估算r。r越接近n， 涵盖的信息越全面。</p>
<h3 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h3><p>在LoRA里，就是用了如上思想，将大矩阵拆分为小矩阵，同时冻结原矩阵。最后训练微调小矩阵在加回原矩阵，完成微调。</p>
<p><img src="/../images/9/lora.png" alt="左边为原矩阵，右边为小矩阵，最后相加"></p>
<h1 id="1-LoRA微调Twitter-roBERTa-base-for-Sentiment-Analysis"><a href="#1-LoRA微调Twitter-roBERTa-base-for-Sentiment-Analysis" class="headerlink" title="1. LoRA微调Twitter-roBERTa-base for Sentiment Analysis"></a>1. LoRA微调Twitter-roBERTa-base for Sentiment Analysis</h1><p>以上都是铺垫，下面直接实操，上代码。预训练模型用<a href="https://huggingface.co/cardiffnlp/twitter-roberta-base-sentiment">Hugging Face上基于Bert</a>用Twitter微调的情感分析模型。微调数据集在Kaggle上寻找对于AI态度的文章数据集 <a href="https://www.kaggle.com/datasets/saurabhshahane/public-perception-of-ai">Public Perception of AI</a>。<strong>我没有进行清理或者审查文章内容，只是用于演示目的。</strong></p>
<h3 id="导入、安装必要包"><a href="#导入、安装必要包" class="headerlink" title="导入、安装必要包"></a>导入、安装必要包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">!pip install transformers datasets evaluate accelerate peft

<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token keyword">import</span> torch 
<span class="token keyword">from</span> transformers <span class="token keyword">import</span> RobertaModel<span class="token punctuation">,</span> RobertaTokenizer<span class="token punctuation">,</span> AutoModelForSequenceClassification<span class="token punctuation">,</span> TrainingArguments<span class="token punctuation">,</span> Trainer<span class="token punctuation">,</span> DataCollatorWithPadding<span class="token punctuation">,</span>AutoTokenizer
<span class="token keyword">from</span> peft <span class="token keyword">import</span> LoraConfig<span class="token punctuation">,</span> get_peft_model 
<span class="token keyword">from</span> datasets <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DatasetDict
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'/kaggle/input/public-perception-of-ai/robot-ai-all-public.csv'</span><span class="token punctuation">)</span>

df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token operator">~</span>df<span class="token punctuation">[</span><span class="token string">'Paragraph'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token operator">~</span>df<span class="token punctuation">[</span><span class="token string">'Article ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>

df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Paragraph'</span><span class="token punctuation">,</span> <span class="token string">'AI Mood'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
df<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span>
df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
mapping_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>

<span class="token comment"># Apply mapping</span>
df<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>mapping_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="预处理数据，和Twitter数据对齐"><a href="#预处理数据，和Twitter数据对齐" class="headerlink" title="预处理数据，和Twitter数据对齐"></a>预处理数据，和Twitter数据对齐</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">peft_model_name <span class="token operator">=</span> <span class="token string">'roberta-base-peft'</span> 
base_model <span class="token operator">=</span> <span class="token string">'cardiffnlp/twitter-roberta-base-sentiment-latest'</span> 

train_df<span class="token punctuation">,</span> test_df <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>df<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>  <span class="token comment"># 划分训练测试集</span>
train_dataset <span class="token operator">=</span> Dataset<span class="token punctuation">.</span>from_pandas<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> preserve_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
test_dataset <span class="token operator">=</span> Dataset<span class="token punctuation">.</span>from_pandas<span class="token punctuation">(</span>test_df<span class="token punctuation">,</span> preserve_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 对齐数据</span>
dataset <span class="token operator">=</span> DatasetDict<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string">'train'</span><span class="token punctuation">:</span> train_dataset<span class="token punctuation">,</span>
    <span class="token string">'test'</span><span class="token punctuation">:</span> test_dataset
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

tokenizer <span class="token operator">=</span> RobertaTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>base_model<span class="token punctuation">,</span>model_max_length<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>examples<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    tokenized <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>examples<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> 
    <span class="token keyword">return</span> tokenized 

tokenized_dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>preprocess<span class="token punctuation">,</span> batched<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  remove_columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
train_dataset<span class="token operator">=</span>tokenized_dataset<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span> 
eval_dataset<span class="token operator">=</span>tokenized_dataset<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shard<span class="token punctuation">(</span>num_shards<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> 
test_dataset<span class="token operator">=</span>tokenized_dataset<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shard<span class="token punctuation">(</span>num_shards<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> 


<span class="token comment"># 情感标签</span>
num_labels <span class="token operator">=</span> <span class="token number">3</span>
class_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'neg'</span><span class="token punctuation">,</span><span class="token string">'mid'</span><span class="token punctuation">,</span><span class="token string">'pos'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"number of labels: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_labels<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"the labels: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>class_names<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> 

<span class="token comment"># id2label mapping </span>
<span class="token comment"># 情感标签</span>
id2label <span class="token operator">=</span> <span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span> label <span class="token keyword">for</span> i<span class="token punctuation">,</span> label <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>class_names<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> 

data_collator <span class="token operator">=</span> DataCollatorWithPadding<span class="token punctuation">(</span>tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">"pt"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="设置训练参数"><a href="#设置训练参数" class="headerlink" title="设置训练参数"></a>设置训练参数</h3><p>为了演示，epoch，batch设置的较小</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">training_args <span class="token operator">=</span> TrainingArguments<span class="token punctuation">(</span> 
    output_dir<span class="token operator">=</span><span class="token string">'./results'</span><span class="token punctuation">,</span> 
    evaluation_strategy<span class="token operator">=</span><span class="token string">'steps'</span><span class="token punctuation">,</span> 
    learning_rate<span class="token operator">=</span><span class="token number">5e-5</span><span class="token punctuation">,</span> 
    num_train_epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> 
    per_device_train_batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_trainer</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span> 
      <span class="token keyword">return</span>  Trainer<span class="token punctuation">(</span> 
          model<span class="token operator">=</span>model<span class="token punctuation">,</span> 
          args<span class="token operator">=</span>training_args<span class="token punctuation">,</span> 
          train_dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span> 
          eval_dataset<span class="token operator">=</span>eval_dataset<span class="token punctuation">,</span> 
          data_collator<span class="token operator">=</span>data_collator<span class="token punctuation">,</span> 
      <span class="token punctuation">)</span> 
        
model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>base_model<span class="token punctuation">,</span> id2label<span class="token operator">=</span>id2label<span class="token punctuation">)</span> 

peft_config <span class="token operator">=</span> LoraConfig<span class="token punctuation">(</span>task_type<span class="token operator">=</span><span class="token string">"SEQ_CLS"</span><span class="token punctuation">,</span> inference_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> lora_alpha<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> lora_dropout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> 
peft_model <span class="token operator">=</span> get_peft_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> peft_config<span class="token punctuation">)</span> 

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'PEFT Model'</span><span class="token punctuation">)</span> 
peft_model<span class="token punctuation">.</span>print_trainable_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token comment">## PEFT Model</span>
<span class="token comment">## trainable params: 887,811 || all params: 125,535,750 || trainable%: 0.7072176650874352</span>
peft_lora_finetuning_trainer <span class="token operator">=</span> get_trainer<span class="token punctuation">(</span>peft_model<span class="token punctuation">)</span> 

peft_lora_finetuning_trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span> 
peft_lora_finetuning_trainer<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意到上面代码，<code>peft_config = LoraConfig(task_type=&quot;SEQ_CLS&quot;, inference_mode=False, r=8, lora_alpha=16, lora_dropout=0.1) </code>，r为秩，lora_alpha可以理解为最后调整的参数对原矩阵的影响程度。一般经验告诉我们lora_alpha为r的两倍效果较好。</p>
<p>参数量从<code>125,535,750</code> 到<code>887,811</code>。</p>
<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> peft <span class="token keyword">import</span> AutoPeftModelForSequenceClassification 
<span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer 

<span class="token comment"># LOAD the Saved PEFT model </span>
inference_model <span class="token operator">=</span> AutoPeftModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>peft_model_name<span class="token punctuation">,</span> id2label<span class="token operator">=</span>id2label<span class="token punctuation">)</span> 
tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>modified_base<span class="token punctuation">)</span> 


<span class="token keyword">def</span> <span class="token function">classify</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span> 
  inputs <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>text<span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">"pt"</span><span class="token punctuation">)</span> 
  output <span class="token operator">=</span> inference_model<span class="token punctuation">(</span><span class="token operator">**</span>inputs<span class="token punctuation">)</span> 

  prediction <span class="token operator">=</span> output<span class="token punctuation">.</span>logits<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> 

  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n Class: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>prediction<span class="token punctuation">&#125;</span></span><span class="token string">, Label: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>id2label<span class="token punctuation">[</span>prediction<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">, Text: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> 
  <span class="token comment"># return id2label[prediction] </span>

classify<span class="token punctuation">(</span> <span class="token string">"AI is Cool"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader 
<span class="token keyword">import</span> evaluate 
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm 

metric <span class="token operator">=</span> evaluate<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'accuracy'</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token function">evaluate_model</span><span class="token punctuation">(</span>inference_model<span class="token punctuation">,</span> dataset<span class="token punctuation">)</span><span class="token punctuation">:</span> 

    eval_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>rename_column<span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">,</span> <span class="token string">"labels"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>data_collator<span class="token punctuation">)</span> 
    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span> 

    inference_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> 
    inference_model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token keyword">for</span> step<span class="token punctuation">,</span> batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>tqdm<span class="token punctuation">(</span>eval_dataloader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
        batch<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> 
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            outputs <span class="token operator">=</span> inference_model<span class="token punctuation">(</span><span class="token operator">**</span>batch<span class="token punctuation">)</span> 
        predictions <span class="token operator">=</span> outputs<span class="token punctuation">.</span>logits<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 
        predictions<span class="token punctuation">,</span> references <span class="token operator">=</span> predictions<span class="token punctuation">,</span> batch<span class="token punctuation">[</span><span class="token string">"labels"</span><span class="token punctuation">]</span> 
        metric<span class="token punctuation">.</span>add_batch<span class="token punctuation">(</span> 
            predictions<span class="token operator">=</span>predictions<span class="token punctuation">,</span> 
            references<span class="token operator">=</span>references<span class="token punctuation">,</span> 
        <span class="token punctuation">)</span> 

    eval_metric <span class="token operator">=</span> metric<span class="token punctuation">.</span>compute<span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span>eval_metric<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">evaluate_model<span class="token punctuation">(</span>AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>base_model<span class="token punctuation">,</span> id2label<span class="token operator">=</span>id2label<span class="token punctuation">)</span><span class="token punctuation">,</span> test_dataset<span class="token punctuation">)</span>
<span class="token comment">#&#123;'accuracy': 0.5786350148367952&#125;</span>
evaluate_model<span class="token punctuation">(</span>inference_model<span class="token punctuation">,</span> test_dataset<span class="token punctuation">)</span>
<span class="token comment">#&#123;'accuracy': 0.6350148367952523&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>由此可见，一个epoch过后正确率有所提升，效果肯定不如全参数微调，但快了许多。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>自然语言处理</tag>
        <tag>微调</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>新时代八股</title>
    <url>/2024/03/21/8_2024-03-21-%E5%85%AB%E8%82%A1%E6%96%87/</url>
    <content><![CDATA[<p>仅用来记录一些面经。</p>
<p><strong>中心极限定理</strong>（Central Limit Theorem, CLT）是统计学中的一个重要定理，它说明了在适当的条件下，大量独立同分布的随机变量之和的分布接近正态分布。这个定理有两个重要的内容和条件：</p>
<ul>
<li><strong>内容</strong>：当样本量足够大时（通常n≥30），无论原始总体分布是什么，样本均值的分布都趋近于正态分布。这意味着，我们可以利用正态分布的性质来估计均值的概率，进行假设检验等。</li>
<li><strong>条件</strong>：中心极限定理适用的条件包括样本是随机的、样本之间相互独立、样本来自同一总体或分布、样本大小足够大（n≥30通常被认为是足够的，但对于非常偏斜的分布，可能需要更大的样本量）。</li>
</ul>
<p><strong>Z检验和t检验的差别，以及为什么小样本用t检验</strong>：</p>
<ul>
<li><strong>Z检验</strong>用于样本量大（n&gt;30）且总体标准差已知的情况，依据的是正态分布。</li>
<li><strong>t检验</strong>用于样本量小（n≤30）或总体标准差未知的情况，依据的是t分布。t分布与正态分布相似，但是在尾部更为厚重，以适应小样本情况下估计的不确定性更大的问题。</li>
<li>小样本使用t检验的原因：当样本量小且总体标准差未知时，使用样本标准差来估计总体标准差，会引入额外的不确定性。t分布考虑了这种不确定性，提供了更适合小样本情况下的测试方法。</li>
</ul>
<p><strong>什么是置信区间</strong>；<strong>AB测试的样本量怎么确定，会受到哪些因素影响</strong>：</p>
<ol>
<li><strong>置信区间</strong>是一种用来估计未知参数（如总体均值）的区间估计方法。一个置信区间给出了一系列可能包含参数真实值的范围，并附有一个置信水平（如95%），表明如果我们多次计算置信区间，其中约95%的置信区间会包含参数的真实值。</li>
</ol>
<p><strong>AB测试的样本量确定</strong>：受多个因素影响，包括：</p>
<ol>
<li><strong>预期效果大小</strong>：期望检测到的效果越小，需要的样本量越大。</li>
<li><strong>统计功效</strong>（Power）：通常设置为80%或更高，较高的统计功效需要更大的样本量。</li>
<li><strong>显著性水平</strong>（Alpha）：通常设置为5%，降低显著性水平会增加需要的样本量。</li>
<li><strong>结果的变异性</strong>：结果数据的变异性越大，需要的样本量越大。</li>
<li><strong>分配比率</strong>：AB两组之间的分配比率，不平等的分配可能需要更大的样本量。</li>
</ol>
<p><strong>闲鱼的广告对用户体验的影响及实验设计</strong>：广告对用户体验的影响可以是正面的也可以是负面的。正面影响包括提供有用信息、发现新商品等；负面影响包括打断用户体验、增加信息过载等。</p>
<ul>
<li><p>设计这个项目或实验时，可以采取<strong>AB测试</strong>方法来评估不同广告展示策略对用户行为和满意度的影响。实验设计的步骤可能包括：</p>
<p><strong>定义目标</strong>：明确实验的目标，比如提高点击率、增加用户停留时间或提升满意度等。</p>
<p><strong>确定变量</strong>：确定你想测试的广告策略（如广告位置、频率、类型等）作为独立变量，以及将如何衡量用户行为或满意度的变化作为因变量。</p>
<p><strong>随机分组</strong>：将用户随机分为至少两组，一组接受现有的广告策略（控制组），另一组接受测试的广告策略（实验组）。</p>
<p><strong>确定样本量</strong>：根据预期效果的大小、统计功效、显著性水平等因素计算所需的最小样本量。</p>
<p><strong>收集数据</strong>：运行实验一定时间，收集各组的用户行为数据和反馈。</p>
<p><strong>分析结果</strong>：使用统计方法（如t检验）比较两组的结果，判断广告策略的改变是否显著影响了用户行为或满意度。</p>
<p><strong>做出决策</strong>：基于实验结果，决定是否应该全面推广新的广告策略。</p>
<p>实验过程中，还需要考虑外部因素的影响，比如季节性变化、平台整体用户行为的变化等，以确保实验结果的准确性。此外，确保用户隐私和数据安全也是设计和实施实验时的重要考虑。</p>
</li>
</ul>
<p><strong>怎么用rand7()生成rand10()<strong>： 要使用只能生成1到7之间随机数的<code>rand7()</code>函数来生成1到10之间的随机数，一种方法是使用</strong>拒绝采样</strong>。思路是先使用<code>rand7()</code>生成一个更大范围的均匀分布，然后拒绝不在目标范围内的值。具体步骤如下：</p>
<p>首先，调用两次<code>rand7()</code>生成一个矩阵，其中的每个值均匀分布于1到49之间。</p>
<ol>
<li>将这个范围划分为两部分：1到40和41到49。如果生成的数落在1到40之间，我们将其映射到1到10之间；如果落在41到49之间，我们将其丢弃，并重新生成。</li>
<li>对于1到40的结果，我们可以通过<code>(结果 - 1) % 10 + 1</code>的方式映射到1到10。</li>
</ol>
<p>这种方法的关键在于，通过拒绝采样，我们保证了最终结果1到10的概率是均等的。</p>
<p><strong>简历中的一个建模项目样本量、样本来源、如何打标、样本分布</strong>： 在简历中描述建模项目时，可以包括以下几个方面的信息：</p>
<ul>
<li><strong>样本量</strong>：提供数据集中包含的样本数量，例如“项目使用了一个包含10,000个样本的数据集”。</li>
</ul>
<ul>
<li><strong>样本来源</strong>：描述数据的来源，比如是公司内部数据、公开数据集还是通过爬虫获得的数据，例如“数据来自公开的X数据集”。</li>
<li><strong>如何打标</strong>：说明了如何给数据样本标注标签的方法，比如是通过专家手动标注，用户反馈，或者使用某种算法自动标注，例如“利用用户行为数据通过算法自动给样本打标”。</li>
<li><strong>样本分布</strong>：描述数据的分布特征，比如是平衡还是不平衡，哪些类别的样本比较多，例如“数据集包含两个类别，其中一个类别的样本数量是另一个的两倍，显示出数据的不平衡性”。</li>
</ul>
<p><strong>决策树和随机森林的差别，GBDT和XGBoost的基函数差别</strong>：</p>
<p>决策树与随机森林：</p>
<ul>
<li><strong>决策树</strong>是一种基本的分类和回归方法，通过构造决策树来模拟决策过程，对数据进行分类或回归预测。它容易理解和解释，但容易过拟合。</li>
<li><strong>随机森林</strong>是基于决策树的一种集成学习方法，它通过构建多个决策树并进行投票或平均来改善预测性能。随机森林通过引入随机特征选择来增加决策树之间的差异性，从而减少过拟合的风险。</li>
</ul>
<p><strong>GBDT与XGBoost的基函数差别</strong>：</p>
<ol>
<li><p>基函数的构建</p>
<ul>
<li><p><strong>GBDT</strong>：在GBDT中，每一棵树都是在减少前一棵树残差的基础上建立的，目的是逐步缩小模型与真实值之间的差距。每一次迭代，都会建立一个新的决策树去拟合前一轮所有树的预测值与真实值之间的残差。</p>
</li>
<li><p><strong>XGBoost</strong>：XGBoost在基函数的构建方面采用了更加精细的控制，引入了正则项来控制树的复杂度，包括树的深度、节点分裂所需的最小损失函数下降值等，以避免过拟合。此外，XGBoost还采用了二阶泰勒展开来近似损失函数，使得优化更加精确。</p>
</li>
</ul>
</li>
<li><p>模型复杂度的控制</p>
<ul>
<li><p><strong>GBDT</strong>：GBDT控制模型复杂度的方法较为简单，主要通过限制树的深度、设置最小叶节点样本数等参数来避免过拟合。</p>
</li>
<li><p><strong>XGBoost</strong>：XGBoost在模型复杂度的控制上引入了正则化项，包括树的叶子节点个数和叶子节点权重的L2正则化，这有助于进一步减少模型过拟合的风险。</p>
</li>
</ul>
</li>
<li><p>处理缺失值</p>
<ul>
<li><p><strong>GBDT</strong>：传统的GBDT对于缺失值的处理需要在数据预处理阶段进行，没有内置有效的处理缺失值的机制。</p>
</li>
<li><p><strong>XGBoost</strong>：XGBoost可以自动处理缺失值。在节点分裂时，XGBoost会尝试将缺失值分配到增益最大的那个方向，同时还可以学习缺失值的最佳方向，从而更加灵活地处理数据中的缺失情况。</p>
</li>
</ul>
</li>
<li><p>计算效率</p>
<ul>
<li><strong>XGBoost</strong>对于计算效率进行了大量的优化，包括特征的预排序和近似的分位数策略等，这使得XGBoost在处理大规模数据集时，相较于传统GBDT，具有更高的计算效率和扩展性。</li>
</ul>
</li>
</ol>
<p><strong>概率题解析：袋子里有两个球，有放回地抽，平均抽多少次能至少每个球都抽出一次</strong></p>
<p>​	这个问题可以用几何分布的知识来解决。首先，我们抽到第一个球的时候，第二次抽到另一个球的概率是1&#x2F;2。由于每次抽球都是独立事件，我们可以计算出在第n次首次抽到不同球的期望值。</p>
<p>​	我们设E为至少抽到每个球一次的平均次数。首次抽到一个球之后，每次尝试抽到另一个球都可以视作一次新的独立尝试，这些尝试直到成功为止。由于每次成功的概率是1&#x2F;2，期望次数（E）就是几何分布的期望公式1&#x2F;p的结果，其中p是成功的概率。</p>
<p>​	在这个场景中，抽第一个球总是成功（因为我们不在乎是哪个球），关键在于之后如何抽到另一个不同的球。这里p &#x3D; 1&#x2F;2，所以期望次数E &#x3D; 1&#x2F;p &#x3D; 2。</p>
<p>​	因此，包括第一次成功抽取在内，平均而言，需要2次尝试才能确保至少每个球都被抽出一次。但实际上，我们需要考虑的是从开始抽球直到抽完所有不同球的整个过程，首次抽取不计入几何分布的期望次数计算中，所以实际的平均尝试次数是2+1&#x3D;3次。</p>
<p><strong>怎么提升DAU（日活跃用户数）</strong>：提升DAU可以从多个方面入手，关键在于提高用户的参与度和留存率。一些策略包括：</p>
<ul>
<li><p><strong>提高用户体验</strong>：优化应用的性能和界面设计，减少加载时间，提升用户体验。</p>
</li>
<li><p><strong>增加用户粘性</strong>：通过推送通知、个性化内容推荐等方式，定期吸引用户回到应用。</p>
</li>
<li><p><strong>优化产品功能</strong>：根据用户反馈和使用数据，持续迭代产品，增加或优化那些能提升用户满意度和使用频率的功能。</p>
</li>
<li><p><strong>社交功能</strong>：鼓励用户邀请朋友加入、分享内容到社交网络，利用社交网络效应增加用户基数。</p>
</li>
<li><p><strong>举办活动</strong>：定期举办线上活动或挑战，增加用户参与感和社区归属感。</p>
</li>
<li><p><strong>激励措施</strong>：通过积分、奖励、排行榜等激励机制，鼓励用户日常登录和活跃参与。</p>
</li>
</ul>
<p><strong>两个推荐算法得到的结果DAU有差异，怎么找原因</strong>： 分析两个推荐算法DAU差异的原因，可以从以下几个方面入手：</p>
<ul>
<li><p><strong>用户体验</strong>：比较两种算法推荐内容的相关性、多样性和新颖性。用户可能更偏好那些能够提供更相关或更新颖内容的推荐算法。</p>
</li>
<li><p><strong>算法偏差</strong>：检查两个算法是否对某类用户或内容有偏差，例如某个算法可能更倾向于推荐热门内容，而忽略了长尾内容。</p>
</li>
<li><p><strong>实验设计</strong>：确保AB测试设计公平，比如实验组和对照组的用户分布均匀，没有其他因素干扰结果。</p>
<p><strong>性能指标</strong>：分析除DAU外的其他关键性能指标，如用户留存率、用户参与度（如平均会话时长、每日平均操作次数）、转化率等，以获得更全面的性能比较。</p>
<ul>
<li><p><strong>用户反馈</strong>：收集并分析用户对于推荐内容的直接反馈，了解用户满意度和偏好，可能会揭示导致DAU差异的原因。</p>
</li>
<li><p><strong>技术问题</strong>：检查是否存在技术问题影响了某个算法的性能，比如加载时间长、错误率高等，这些都可能影响用户体验和DAU。</p>
</li>
<li><p><strong>市场动态</strong>：分析期间内是否有特殊的市场活动或外部因素影响了用户行为，比如节假日、竞品活动等。</p>
</li>
<li><p>综合这些分析，可以更准确地定位两个推荐算法导致DAU差异的原因，从而对算法进行针对性的优化。</p>
</li>
</ul>
</li>
</ul>
<p><strong>SQL重复曝光的效率</strong></p>
<p>如果你是在询问如何用SQL查询识别或管理重复曝光的数据效率问题，那么这通常涉及到数据去重、统计分析以及优化查询性能。下面提供一个基本的策略框架：</p>
<ul>
<li><strong>识别重复数据</strong>：可以使用SQL的<code>DISTINCT</code>关键字、<code>GROUP BY</code>语句或<code>ROW_NUMBER()</code>窗口函数等方法来识别重复的曝光记录。</li>
<li><strong>数据去重</strong>：根据业务需求，可以选择删除重复记录或者保留一条记录。使用<code>ROW_NUMBER()</code>结合<code>CTE</code>（公用表达式）或者临时表可以有效地处理去重。</li>
<li><strong>效率优化</strong>：优化SQL查询效率通常涉及到合理使用索引、避免全表扫描、减少数据的冗余和避免复杂的子查询等策略。</li>
<li><strong>分析影响</strong>：使用聚合函数（如<code>COUNT()</code>, <code>SUM()</code>）来分析重复曝光的程度及其可能的影响，帮助制定更有效的数据处理和营销策略。</li>
</ul>
<p> 具体的SQL语句和优化策略需要根据你的数据库表结构、索引设计以及查询需求来定制。处理重复数据是提高数据分析质量和决策效率的重要步骤，同时也有助于提高数据库查询的性能。</p>
<p><strong>随机森林和XGBoost的区别</strong>：</p>
<ul>
<li><strong>随机森林</strong>（Random Forest）是一种基于决策树的集成学习技术，通过构建多棵决策树并进行投票或平均来提高预测准确性。它通过在构建每棵树时随机选择特征子集来增加模型的多样性，从而减少过拟合的风险。</li>
<li><strong>XGBoost</strong>（eXtreme Gradient Boosting）是一种高效的梯度提升算法，通过顺序地添加决策树模型来最小化一个可微分的损失函数。XGBoost在模型训练时引入了正则化项（用于控制模型的复杂度），从而防止过拟合。它还采用了高级的技术，如列采样（Column Sampling）和精确的贪心算法，以提高效率和减少内存消耗。</li>
</ul>
<p>关键区别在于：</p>
<ul>
<li><strong>模型构建</strong>：随机森林是并行构建树模型的，而XGBoost是顺序构建的。</li>
<li><strong>目标函数</strong>：XGBoost在其目标函数中加入了正则化项，这有助于控制模型的复杂度，防止过拟合。</li>
<li><strong>处理速度和效率</strong>：XGBoost通常在处理速度和模型效果上优于随机森林，特别是在处理大规模数据集时。</li>
</ul>
<p><strong>k-means的原理</strong>： k-means是一种简单而广泛使用的聚类算法。它的目标是将n个观测值划分到k个簇中，以使每个观测值属于最近的簇中心，从而以此准则最小化簇内的方差。算法步骤如下：</p>
<ol>
<li><strong>初始化</strong>：随机选取k个观测作为初始簇中心。</li>
<li><strong>分配步骤</strong>：将每个观测分配给最近的簇中心。</li>
<li><strong>更新步骤</strong>：重新计算每个簇的中心，通常是簇内所有观测值的均值。</li>
<li>重复步骤2和3，直到簇中心不再显著改变，算法收敛。</li>
</ol>
<p><strong>SQL窗口函数及其区别</strong>： SQL窗口函数允许对数据集的子集，即“窗口”，进行操作并返回单个值。常用的窗口函数包括<code>ROW_NUMBER()</code>、<code>RANK()</code>、<code>DENSE_RANK()</code>、<code>LEAD()</code>、<code>LAG()</code>、<code>SUM()</code>、<code>AVG()</code>等。</p>
<ul>
<li><strong>ROW_NUMBER()</strong> 为每个分组内的行提供一个唯一的序号。</li>
<li><strong>RANK()</strong> 在有相同值的情况下会为它们提供相同的排名，并在下一个排名时跳过之前的排名数。</li>
<li><strong>DENSE_RANK()</strong> 类似于RANK()，但它在遇到相同值时不会跳过任何排名。</li>
<li>窗口函数通过<code>OVER()</code>子句与其他SQL语句区分开来，<code>OVER()</code>子句定义了窗口函数操作的数据范围和分组。</li>
</ul>
<p><strong>中心极限定理和大数定律</strong>：</p>
<ul>
<li><p><strong>中心极限定理</strong>（CLT）表明，如果你有一个足够大的样本量，那么样本均值的分布将趋近于正态分布，无论原始总体分布是什么。这个定理在样本量大（一般规则是样本量大于30）时尤其适用。</p>
</li>
<li><p><strong>大数定律</strong>（Law of Large Numbers, LLN）指出，随着试验次数的增加，试验结果的平均值将趋近于期望值。简单来说，越多的数据将提供越稳定的长期平均值。大数定律保证了随着样本量的增加，样本均值将趋于总体均值。</p>
<p>两者的主要区别在于：中心极限定理关注于样本均值的分布形状将如何趋近于正态分布，而大数定律关注于随着样本量的增加，样本均值将如何趋近于总体均值。</p>
</li>
</ul>
<p><strong>线性回归共线性、过拟合、正则化</strong>：</p>
<ul>
<li><strong>共线性</strong>：在线性回归模型中，如果两个或多个预测变量之间存在高度相关关系，则称为共线性。共线性会导致模型参数的估计变得不稳定和不准确。解决共线性的一种方法是移除一些高度相关的变量，或者使用主成分分析（PCA）来减少维度。</li>
<li><strong>过拟合</strong>：过拟合发生在模型过于复杂，以至于它开始捕捉到训练数据中的随机噪声，而不是潜在的数据分布。过拟合的模型在新的、未见过的数据上表现往往较差。可以通过简化模型（减少变量数）、收集更多数据或使用交叉验证来减轻过拟合。</li>
<li><strong>正则化</strong>：正则化是一种降低过拟合风险的技术，通过在损失函数中添加一个惩罚项来约束模型参数的大小。常见的正则化形式包括L1正则化（Lasso回归）和L2正则化（Ridge回归）。L1正则化倾向于产生稀疏参数，即很多参数为0，有助于变量选择；L2正则化倾向于将参数值平滑地分布在更小的范围内，有助于处理参数估计的不稳定问题。</li>
</ul>
<p><strong>客户留存率下降分析</strong>： 分析客户留存率下降的原因时，可以从以下几个维度进行：</p>
<ul>
<li><strong>数据分析</strong>：首先检查留存率数据，分析留存率下降的时间点和幅度，是否与特定事件（如产品更新、市场活动）对应。</li>
<li><strong>用户反馈</strong>：收集和分析用户反馈，了解用户不再使用产品或服务的原因。</li>
<li><strong>市场和竞品分析</strong>：了解市场环境和竞品动态，是否有新的竞争者或产品吸引了你的用户。</li>
<li><strong>产品分析</strong>：分析产品功能、用户体验等是否存在问题，导致用户流失。</li>
<li><strong>用户行为分析</strong>：利用用户行为数据，分析留存用户与流失用户在使用产品的行为上的差异。</li>
<li><strong>细分市场分析</strong>：进行用户细分，分析不同用户群体的留存率差异，可能某些特定群体的留存率下降特别明显。</li>
<li><strong>A&#x2F;B测试</strong>：如果有新的功能或策略上线，可以通过A&#x2F;B测试分析这些变化是否对留存率有负面影响。</li>
</ul>
<p>根据分析结果，可以针对性地制定改进措施，比如优化产品功能、改善用户体验、增强客户服务支持等。</p>
<p><strong>Python 1-100随机除掉一个数，找到除掉的数的方法</strong>：</p>
<ul>
<li><strong>方法1 - 算术求和</strong>：计算1到100的总和，然后减去给定数组的总和，差值即为丢失的数字。</li>
<li><strong>方法2 - 异或操作</strong>：利用异或操作的性质，对1到100以及数组中的所有数字进行异或操作，结果即为缺失的数字（因为相同的数字异或结果为0，0与任何数字异或结果为该数字）。</li>
<li><strong>方法3 - 排序</strong>：将数组排序，然后遍历数组，检查缺失的数字是哪一个。</li>
<li><strong>方法4 - 布尔数组</strong>：使用一个布尔数组标记1到100的数字是否出现，然后检查哪个数字没有被标记。</li>
<li><strong>方法5 - 数学公式</strong>：使用等差数列求和公式（n*(n+1)&#x2F;2）计算1到100的和，减去数组的和得到缺失的数字。</li>
</ul>
<p><strong>常见数据倾斜case及解决方法</strong>：</p>
<ul>
<li><strong>情景</strong>：在大数据处理和分布式计算中，数据倾斜常发生在数据集中某些键值对应的数据量远大于其他键值。</li>
<li>解决方法：<ul>
<li><strong>增加键的粒度</strong>：通过增加键的粒度来分散大键，如将key拆分成多个子键。</li>
<li><strong>重分区</strong>：在分布式计算中，通过对数据进行更合理的重分区来均匀分配数据量。</li>
<li><strong>采样</strong>：对数据进行采样，估算倾斜的程度和倾斜的键，然后对这些键进行特殊处理。</li>
<li><strong>过滤</strong>：如果某些键的数据量过大，可以考虑先进行过滤或预处理。</li>
<li><strong>使用广播变量</strong>：对于小数据集，可以使用广播变量减少数据倾斜的影响。</li>
</ul>
</li>
</ul>
<p><strong>对DS和DA的理解，为什么想做DS</strong>：</p>
<ul>
<li><p><strong>数据科学家（DS）</strong>与<strong>数据分析师（DA）</strong>的主要区别在于角色的职责和技能深度。数据科学家通常涉及预测模型、机器学习、深度学习等高级分析，解决更复杂的问题，并且在工作中经常需要开发新的算法或数据处理技术。数据科学家不仅需要拥有数据分析的能力，还需要具备强大的编程技能、统计知识、以及对业务的深入理解。</p>
<ul>
<li><strong>数据分析师（DA）</strong>的工作更侧重于通过各种数据分析工具和技术（如SQL、Excel、BI工具等）来解析数据，发现数据背后的趋势和模式，为业务决策提供支持。数据分析师的工作更注重于对现有数据的解释和可视化展示。</li>
<li><strong>为什么想做DS</strong>：选择成为数据科学家的理由可能包括：<ul>
<li><strong>解决复杂问题的热情</strong>：对于喜欢挑战和解决复杂问题的人来说，数据科学提供了一个独特的机会，可以应用机器学习和深度学习等技术来解决实际问题。</li>
<li><strong>对数据的热爱</strong>：对数据和数据背后故事的好奇心驱使人探索更深层次的数据分析。</li>
<li><strong>技术多样性和创新</strong>：数据科学领域的快速发展提供了学习新技术和创新的广阔空间。</li>
<li><strong>业务影响力</strong>：数据科学能够直接对业务策略和决策产生重大影响，提供数据驱动的解决方案，这种能力吸引那些希望在业务发展中发挥关键作用的人。</li>
<li><strong>职业发展前景</strong>：数据科学是一个高需求领域，拥有广阔的职业发展机会和优厚的薪酬待遇。</li>
</ul>
</li>
</ul>
<p>综上，无论是对技术的热爱、解决问题的满足感，还是职业发展的广阔前景，都是驱动人们选择成为数据科学家的强大动力。</p>
</li>
</ul>
<p><strong>参数模型与非参数模型的区别</strong>：</p>
<ul>
<li><strong>参数模型</strong>假设数据符合某种特定分布，这种模型由一组有限的参数定义。例如，线性回归使用系数作为参数来描述数据间的关系。</li>
<li><strong>非参数模型</strong>不对数据的分布作出严格假设，不通过固定数量的参数定义，灵活度更高。例如，决策树和核方法就是非参数模型的例子。</li>
</ul>
<p><strong>处理数据不均衡的方法</strong>：</p>
<ul>
<li><strong>重采样</strong>：对少数类进行过采样或对多数类进行欠采样。</li>
<li><strong>合成样本生成</strong>：如SMOTE算法，通过生成合成样本来增强少数类。</li>
<li><strong>惩罚机制</strong>：在模型训练过程中对少数类赋予更高的权重。</li>
<li><strong>使用特定的评估指标</strong>：如F1分数、精确率和召回率而非准确率来评价模型。</li>
<li><strong>集成学习方法</strong>：如使用Bagging和Boosting策略来减少类别不平衡的影响。</li>
</ul>
<p><strong>AB实验和因果推断的关系</strong>：AB测试是因果推断的一种实践方法，通过随机分配实验组和对照组来控制所有其他变量，确保观察到的效果是由干预措施引起的，从而实现因果关系的确定。</p>
<p><strong>不能使用随机分流实验进行数据挖掘的情况</strong>：</p>
<ul>
<li>当存在明显的伦理问题或对参与者有潜在危害时。</li>
<li>当实验条件无法控制或模拟现实世界情况时。</li>
<li>数据依赖关系强，无法随机分配。</li>
</ul>
<p><strong>抽5个球中有3个以上是白球的概率</strong>，可以使用组合概率公式计算。</p>
<p><strong>甲运动员罚球10次中，有3次以上进球的概率</strong>，可以使用二项分布概率公式计算。</p>
<p><strong>Python的数据结构</strong>：列表（List）、元组（Tuple）、字典（Dictionary）、集合（Set）等。</p>
<p><strong>什么是置信区间</strong>：置信区间是一个区间估计，用于表示对某个参数估计的不确定性。它给出了一个范围，我们认为这个范围内以某个置信水平（如95%）包含了参数的真实值。</p>
<p><strong>高级函数<code>where</code>的执行顺序</strong>：通常先执行条件判断，然后根据条件返回结果，具体执行快慢依赖于实现和数据规模。</p>
<p><strong>多重共线性</strong>：是指模型中两个或多个变量高度相关，导致模型估计不稳定。解决方法包括移除一些高相关性变量、使用主成分回归、或者应用正则化方法如Lasso回归。</p>
<p><strong>高斯分布与正态分布的差异</strong>：高斯分布就是正态分布，二者是同一个概念的不同称呼。</p>
<p><strong>Bagging与Boosting的区别</strong>：</p>
<ul>
<li><strong>Bagging</strong>：并行集成方法，通过构建多个独立的预测器然后对它们的预测结果进行平均或多数投票来减少方差。</li>
<li><strong>Boosting</strong>：顺序集成方法，逐步添加预测器，每一个都纠正前一个的错误，主要是通过给前一个模型预测错误的样本更高的权重来实现，以减少模型偏差。</li>
</ul>
<p><strong>评价分类模型的优劣</strong>：</p>
<ul>
<li>使用混淆矩阵及其衍生的指标，如准确率（Accuracy）、精确率（Precision）、召回率（Recall）和F1分数。</li>
<li>ROC曲线（接收者操作特征曲线）及AUC值（曲线下面积）也是评估分类器性能的常用工具，特别是在处理不平衡数据集时。</li>
</ul>
<p><strong>偏置、方差和泛化误差</strong>：</p>
<ul>
<li><strong>偏置</strong>：描述了算法的预测值与真实值之间的差异，高偏置可能导致欠拟合，即模型不能很好地捕捉到数据中的关系。</li>
<li><strong>方差</strong>：描述了算法对给定点预测的波动性，高方差可能导致过拟合，即模型过度捕捉训练数据中的随机噪声。</li>
<li><strong>泛化误差</strong>：是模型在新、未见过的数据上的预测误差，是偏置和方差的总和。理想的学习算法旨在同时最小化偏置和方差，从而达到较低的泛化误差。</li>
<li>在实践中，通常需要在偏置和方差之间找到一个平衡点，这被称为偏置-方差权衡。</li>
</ul>
<p><strong>K-means聚类与层次聚类的差异</strong>：</p>
<ul>
<li><strong>K-means聚类</strong>是一种划分方法，需要预先指定簇的数量k，然后算法通过迭代优化来最小化每个簇内的样本与簇中心的距离。</li>
<li><strong>层次聚类</strong>不需要预先指定簇的数量，它通过创建一个簇的层次结构，可以是自底向上（凝聚的）或自顶向下（分裂的），直到满足某种终止条件。</li>
</ul>
<p><strong>如何确定PCA保留几个主成分</strong>： 通常基于累计解释的方差比例来决定。一个常用的标准是保留的主成分应该解释总方差的大部分（例如，90%或95%）。</p>
<p><strong>LDA与PCA的差异</strong>：</p>
<ul>
<li><strong>LDA（线性判别分析）</strong>是一种监督学习算法，旨在识别不同类别之间的边界。</li>
<li><strong>PCA（主成分分析）</strong>是一种无监督学习算法，旨在数据降维和提取数据中的主要特征分量，不考虑数据的标签。</li>
</ul>
<p><strong>Python中，for循环和while循环的区别</strong>：</p>
<ul>
<li><strong>for循环</strong>通常用于遍历序列（如列表或元组）或其他可迭代对象。</li>
<li><strong>while循环</strong>会持续执行代码块，直到条件不再为真。</li>
</ul>
<p><strong>Pandas实现SQL中的left join</strong>： 使用<code>pandas.merge(df1, df2, on=&#39;key&#39;, how=&#39;left&#39;)</code>，其中<code>df1</code>和<code>df2</code>是要合并的DataFrame，<code>on</code>是连接键。</p>
<p><strong>互斥实验与正交实验的区别</strong>：</p>
<ul>
<li><strong>互斥实验</strong>指的是同一时间内，同一批用户只能参与一个实验。</li>
<li><strong>正交实验</strong>设计则允许在设计阶段考虑多个因素和水平，可以有效地评估多个因素对结果的影响，减少实验次数。</li>
</ul>
<p><strong>AB实验的基本假设</strong>：</p>
<ul>
<li>实验组和对照组在实验开始之前是等价的。</li>
<li>实验中除了被测试的变量外，其他条件保持不变。</li>
</ul>
<p><strong>确定实验最小样本量</strong>： 依赖于预期效果大小、统计功效（通常设为80%）、显著性水平（通常设为5%）和结果变异性。可以使用样本量计算公式或在线计算器。</p>
<p><strong>检测分流均匀性的方法及AA实验</strong>：</p>
<ul>
<li>通过统计测试（如卡方检验）来检测分流系统是否能均匀分配用户。</li>
<li><strong>AA实验</strong>：将用户随机分为两个相同的组，不对组进行任何干预，目的是验证分流系统的有效性和实验结果的随机性基线。</li>
</ul>
<p><strong>伯努利分布B(0.5)的数学期望和方差</strong>：</p>
<ul>
<li><p>数学期望（均值）&#x3D; p &#x3D; 0.5。</p>
</li>
<li><p>方差 &#x3D; p(1-p) &#x3D; 0.5 * 0.5 &#x3D; 0.25。</p>
</li>
</ul>
<p><strong>什么是置信度α</strong>： 置信度（1-α）表示在一系列相同的实验中，我们所得到的置信区间中包含总体参数真实值的比例。α通常被称为显著性水平，表示置信区间不包含总体参数真实值的风险。</p>
<p><strong>中心极限定理和置信区间的关系</strong>：</p>
<ul>
<li><strong>中心极限定理</strong>指出，给定一个足够大的样本大小，样本均值的分布将趋近于正态分布，不论原始总体分布是什么。</li>
<li><strong>置信区间</strong>利用中心极限定理的性质，基于样本均值和标准误差来估计总体均值的一个区间。中心极限定理为构建置信区间提供了理论基础。</li>
</ul>
<p><strong>t检验与z检验的差异</strong>：</p>
<ul>
<li><strong>z检验</strong>通常用于样本量大（n&gt;30）且总体标准差已知的情况，基于正态分布。</li>
<li><strong>t检验</strong>适用于样本量较小（n≤30）或总体标准差未知的情况，基于t分布。</li>
</ul>
<p><strong>单因素方差分析（ANOVA）</strong>： 用于比较三个或更多组的平均数是否存在显著差异，基于的假设是各组内部差异主要由随机误差引起。</p>
<p><strong>常用的有监督学习算法</strong>：</p>
<ul>
<li>线性回归</li>
<li>逻辑回归</li>
<li>决策树</li>
<li>随机森林</li>
<li>支持向量机（SVM）</li>
<li>K最近邻（KNN）</li>
<li>神经网络</li>
</ul>
<p><strong>SQL中，HAVING和WHERE的区别</strong>：</p>
<ul>
<li><strong>WHERE</strong>子句用于过滤行，它在数据分组前应用。</li>
<li><strong>HAVING</strong>子句用于过滤分组，它在数据分组后应用，主要用于聚合函数的条件过滤。</li>
</ul>
<p><strong>什么是内生变量问题？如何解决？</strong></p>
<ol>
<li><p>内生性问题是统计建模和计量经济学中的一个重要概念，特别是在因果推断分析中。内生性问题发生在一个模型的解释变量（自变量）与模型的误差项相关，这违反了线性回归模型假设中自变量应该是外生的（即独立于模型误差项）的假设。内生性问题导致估计的参数偏误，从而使得模型的预测和因果推断不准确。</p>
<p>内生性可能由多种原因引起，包括：</p>
<ol>
<li><strong>遗漏变量</strong>：模型中遗漏了一个或多个重要的解释变量，这些遗漏的变量与包含在模型中的解释变量相关。</li>
<li><strong>双向因果关系（反向因果关系）</strong>：模型的因变量同时也影响一个或多个自变量。</li>
<li><strong>测量误差</strong>：解释变量中的测量误差。</li>
</ol>
<p>如何解决内生性问题：</p>
<ol>
<li><p><strong>工具变量（IV）方法</strong>：</p>
<ul>
<li>工具变量法是解决内生性问题的一种常用方法。所选的工具变量需要与模型中的内生解释变量相关（相关性条件），同时与误差项不相关（外生性条件）。工具变量可以帮助识别出内生变量的真实效应。</li>
<li>适用于工具变量法的经典方法是两阶段最小二乘法（2SLS）。</li>
</ul>
</li>
<li><p><strong>增加控制变量</strong>：</p>
<ul>
<li>如果内生性问题由遗漏变量引起，尝试在模型中加入这些遗漏的变量可能有助于减轻问题。</li>
</ul>
</li>
<li><p><strong>差分或固定效应模型</strong>：</p>
<ul>
<li>对于面板数据（即在时间序列上对相同对象进行的多次观察），使用固定效应模型或差分方法可以消除不随时间变化的遗漏变量所导致的内生性问题。</li>
</ul>
</li>
<li><p><strong>结构方程模型（SEM）</strong>：</p>
<ul>
<li>在复杂的关系中，使用结构方程模型可以同时估计多个方程，这有助于解决因变量和自变量之间存在的双向关系问题。</li>
</ul>
</li>
<li><p><strong>随机对照试验（RCT）</strong>：</p>
<ul>
<li><p>如果可能的话，进行随机对照试验是解决内生性问题的最直接方法，因为随机分配实验条件可以确保自变量与误差项之间的独立性。</p>
<p>内生性问题的解决方法取决于问题的来源和可用数据的类型。在实际应用中，明确内生性的原因并选择合适的方法来解决是至关重要的。</p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>八股文</tag>
        <tag>面经</tag>
      </tags>
  </entry>
</search>
